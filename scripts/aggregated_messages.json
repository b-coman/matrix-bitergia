[
  {
    "date": "2024-02-26",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "* 😶‍🌫️ it's Alex, curious to try matrix. Last time it helped me find an opportunity to get a PR merged to `cabal`"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "* 😶‍🌫️ it's Alex."
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "* 😶‍🌫️ it's Alex"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "Is this thing on?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yup"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "😶‍🌫️"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "🙃"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "👋"
      },
      {
        "userID": "57f0deee7aec3834d9847cbd52de6f0e73a387656df1e7a30cf75ab855ebadb0",
        "message": "👋"
      }
    ]
  },
  {
    "date": "2024-02-26",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "FYI:"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "and threads do too"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "✌️"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "_formatting_ `works`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "hello world"
      }
    ]
  },
  {
    "date": "2024-02-27",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "some discussion about matrix from the Plutus Core team: - concern about stuff being too public (I think this is mostly psychological, but maybe I need to write an evangelical post) - concern about timewasting (we need some guidelines on what topics are appropriate, and to empower people to moderate based on this)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I might draft a page on moderation guidelines for the space 🤔"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "is there an intersect blog or something?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "mostly action items for me I think"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "> <user_id_removed> I'm thinking more like \"if you go off-topic too much in project channels you might get kicked\" Ok, I am looking at notes on WG governance by Simon, chair of the Certification working group which were shared privately. The relevant questions are for writing a document as you described are: \"is there a members list\",\"is this list public?\", \"how do we define behaviour as good?\", \"is there a mechanism to remove members from the group?\" I hope this is helpful 🤠"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "> <user_id_removed> I might draft a page on moderation guidelines for the space 🤔 In my experience, a community management framework that is popular in Cardano is Sociocracy 3.0. An alternative is which approaches community management from point of view is social change and public policy."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "since I also think we need something like \"why it's good to have your communications in an open space\"..."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm thinking more like \"if you go off-topic too much in project channels you might get kicked\""
      },
      {
        "userID": "52f3ae2d075167da1dce7321ab7c5b0edeea20dcfe6ca5c33b510e1e39c2f6d5",
        "message": "Michael Peyton Jones: let me know if I can help... Tam is contracting me as an Open Source Expert."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I don't think we need anything that complicated"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "intersect town hall now!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "just practical stuff"
      }
    ]
  },
  {
    "date": "2024-02-27",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Reminds me CISC/RISC tension: > The CISC approach attempts to minimize the number of instructions per program, sacrificing the number of cycles per instruction. RISC does the opposite, reducing the cycles per instruction at the cost of the number of instructions per program."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* I expect this expression not to compile because of the unsatisfied constraint, but it compiles just fine, do you have an idea why? ``` shouldNotTypecheck :: (True ~ False) => () shouldNotTypecheck = () ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I expect this foo not to compile because of the unsatisfied constraint, but it compiles just fine, do you have an idea why? ``` shouldNotTypecheck :: (True ~ False) => () shouldNotTypecheck = () ```"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "kind of the point is that you can implement everything using the bits we already have in plutus user-space"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "what about `takeList`? seems like a slippery slope to adding all list utility functions"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I commneted"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "hmm"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "* I find this a very strong point in favor of optimizing execution costs further: (make sure to check the [explanation](/) of what that data is) Note how abruptly the distribution gets cut off. Lots and lots of scripts do not exist because Plutus isn't fast enough. Also looking at how many red points (meaning the size of a script is close to the maximum) there are, people suffer with too draconian size limits, which is really unfortunate, because it's not something that we can easily optimize and it's at odds with tinkering with performance, since optimizations often amount to expanding some logic or introducing a more complex data structure/algorithm etc."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "I find this a very strong point in favor of optimizing execution costs further: (make sure to check the [explanation](/) of what that data is) Note how abruptly the distribution gets cut off. Lots and lots of scripts do not exist because Plutus isn't fast enough. Also looking at how many red points (meaning the size of a script is close to the maximum) there are, people suffer with too draconian size limits, which is really unfortunate, because it's not something that we can easily optimize and it's at odds with optimizing performance, since optimizations often amount to expanding some logic or introducing a more complex data structure/algorithm etc."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think actually it's fine. You're basically saying \"if you can give me evidence for an impossible proposition, I will give you something\". that's a perfectly fine _conditional_, but you can't satisfy the premise. So if you try to _call_ this, GHC then has to come up with a proof of `True ~ False`, which it cant' do"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so this fails at the call site"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "wow"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's odd"
      }
    ]
  },
  {
    "date": "2024-02-28",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "> <user_id_removed> is there an intersect blog or something? We do have the overall Intersect gitbook and regular blog post from developer update, can ask Tim for connections points will link you in convo in slack with him. Welcome Silona!"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Every fridat Open Source Committee (Intersect) Friday, March 1 · 8:00 – 9:00am Time zone: America/Los_Angeles Google Meet joining info Video call link: Or dial: ‪(US) +1 413-659-8679‬ PIN: ‪727 183 298‬# More phone numbers:"
      },
      {
        "userID": "52f3ae2d075167da1dce7321ab7c5b0edeea20dcfe6ca5c33b510e1e39c2f6d5",
        "message": "> <user_id_removed> Silona Bonewald: hi Silona, you might want to come to the OSC meetings on Fridays also! Video Link and time?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Christian Taylor: is the link always the same? could we put it in the room description perhaps? maybe also a link to the gitbook space?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "YEs it always the same, hosted under my gmail as fully open"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Silona Bonewald: hi Silona, you might want to come to the OSC meetings on Fridays also!"
      }
    ]
  },
  {
    "date": "2024-02-28",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "That can be fixed by increasing the memory limit, but I don't know if that's on the cards. I think the limit's a bit conservative, but it's not me that sets it."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "or we could consider trying to actually \"release\" memory, since in theory the memory usage is supposed to be peak memory usage"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "> <user_id_removed> but that's pretty tricky I think that's an understatement."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but that's pretty tricky"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "bother"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "> do we know how big the different in the parameters is going to be? No, we still have to work that out. There's a possibility that we might have to rescale the raw figures because we got a new benchmarking machine but I don't think anything has been decided yet."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "do we know how big the different in the parameters is going to be? Presumably it's going to be a fairly big drop, since it incorporates all the evaluator work we've done since Alonzo plus has the faster machine"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "The memory figures definitely won't change because they just measure the size of the things returned by builtins and improving the evaluator won't make any difference to those."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Yes, I think that's right. There should be a cost model update at the next hard fork, but we haven't finalised the details yet."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "right, which will become an issue since many users are I believe limited by memory currently anyway"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I think that CPU costs will probably decrease but memory costs will remain the same."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "mm, makes sense that memory won't change"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "kwxm: do you know?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "(lemme check that)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "note that I believe it is _still_ the case that the cost model for steps etc. has never been updated since Alonzo, so it will finally be in Conway that the cost to users changes to reflect the improvements we've made"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think this is at best a weak argument since I would think it likely that you would see a similar distribution no matter _what_ the limit was"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but I 100% agree that reducing costs is still one of the most impactful things we can do"
      }
    ]
  },
  {
    "date": "2024-02-29",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "btw I'd like to raise as a topic for tomorrow discussion of moderation policy for our public comms channels (ugh). We have a CoC which is great, but I think we might need to add a few more guidelines"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I made a PR to the governance policy to add some more stuff about teams based on what the cardano meta-project has been asking for:"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* 100% agree with the above, will add before we discuss strategy"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "100% agree wth the abvpe, willa dd before we discuss startegy"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Please find the agenda for tomorrow's call and the strategy items to be discussed: Old Business: Update from Policy TWG (MPJ, Marcin, CT) Update on Workflow for the OSPO (Gheorge) Update from Strategy TWG (Sandip, Bogdan, CT) New Business: Moderation Policy (MPJ) Testing Criteria for Strategy (CT, Gheorge) For the Strategy: Please know this strategy is around 60% percent done in development and is intended to work with the OSC and the community over the month of March to finalize the additional 40% of it's content to formulate a community developed actionable strategy for Cardano. The deck summary, please read this first: The google doc, this is the meat of it:"
      }
    ]
  },
  {
    "date": "2024-02-29",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "* > Also I wonder if we can disable the \"how many people have seen your message, and who exactly they are\". > (I'm not saying I really want to, but it's a bit annoying) There's a setting under \"All settings > Preferences\" that seems to turn that off. You can also set it so that you don't appear in the people who have read messages."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "* > Also I wonder if we can disable the \"how many people have seen your message, and who exactly they are\". > (I'm not saying I really want to, but it's a bit annoying) There's a setting under \"All settings > Preferences\" that seems to turn that off. There's another setting to stop you appearing in the list of people who have read messages."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Also I wonder if we can disable the \"how many people have seen your message, and who exactly they are\". (I'm not saying I really want to, but it's a bit annoying) There's a setting under \"All settings > Preferences\" that seems to turn that off. You can also remove yourself from that."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "* > Also I wonder if we can disable the \"how many people have seen your message, and who exactly they are\". (I'm not saying I really want to, but it's a bit annoying) There's a setting under \"All settings > Preferences\" that seems to turn that off. You can also remove yourself from that."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think turning off \"show read receipts\" will stop it showing you who has seen things"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I don't think we can turn it off at the room level afaict"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes, there are lots of settings for this stuff"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Receipts.png"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "no"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I have wondered in the past about imposing some ANF-like restriction in at least some parts of the compiler, but I'm not sure of anywhere where it would concretely help"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes, as you can see from `cabal.project`, we turn off `with-cert` on GHC < 9, so it should be off"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that should get rid of the whole of `dist-newstyle` which has the cache for this stuff"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I see. I'll add a comment above plutus-cert that it comes with a gotcha"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Ok, so the flag I need to invalidate is `-with-cert`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "certainly we could easily transform the program into that form"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm surprised cabal clean doesn't help"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Thanks!"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "doesn't help either"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Somehow cabal can't make a build plan inside the GHC 8.10 nix shell: ``` ✘ yura@fractal  ~/projects/cardano/plutus   master  nix develop .\\#ghc810 -c cabal build all 🤟 Welcome to Plutus 🤟 Type 'info' to see what's inside this shell. Warning: Requested index-state 2024-01-16T11:00:00Z is newer than 'cardano-haskell-packages'! Falling back to older state (2024-01-16T10:58:01Z). Resolving dependencies... Error: cabal: Could not resolve dependencies: [__0] trying: filemanip-0.3.6.3 (user goal) [__1] trying: base-4.14.3.0/installed-4.14.3.0 (dependency of filemanip) [__2] next goal: plutus-cert (user goal) [__2] rejecting: plutus-cert-0.1.0.0 (conflict: base==4.14.3.0/installed-4.14.3.0, plutus-cert => base>=4.15 && <5) [__2] fail (backjumping, conflict set: base, plutus-cert) After searching the rest of the dependency tree exhaustively, these were the goals I've had most trouble fulfilling: base, filemanip, plutus-cert ```"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "It's mentioned in the docs for the let-floating algorithm that it's partially based on . I've been reading it to get some background into this concept, and I noticed that in the paper, the Haskell core syntax for application is `Expr Atom`, so the argument on the right is restricted to be either a variable or a literal. Do we have a similar restriction for PIR?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "This is caused by the following commit"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but we have historically done parameter updates at that time for some reason"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "> There should be a cost model update at the next hard fork, but we haven't finalised the details yet. Does changing cost model parameters require a HF? I don't think that's the case Michael Peyton Jones kwxm"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "Also I wonder if we can disable the \"how many people have seen your message, and who exactly they are\". (I'm not saying I really want to, but it's a bit annoying)"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "It's showing me a red dot on Plutus Core. I assume that means that there's a new message, but I just can't find it."
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "There doesn't seem to be \"also send to the channel\" when replying a thread, which can be quite useful"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Oops, I thought that was going to appear in the thread, not in the main channel."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Ah, there is a comment already, its just not where I expected it to be."
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "Yeah, I don't know how to find it either"
      },
      {
        "userID": "573453d1de7c9fefdf0383a96feefa1761be140d9d58254f574e994b1a3ca8ed",
        "message": "Hello team 🔥"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "RedDot.png"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "* It's mentioned in the docs for the let-floating algorithm that it's partially based on . I've been reading it to get some background into this concept, and I noticed that in the paper, the Haskell Core syntax for application is `Expr Atom`, so the argument on the right is restricted to be either a variable or a literal. Do we have a similar restriction for PIR?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "So this dependency `plutus-cert` won't build with base < `4.15` but GHC 8.10.7 uses `base` 4.14.3.0"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I don't remember how to invalidate that conditional --- `cabal clean` won't help, `direnv reload`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it's the cabal.project conditional not getting invalidated properly"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I've seen it before, but I don't know why and how it disappeared"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I believe GHC also now doesn't have this restriction?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "you had this problem before"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "remember"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "nope"
      }
    ]
  },
  {
    "date": "2024-02-29",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "This is intended as a public discussion channel marcin.wojtowicz . Slack restricts who can join"
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "Maybe it's my client, I use thunderbird and every message including yours is duplicated"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "It's expected to be the interface to e.g. Intersect members. It might replace #network in IOG slack?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "assuming you don't have other secret channels for discussing ouroboros-network stuff"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "see previous discussion (ironically) on the IOG slack"
      },
      {
        "userID": "b2585bcc553e5a6d67a5caef0ff140db4e7b520df5da5b8ebd63c52ac47a77e0",
        "message": "So which slack channel(s) does this replace?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "`#network`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "looks fine to me!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "there are few options which are open, have durable history, and are ideally FOSS"
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "Why are we using this instead of slack?"
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "and why are my messages displayed twice"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "slack isn't public and open"
      }
    ]
  },
  {
    "date": "2024-03-01",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Thank you everyone who was able to participate, please find all the link form today's meeting for review and community comment :slightly_smiling_face: OSPO Model Deck: OSPO Model Miro: OS Strategy Deck: OS Strategy Doc: OS Strategy Testing Criteria Deck: 3 files"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* Thank you everyone who was able to participate, please find all the link form today's meeting for review and community comment 🫡 OSPO Model Deck: OSPO Model Miro: OS Strategy Deck: OS Strategy Doc: OS Strategy Testing Criteria Deck: 3 files"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Meeting minutes from last week have been updated and draft of startegy has been added to gitbook :sunglasses:"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "this is what we want so no porblem to me, we will sort it through with the committee :)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "can we get this as a github PR so we can comment on it easily?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I commented on the google doc"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "lots of disagreement, sorry"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "'"
      }
    ]
  },
  {
    "date": "2024-03-01",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "clarification: its not the schema in general is useless, its the \"meta-schema\" and the way it's defined for CIP is of limited usefulness for the purpose of blueprint validation."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "this doesn't mean that blueprints themselves are useless."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* [\"parse, don't validate\" (c)](/)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I took the error that you caught in my PR where \"constructor\" is used instead of \"index\" and made an intentional mistake: it wasn't caught. Once I inlined the invalid definition - then its caught."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm so confused, surely this must be possible to validate otherwise what is the point?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "as its defined as \"some object with some properties\""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it's not a JSON-Schema feature?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "how does that make any sense?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "baffling"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "maybe ask about that"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "🤷‍♀️"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "wtf"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "And I know why current CIP schema doesn't catch invalid definitions. It only doesn't catch them if they are put in the \"definitions\" section and then referred to by $ref"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I can put it in the PR without attaching it to CI for now"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "if, however, those schemas are inlined then they are validated too"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I had to copy schema files locally"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "its the \"definitions\" section that's the problem"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "cool, let me take a look"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "yes, ajv"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sure"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": ""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "``` Cons: Defines the collection of restrictions on the data, rather than the shape of the data. No standard support for tagged unions. Complex and error prone for the new users (Ajv has strict mode enabled by default to compensate for it, but it is not cross-platform). Some parts of specification are difficult to implement, creating the risk of implementations divergence: reference resolution model unevaluatedProperties/unevaluatedItems dynamic recursive references Internet draft status (rather than RFC) See JSON Schema for more information and the list of defined keywords ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* ``` Cons: Defines the collection of restrictions on the data, rather than the shape of the data. No standard support for tagged unions. Complex and error prone for the new users (Ajv has strict mode enabled by default to compensate for it, but it is not cross-platform). Some parts of specification are difficult to implement, creating the risk of implementations divergence: reference resolution model unevaluatedProperties/unevaluatedItems dynamic recursive references Internet draft status (rather than RFC) ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "This whole json schema standard is ... questionable. This is why there exists another one, JTD :) Here is the comparison that highlights the deficiencies of json schema"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* I thought if we implement blueprint parser then it can be a better validator than actual meta-schema :)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but seriously, can we check with someone that the intention is in fact that the schema is useless?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I thought if we implemented blueprint parser then it can be a better validator than actual meta-schema :)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "\"parse, don't validate\" (c)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "😖"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "* >:("
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "``` #!/usr/bin/env node const log = console.log; const acmeGolden = \"../../plutus-tx-plugin/test/Blueprint/Acme.golden.json\"; const Ajv2020 = require(\"ajv/dist/2020\"); const ajv = new Ajv2020({ strict: true, allErrors: true }); ajv.addMetaSchema(require(\"./CIP-57/plutus-blueprint.json\")); ajv.addMetaSchema(require(\"./CIP-57/plutus-blueprint-argument.json\")); ajv.addMetaSchema(require(\"./CIP-57/plutus-blueprint-parameter.json\")); ajv.addMetaSchema(require(\"./CIP-57/plutus-builtin.json\")); ajv.addMetaSchema(require(\"./CIP-57/plutus-data.json\")); ajv.addKeyword({ keyword: \"example\", type: \"string\" }); ajv.addKeyword({ keyword: \"dataType\" }); log(\"Validating \" + acmeGolden); const res = ajv.validateSchema(require(acmeGolden)); if (res) { log(\"Data is valid\"); process.exit(0); } else { log(\"Data is invalid:\"); console.dir(ajv.errors); process.exit(1); } ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Michael Peyton Jones: I've made a script that checks our golden contract blueprint (json schema) for conformance to its meta-schema from CIP-57 folder. Now I am thinking of the best way to add it to CI: one idea is to create a dedicated github action, other - regular Haskell test that invokes external script (node js app). Wdyt?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I have to say, this does not seem like a hard problem. Element is kind of buggy"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "what tool are you using in the end?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I bet I can just package it with Nix"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Epic Stuck Notifications"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "ajs>"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "* ajs?"
      }
    ]
  },
  {
    "date": "2024-03-01",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "and there may be some gap between \"bona-fide contributor\" and \"suitable for sensitive discussions\" even"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but I think we should only need them for sensitive stuff"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we can have private channels on matrix"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "`It's expected to be the interface to e.g. Intersect members. It might replace #network in IOG slack?` Yes, that's what I am thinking of."
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "I'd expect it to expand beyond just contributors Michael Peyton Jones , and include those who are interested in eg using network stack capabilities , need advice, or simply have encountered problems (where these can't be resolved via eg GitHub). My understanding is that this is essentially an open, public channel and that we might see information presented in other forums, so appropriate care should be taken with any discussions that take place here (do not discuss anything that is overly sensitive, has commercial implications, etc)"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Michael Peyton Jones: That was basically what I said. If you want a more closed Matrix channel that is restricted to bona-fide contributors and which could eg discuss confidential issues, it should probably have a name like ouroboros-network-contributors, or we could just continue to use slack and add people there. But we can see how this channel and our needs evolve. It's relatively specialised so unlikely to be swamped, I imagine"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> <user_id_removed> Yes, if it becomes the main public channel. That isn't urgent, I expect yes, the current status is \"gentle encouragement to start using it\""
      },
      {
        "userID": "b2585bcc553e5a6d67a5caef0ff140db4e7b520df5da5b8ebd63c52ac47a77e0",
        "message": "> <user_id_removed> It's expected to be the interface to e.g. Intersect members. It might replace #network in IOG slack? Somebody should tell the #network channel about it!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think not so much intersect members as the whole set of project contributors, which will (and already does to some degree) extend beyond IOG"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "> <user_id_removed> Somebody should tell the #network channel about it! Yes, if it becomes the main public channel. That isn't urgent, I expect"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "> <user_id_removed> Somebody should tell the #network channel about it! I plan to do that, I want to synchronise this with #cosnensus."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the idea is to treat it like the public chat channel for any other open-source project"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but it's primary purpose is to serve the people working on the project"
      }
    ]
  },
  {
    "date": "2024-03-03",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> I think this is at best a weak argument since I would think it likely that you would see a similar distribution no matter what the limit was I doubt that, because users are clearly exhausting all of cpu, mem and size. It looks like they sacrifice one metric in favor of another to satisfy all of them -- that's even outside of anecdotes, which people do tell us, plus having written some Plutus Tx I now have the experience of making such sacrifices myself. I.e. I think if it all was random, we'd see one metric or at most two metrics being problematic, not all of them. Clearly it's not us making them so balanced, particularly given that we don't even control size."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "is it the case that the mem consumption of a script is more important than how efficient our evaluator is? And is it the case that most of memory consumption comes from builtins? Should we even worry about the bytecode interpreter then? Who cares if cpu stats get better when mem ones are still as severe of a problem. Can we actually tangibly improve the current situation by having a faster evaluator as opposed to improving mem and size handling?"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "* > or we could consider trying to actually \"release\" memory, since in theory the memory usage is supposed to be peak memory usage > but that's pretty tricky we could \"simply\" trigger that release upon GCing a constant using a weak pointer. Impossible to specify, but could work"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> or we could consider trying to actually \"release\" memory, since in theory the memory usage is supposed to be peak memory usage but that's pretty tricky we could \"simply\" trigger that release using a weak pointer upon GCing a constant. Impossible to specify, but could work"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think we should also check whether the mem limits we have in place are sensible"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I don't know where most memory consumption comes from"
      }
    ]
  },
  {
    "date": "2024-03-04",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> I usually prefer explicit lists of imports because sometimes HLS doesn't want to work and it's way easier to see where something is defined if I can just search for it in the import list."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> I remember having particular problems when I found `.*` in one of our source files a few years ago. It's not the easiest thing to grep/google for. Hoogle works quite well for such cases:"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yeah, that's fair. I will tend to import, e.g. `Control.Monad.Reader` or something unqualified since I think it's sufficiently \"well-known\". But that's obviously subjective"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I sometimes wildcard-import the module under test into its corresponding spec as it's pretty much the \"default\" focus of the spec. Esp. when such import brings in many identifiers."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I quite often surreptitiously add explicit imports if I happen to be editing a file for some other reason. Usually no-one seems to notice."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "that said, I don't mind > I'm asking because I'm modifying quite a few modules now and I can just automatically make the imports explicit for them."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I remember having particular problems when I found `.*` in one of our source files a few years ago. It's not the easiest thing to grep/google for."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "things are nicer when you don't rely on HLS for jump-to-definition"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "image.png"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "There are lots of modules in which most (or even all) imports don't contain explicit import lists, like `import PlutusCore.Quote` instead of `import PlutusCore.Quote (MonadQuote)`. I usually prefer explicit lists of imports because sometimes HLS doesn't want to work and it's way easier to see where something is defined if I can just search for it in the import list. Does anyone have any strong opinions on this? I'm asking because I'm modifying quite a few modules now and I can just automatically make the imports explicit for them."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I generally try to say exactly what I'm importing, especially if it's only a few items: it makes it a lot easier to work out where things are coming from. If I'm importing a lot of things then sometimes I'll qualify everything explicitly for the same reason. I think we just give up with some of the bigger modules like `PlutusPrelude` though."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I'm not quite sure how to proceed here. We've had lengthy discussions about this on Slack in the past and I think we could spend hours replaying a lot of that here. If we're trying to be more public then maybe that would be a good thing though."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "for fun: I tried setting the memory cost of Var to 0 and it has a pretty big impact. 20-30% drop in memory costs for the marlowe validators for example"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "With rare exceptions (Prelude-like modules) I prefer to avoid wildcard imports too, thumbs up to you for adding more explicit imports."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I'm also finding it quite difficult to type stuff into a tiny window at the bottom right of the big Element window."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "esp the var thing seems like it might make a big difference and seems pretty safe to me"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I guess I don't feel like we spent that much time on _this_ bit of the question but sure"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we can discuss it at our next technical meeting"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "* Yes, it's just a random(ish) figure of 100 bytes for processing a machine step of any kind. The memory costs for the builltins aren't obtained from benchmarks, but from knowing what the size of the output is. We don't try to take account of any transient memory allocated during evaluation (eg, of library functions underlying the buitlins)."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Yes. However the current CPU costs do give good predictions of execution time. The memory cost is there more as an extra safeguard against runaway computation, and I think that we could relax the limit without too much risk."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "But trying to come up with fine-grained memory costs for everything that happens in the machine could be tricky (is everything really constant cost?) and would still be a bit ad-hoc."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "e.g. arguably `Var` does not allocate at all, and most of the rest should do a few pointer allocations at most, which is way less than 100 bytes!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think we could do both: relax the limit and give less aggressive costs for machine steps"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "(That's a follow-up to my earlier comment, not a response to yours)."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "And you're talking purely about memory costs here, right?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so we could reassess the costs for the machine steps"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well indeed"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "I updated it with benchmarks to illustrate how crazy the difference is, and how large the overhead introduced by recursion is. tail 26 times without recursion: ExBudget {exBudgetCPU = ExCPU 2381832, exBudgetMemory = ExMemory 6632} elemAt 26 with recursion - ExBudget {exBudgetCPU = ExCPU 35964686, exBudgetMemory = ExMemory 95270}"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "Michael Peyton Jones: is this channel intended to be for the kind of discussion in the #plutus Slack channel (i.e., user support), in addition to what we normally discuss on #plutus-core-dev? Or should there be a separate channel for the former?"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> for fun: I tried setting the memory cost of Var to 0 and it has a pretty big impact. 20-30% drop in memory costs for the marlowe validators for example that's quite a lot. Definitely is worth investigating"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "> Hoogle works quite well for such cases I know that now, at the time I was a momentarily at a loss as to how to search for the most general possible regular expression."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I _think_ the argument that `Var` doesn't allocate is reasonably robust: it should just be a lookup and then returning the thing you looked up"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I genuinely think that this is completely pointless: we should renegotiate the limits instead."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "you can also use Hackage Search which is a life saver occasionally:"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Maybe this depends on how familiar you are with standard libraries as well. Some people will just know that `.>` comes from `Control.Lens`, for example, but not me (I just looked up something random there). I remember being confused by `evaluate` once, eventually discovering that it had silently been imported from `Control.Exception`."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "if I ask my brain what I tend to do, I think I tend to do something like: 1. Use plain imports for stuff within the same package (or maybe project) 2. Ohterwise, use explicit import lists if you're just pulling in a couple of things 3. Otherwise, use a qualified import"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "maybe I don't care about explicit import lists so much since I tend to just go straight to grep if HLS doesn't know where something comes from, without even bothering to look at the imports 😂"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we do have many different definitions of \"Term\", but it's usually clear from context I think"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "personally I don't like it, but we codified the main thing we can agree on here: ins"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "Except when you work on ledger/consensus/api where there are a dozen different definition of \"Era\" 😂"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "* personally I don't like it, but we codified the main thing we could agree on here:"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but also I am way too familiar with our codebase to have good opinions..."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "more discussion of and contribution to the style-guide definitely welcome!"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "> the cost of allocating a constructor is something like 1 word plus 1 word per field Then we'd be doing extra cost arithmetic during execution, which would add some overhead. Given that we aren't attempting to account for GC (which would be hard) it might be a case of ignoring the elephant in the room do make delicate adjustments to the costs of tiny components of the machine. Just increasing the limit would be easier, but that's not our decision (and if we did decrease the memory costs of the machine operations maybe the limit would be reduced to compensate!)."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "No. Here's `cekMachineCosts.json`. All the numbers are constants, but they' re all the same and could in principle be different. ``` { \"cekStartupCost\" : {\"exBudgetCPU\": 100, \"exBudgetMemory\": 100}, \"cekVarCost\" : {\"exBudgetCPU\": 23000, \"exBudgetMemory\": 100}, \"cekConstCost\" : {\"exBudgetCPU\": 23000, \"exBudgetMemory\": 100}, \"cekLamCost\" : {\"exBudgetCPU\": 23000, \"exBudgetMemory\": 100}, \"cekDelayCost\" : {\"exBudgetCPU\": 23000, \"exBudgetMemory\": 100}, \"cekForceCost\" : {\"exBudgetCPU\": 23000, \"exBudgetMemory\": 100}, \"cekApplyCost\" : {\"exBudgetCPU\": 23000, \"exBudgetMemory\": 100}, \"cekBuiltinCost\" : {\"exBudgetCPU\": 23000, \"exBudgetMemory\": 100}, \"cekConstrCost\" : {\"exBudgetCPU\": 23000, \"exBudgetMemory\": 100}, \"cekCaseCost\" : {\"exBudgetCPU\": 23000, \"exBudgetMemory\": 100} } ```"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I don't think it's constant cost, but I think we could have some slightly better estimates, e.g. the cost of allocating a constructor is something like 1 word plus 1 word per field, a 64-bit word is 8 bytes, so of we allocate e.g. a frame with 4 fields that's about 40 bytes (so 100 bytes isn't _wildly_ off I guess!). I also think a few special cases like `Var` not allocating might make a big difference"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "okay. so I'm not proposing to do arithmetic based on numbers of fields, I'm proposing something like: 1. Make `Var` have 0 memory cost 2. For the rest, work out the most we allocate for any frame, add a bit, and use that as the memory cost for everything"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "However for CPU costs we can't benchmark the individual steps in isolation (eg if you have a `var` it has to correspond to a `lam` somewhere) so it's hard to find individual CPU costs for them. Experiments show that this works pretty well in practice."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "> I'm proposing something like: [...] I think that's kind of adversarial tinkering at the edges to defeat the arbitrary limit of 14,000,000 ExMem per script. Just increasing it would be much easier."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sure, increasing the limit is easier, but I don't see why it's _wrong_ to tinker if we're giving unnecessarily massive over-esimates?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "hang on, I have forgotten, do we only have one parameter for \"the memory cost of a step\"?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes, I'm only talking about memory"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "However the memory limit in the protocol parameters is much smaller than the CPU limit (14,000,000 vs 10,000,000,000) and that means that the total memory cost of a script is relatively more important: if the CPU cost of a script is n% of the limit then the memory cost is usually about 3n% (again this is for the validation examples). (edited)"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I just looked at our [validation examples]() (which are admittedly a bit old now) and according to the figures produced by `uplc -t` the CPU cost of builtins is typically about 10-25% of the total CPU cost and the memory cost is usually less than 3% of the total."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Yes, it's just a random(ish) figure of 100 bytes for processing a machine step of any kind. The memory costs for the builltins aren't obtained from benchmarks, but from"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "> <user_id_removed> those are just computed a priori, right? I'm not sure what you mean."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "suggests that the costs from machine operations probably dominate"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I mean, we made them up rather than getting them from benchmarks?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the memory costs for machine steps"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "those are just computed a priori, right?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's useful"
      }
    ]
  },
  {
    "date": "2024-03-04",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "[ANN]: karknu was promoted to a maintainer of `ouroboros-network`."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "[ANN]: our sprint update:"
      }
    ]
  },
  {
    "date": "2024-03-05",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "> <@ana-pantilie:matrix.org> if you remove it does it fix the issue? I start seeing other errors (probably ones caused by removing Strict language) but this one is gone, so I am 98% sure that it does fix it!"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* <del>Its not possible to disable a language extension in a module while having it enabled via `default-extensions` by default :(</del>"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Its not possible to disable a language extension in a module while having it enabled via `default-extensions` by default :("
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we can probably track it down, try dumping the core and see if you can figure out why that code is getting compiled stritctly"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "(this `default-extension` even declared separately from other `default-extensions`)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I thought it was in a generated instances, but now I'm confused"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "_arguably_ this is a bug in GHC's libraries"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it shouldn't be, since it's in a different module!!"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Yep, `Lazy annotation (~) without StrictData`"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Oh yeah you're right, weird. Where does the call to come from? Or is this some TH magic going on?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it's also just plain weird, since indeed that code does look like it shouldn't be evaluated.."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "do we have `LANGUAGE Strict` here? I bet we do. I think that applies to the generated code"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yeah, that's super unclear, and we don't have a stack trace to help us :("
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "might need to do some digging"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "and that makes that undefined get evaluated"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "ahahahahaha I think I maybe konw"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "OH WAIT"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "tell me tell me tell me plz"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "So the idea is that one can annotate expressions and types and later query those annotations with `reifyAnnotations` function"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I didn't recognize it as such as I was thinking this is a Prelude for Plutus code users (not for developers)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I guess you could have a look at the source of GHC"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's in plutus-tx"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Where is `reifyAnnotations` defined?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "nope"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "guarded seems fine"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "wtf"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": ""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "For personal projects I am used to use the custom prelude `Relude` (I've also tried `Protolude` long time ago). Both of these custom preludes comes with the batteries included, and some of those batteries are quite nice IMO. In particular I use `guarded` combinator once in a while: ```haskell guarded :: (Alternative f) => (a -> Bool) -> a -> f a guarded p a = if p a then pure a else empty ``` Today I have stumbled upon one case where this combinator comes in handy. So **my question is**: Do we have a place (like our project-local prelude) to host goodies like this one? (other example is `<<$>>`)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* For personal projects I am used to the custom prelude `Relude` (I've also tried `Protolude` long time ago). Both of these custom preludes come with the batteries included, and some of those batteries are quite nice IMO. In particular I use `guarded` combinator once in a while: ```haskell guarded :: (Alternative f) => (a -> Bool) -> a -> f a guarded p a = if p a then pure a else empty ``` Today I have stumbled upon one case where this combinator comes in handy. So **my question is**: Do we have a place (like our project-local prelude) to host goodies like this one? (other example is `<<$>>`)"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Ziyang Liu: I figured out where the \"unread no. of messages\" icon comes from, even though you've scrolled to the bottom of the conversation. It's from unread messages from threads. The problem is that you have to scroll up to each thread to see where the unread messages are, which is very annoying. Does anyone know if you can configure Element to show you a dashboard of all unread messages instead of manually searching for them?"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "That's been annoying me as well. Up at the top of the window there's an icon that looks like the attached PNG , and if you click on that it seems to show you the threads that you haven't caught up with, although I'm still not sure if it does exactly what I want. I haven't found any way to configure Element to behave more sensibly. Now I'm wondering if any of the other clients wold be better."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "* I don't really agree with the idea that long import lists are hard to maintain (from ). I agree with not using `hiding`, but long lists of imports are fine IMO. I think they were hard to maintain in the pre-HLS era, now HLS does all the work for you. Even when I get conflicts, it's easier for me to just accept both changes and leave HLS to remove redundancy and clean things up."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "I don't really agree with the idea that long import lists are hard to maintain (from ). I agree with not using `hiding`, but long lists of exports are fine IMO. I think they were hard to maintain in the pre-HLS era, now HLS does all the work for you. Even when I get conflicts, it's easier for me to just accept both changes and leave HLS to remove redundancy and clean things up."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I am **not** advocating for accumulating a large set of combinators that go past the [Fairbairn threshold](), I am talking about minimal and agreed upon set that is close to this threshold."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Thanks for the input, everyone!"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Thing.png"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "`{-# LANGUAGE NoStrict #-}` seems to help"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "``` rg \"LANGUAGE Strict\" plutus-tx* plutus-tx-plugin/src/PlutusTx/Options.hs 7:{-# LANGUAGE StrictData #-} plutus-tx-plugin/test/Strictness/Spec.hs 3:{-# LANGUAGE Strict #-} plutus-tx-plugin/test/IntegerLiterals/Strict/NegativeLiterals/Spec.hs 6:{-# LANGUAGE Strict #-} plutus-tx-plugin/test/IntegerLiterals/Strict/NoNegativeLiterals/Spec.hs 6:{-# LANGUAGE Strict #-} ```"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "if you remove it does it fix the issue?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it might be in `default-extensions`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yup, it's there"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Gotcha!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "awful"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "when it shouldn't be"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "hahaha"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": ""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "> <user_id_removed> I guess you could have a look at the source of GHC I did, and there is an undefined, but I d k if it not supposed to ever get evaluated"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "`reifyAnnotations` is defined based on a method of the `Quasi` class, so I'm wondering which implementation we're using"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "^ Ana Pantilie Idk what do you mean by \"Quasi implementation\" ?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "try putting the TH that accesses it in another module"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Is this a `Quasi` implementation for one of our types?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but I would also just go looking for that undefined"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "maybe some kind of stage restriction issue?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "pretty sure this is going to run in `Q`"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I see"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I am currently stuck trying to fix this error: ``` test/Blueprint/Tests/Lib.hs:1:1: error: [GHC-87897] Exception when trying to run compile-time code: Prelude.undefined CallStack (from HasCallStack): undefined, called at libraries/ghc-boot/GHC/Serialized.hs:59:62 in ghc-boot-9.6.3:GHC.Serialized Code: (makeIsDataSchemaIndexed ''Datum [('DatumLeft, 0), ('DatumRight, 1)]) ``` its coming from here The error message is useless, Idk what am I doing wrong: ``` {-# ANN type Datum ( MkSchemaInfo { title = Just \"Datum\" , description = Nothing , comment = Just \"The datum of the contract is either left or right\" } ) #-} data Datum = DatumLeft | DatumRight DatumPayload deriving anyclass (AsDefinitionId) $(makeIsDataSchemaIndexed ''Datum [('DatumLeft, 0), ('DatumRight, 1)]) ``` Michael Peyton Jones maybe you have an idea?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "inside the TH macros I am calling `schemaInfoAnn <- listToMaybe <$> TH.reifyAnnotations @SchemaInfo (TH.AnnLookupName dataTypeName)` The error disappears if TH doesn't look at `schemaInfoAnn`."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Oh there's a `<` icon next to the `Thread` title at the top left of the \"thread screen\", if you click on that you can see all the threads in the room, or just the threads you participated in"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "That makes things easier a bit, since you can just scroll though the threads instead of all of the chat history, but it still isn't perfect"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I've checked other clients yday for exactly this reason but I couldn't find clients that support threads (other than Element)."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "No, maybe that doesn't work after all. It's still telling me that I've got three unread threads and I just can't find them."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Thanks for noticing that thread icon, Kenneth!"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Thanks for checking, Yura."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": ""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "#plutus doesn't really have a purpose, it's basically dead. I do think it makes sense for this to be the public channel for \"I need to get in touch with the Plutus devs for some reason\" we can always tell people to go away or open an issue!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "which is an argument that the problem is the recursion, which is interesting"
      }
    ]
  },
  {
    "date": "2024-03-06",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "The `pir` command can convert PIR to PLC, which might be helpful: see `cabal run pir compile -- --help`. Annoyingly I don't think the concrete syntax of PIR is documented anywhere though."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Yes it is, and my mind forgot about it because back when I first looked at it I had way less context than I have now. Thank you, I think it's almost exactly what I was looking for!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "otherwise you can look at the second half of the compiler which is mostly eliminating PIR constructs into PLC, and the passes are hopefully decently documented:"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so, there is the \"unraveling recursion\" paper, which explains a bit about the design of PIR and explains how some of it works"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "some bits are pretty gnarly, do ask if you get stuck!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the paper should be linked from our readme btw"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Nice, thanks!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yay"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Is the PIR -> PLC transformation documented somewhere? I'm manually trying to transform PIR terms to UPLC, and I'd like something to help me check that I'm doing the right thing"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Although, yes if it's not documented anywhere I could just use the compiler on my examples to check that I'm doing the right thing"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Actually, can I run the compiler with _all_ optimisations turned off?"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "It's just for learning purposes, I need to understand the transformation"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think so maybe, esp turning simplifier iterations to 0"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "is there a reason you can't use the compiler?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "or do you just want to know how it works?"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "But I was trying to avoid optimisations"
      }
    ]
  },
  {
    "date": "2024-03-07",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "part of the issue is that HLS is still not really 100% reliable..."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Hmm true, but I think it's more common that HLS breaks when you're making some change and you have lots of compilation errors. If restarting HLS doesn't fix things then you need to manually lookup functions. If you're not familiar with the codebase or there are multiple functions/types with the same name it can get very slow and frustrating. When you have to fix conflicts I guess you can run into the same issue (HLS breaking because there are way too many errors) but does that happen as often as the other case I described previously?"
      }
    ]
  },
  {
    "date": "2024-03-07",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "[ANN]: First Network Working Group will happen on Monday; We're planning to host a discussion on design of Ouroboros-Network:"
      }
    ]
  },
  {
    "date": "2024-03-08",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "378ba0b3a810082fa5bbd12d64abd821e1299a3e738c702f5ce76091ae234115",
        "message": "Is there a reason this is on discord? I feel like I'm being pinged back and forth between comms channels"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "It's only advertised there, as Discord is the primary platform that Intersect is using."
      }
    ]
  },
  {
    "date": "2024-03-11",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "57f0deee7aec3834d9847cbd52de6f0e73a387656df1e7a30cf75ab855ebadb0",
        "message": "> <user_id_removed> Thank you all, for reviewing the current draft on the strategy, from my initial takeaway, our Friday sync will not be enough nor near the sufficient level of detail to get through the content without having a combed agenda for each Friday. > I will be scheduling a strategy TWG session = weekly to review the draft, edit, change and ensure we get thinsg aligned before the whole OSC call to agree on th week's outcomes. > Would anyone @here like to be included? BTW: What are your expectations on OSC members time-wise? I can barely fit this 1 hour + some prep time before/after."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Thank you all, for reviewing the current draft on the strategy, from my initial takeaway, our Friday sync will not be enough nor near the sufficient level of detail to get through the content without having a combed agenda for each Friday. I will be scheduling a strategy TWG session = weekly to review the draft, edit, change and ensure we get thinsg aligned before the whole OSC call to agree on th week's outcomes. Would anyone @here like to be included?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's why the working groups exist: so we explicitly call out the stuff that needs more time and try to find people who have it!"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "as mentioened by MPJ, the hour a week is the only mandate, the strategy TWG is vounteer time if you ahve it"
      },
      {
        "userID": "57f0deee7aec3834d9847cbd52de6f0e73a387656df1e7a30cf75ab855ebadb0",
        "message": "Got it, thanks"
      }
    ]
  },
  {
    "date": "2024-03-11",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "In the PIR let-floating algorithm, knowing whether a variable is bound in a recursive let or a non-recursive let is fundamental. Given how complex recursive bindings would be to handle in UPLC I think it's fine to only \"UPLC let-float\" non-recursive bindings. But we still need to know if a binding is recursive or not, because the algorithm depends on that. So we still need to detect if a UPLC term comes from the transformation of a `let rec` or a `let nonrec`. The problem is that, I can't figure out if there is a sane way to detect whether a term comes from a recursive let binding. Naively I could say that `(\\x -> body) val ==> let nonrec x = val in body` but am I _really_ sure that the `x` is bound `nonrec`?"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "I'm questioning whether \"porting the PIR\" algorithm is a good way to do this. Maybe we can try to figure something UPLC specific out, but we also need to define the problem in a UPLC way. Given that we were initially handling the `force` case, maybe we need to figure out what UPLC terms we can push inside a sequence of exactly applied lambda aplications?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "How strict are we going to be about separating the test case and its supporting functionality? Is it also ok to leave some supporting functionality in the same module and only extract it into a test lib if it grows bigger?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Ok, so for now I'll proceed with the idea that every functionality that supports tests could and should be put in the corresponding Tests.Lib module, regardless of how re-usable or test-specific it is."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "to be clear, when i say \"port the PIR algorithm\" I mean \"steal whatever ideas make sense from the PIR algorithm to do something sensible for UPLC\""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I don't think we need to care about recursive let-bindings in UPLC, they don't exist"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> (\\x -> body) val ==> let nonrec x = val in body this is exactly the correspondence"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "there's no way for it to be used recursively!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes for sure"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I don't see much distinction tbh. I guess if it's a \"fixture\" in that sense it should be in the test file, and if it's gone into another module that's usually because you're reusing it, and hence it's a lib 🤷"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Ah, I see where our reasoning diverges: I put stuff into other module sometimes to de-clutter the test scenario itself, if the fixture is too noisy or occupies the majority of the test code."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I'd like to reserve it to mean: this functionality supports a particular test scenario, its not \"lib\" as its not planned to be general and re-usable."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* I'd like to reserve its meaning to: this functionality supports a particular test scenario, its not \"lib\" as its not planned to be general and re-usable."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "and then stuff that gets used a _lot_ gets promoted to one of our `testlib` libraries that are actual exported component"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "so in my habit something could be made into a dedicated module for reasons other than re-usability."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "\"fixture\" is a pretty reasonable naming but not the one we've historically used 🤷"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "more like mental compartmentalization."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "s"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "> I think we already do exactly that all over the place Do we? I'm not aware of a module that ends with \"Lib\" or in a `testlib` package that contains a specific test case, like `Blueprint.Tests.Lib` does"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "generally in UPLC we have exactly one thing that looks like a let-binding: an immediately-applied lambda. And it's exactly just a normal non-recursive let"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "> I think the name of this module is a bit confusing. We usually say \"test lib\" when we mean a module that provides helper functions for writing tests. E.g., we have plutus-core-testlib, plutus-ledger-api-testlib and plutus-tx-testlib. But this is just a specific test case."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sure. then are you going to change the name from \"fixture\" to \"lib\" when it gets a second user? ;) why not just call it \"lib\" - that's still meaningful if it only gets used once!"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I don't mind if we agree on the `Tests.Lib`, in fact, this is what I did in the PR after your code-review comment."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "So maybe the actual question is \"Is it ok to put test-specific functionality in a [test] lib module?\""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I have this connotation that fixture is something more \"static\" (like data) while lib is more like a set of functions..."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think I just disagree with Ziyang, and I think we already do exactly that all over the place"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I guess several modules can share a fixture or share a lib, not much difference."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "However, Ziyang Liu expressed his confusion with this"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I see your point"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Suppose I have a test scenario that require some specific setup: data types, maybe a function. Where would you place such setup, knowing that its very test-specific and likely isn't going to be re-used?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Depending on its size I'd rather leave it at the bottom of a test module or extract a satellite module named \"Fixture\""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "(just posting this, since it's something I wrote not that long ago and has some relevant content: )"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "(and I would love to add a section on tests to the style guide, perhaps you can start that, Yura?)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we have historically just called such things some variant of \"Lib\" (rather than \"Fixture\")"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "and yeah, leave it in the test file unless you're using it across several modules"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Best practices organizing tests 🧵"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I used to calling such a setup"
      }
    ]
  },
  {
    "date": "2024-03-12",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "52f3ae2d075167da1dce7321ab7c5b0edeea20dcfe6ca5c33b510e1e39c2f6d5",
        "message": "create a task force to do the thing and then discuss in the WG. Is a common pattern."
      }
    ]
  },
  {
    "date": "2024-03-12",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "* We have a plan to eventually make the optimisation pipeline configurable (see PLT-1046 and PLT-1047), so it might make sense to have an adjustable number of iterations per optimisation procedure, but to usually have the number set to some default. Maybe we should leave that until we actually need it though."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "We have a plan to eventually make the optimisation pipeline configurable (see PLT_1046 and PLT-1047), so it might make sense to have an adjustable number of iterations per optimisation procedure, but to usually have the number set to some default. Maybe we should leave that until we actually need it though."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I also wanted to have the option to run things to fixpoint at one point, but we never implemented that"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "what's the status of [this]() issue, was any consensus reached?"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "* When writing optimisations, which approach do we prefer: 1. The new optimisation procedure is allowed to traverse the term multiple times, until the the term cannot be simplified by this particular procedure any further 2. The new optimisation procedure can traverse the term a single time, potentially not simplifying the term fully. The top simplifier (which applies all optimisation procedures in sequence) is allowed to iterate multiple times. Edit: maybe not as restrictive as \"a single time\", but a predefined number of times (for example, the procedure does exactly 3 term traversals)."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "* When writing optimisations, which approach do we prefer: 1. The new optimisation procedure is allowed to traverse the term multiple times, until the the term cannot be simplified by this particular procedure any further 2. The new optimisation procedure can traverse the term a single time**, potentially not simplifying the term fully. The top simplifier (which applies all optimisation procedures in sequence) is allowed to iterate multiple times. ****Edit**: maybe not as restrictive as \"a single time\", but a predefined number of times (for example, the procedure does exactly 3 term traversals)."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "When writing optimisations, which approach do we prefer: 1. The new optimisation procedure is allowed to traverse the term multiple times, until the the term cannot be simplified by this particular procedure any further 2. The new optimisation procedure can traverse the term a single time, potentially not simplifying the term fully. The top simplifier (which applies all optimisation procedures in sequence) is allowed to iterate multiple times"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "in general I think our optimizations should strive to be a static number of passes. often we have an analysis pass of some kind and then the pass that alters the term. that's fine"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "In my experience, 1. is bad because it increases the complexity of the simplifier both in the performance sense and the understanding the code sense"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the latter for sure"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so yeah, what you said"
      }
    ]
  },
  {
    "date": "2024-03-12",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "hmm I had the idea I already had an integration PR damianag"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "Oh, awesome, so I better review that PR 🤣"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I presume it's supposed to be split."
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "* Sorry it slipped my attention"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I should have remembered, sorry!"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "this conversation was too familiar :P"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "Sorry it slipped my attentino"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "No worries!"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": ""
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "This is the current type of `mkHandlers` (@ Consensus): ``` mkHandlers :: forall m blk addrNTN addrNTC. ( IOLike m , MonadTime m , MonadTimer m , LedgerSupportsMempool blk , HasTxId (GenTx blk) , LedgerSupportsProtocol blk , Ord addrNTN ) => NodeKernelArgs m addrNTN addrNTC blk -> NodeKernel m addrNTN addrNTC blk -> (PeerSharingAmount -> m [addrNTN]) -- ^ Peer Sharing result computation callback -> Handlers m addrNTN blk ```"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "yes! Now you need to create a `PeerSharingAPI` with `newPeerSharingAPI` at the top level and pass that to `peerSharingServer` mini protocol thingy"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I'd say you need to put PeerSharingAPi inside NodeKernel if it isn't there already"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "ah, that's what's tripping me (I guess the compiler did not reach that part yet :) )"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "Makes sense, let's see if I can access all the args needed to call `newPeerSharingAPI` ...."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "btw `s` although not very clear should be a `StdGen` or similar"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "now that callback was removed to simplify the types"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "you can't, previously there was a callback"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "Right, that's the first hurdle :D"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "Hi guys, I'm trying to integrate the latest version of `o-network`. I need to change a ``` PeerSharingAmount -> m [addrNTN] ``` argument to one of type `PeerSharingAPI`. Looking at the consensus code, I see that the `computePeers` argument, seems to be provided in ``` Diffusion.daApplicationInitiatorResponderMode = \\computePeers -> combineVersions [ simpleSingletonVersions version llrnVersionDataNTN (NTN.initiatorAndResponder miniProtocolParams version rnPeerSharing $ ntnApps blockVersion computePeers) | (version, blockVersion) <- Map.toList llrnNodeToNodeVersions ], ``` However, I can't find the definition of `Versions` in: ``` , daApplicationInitiatorResponderMode -- Peer Sharing result computation callback :: Versions ntnVersion ntnVersionData (OuroborosBundleWithExpandedCtx InitiatorResponderMode ntnAddr ByteString m a ()) ``` (the only one I could find seems to be a `newtype` wrapping a `Map` 🤔)"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "I talked with the other Consensus folks, we'll probably merge #940 into the `8.10` release branch I'm working on, (and we'll eventually merge this onto `main`)"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "That's okay!"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "then the networking code provides constants: ``` newPeerSharingAPI rng ps_POLICY_PEER_SHARE_STICKY_TIME ps_POLICY_PEER_SHARE_MAX_PEERS ```"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "* then the networking code provides constants: ``` newPeerSharingAPI rng ps_POLICY_PEER_SHARE_STICKY_TIME ps_POLICY_PEER_SHARE_MAX_PEERS ```"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "* then the networking code provides constants: ``` newPeerSharingAPI rng ps_POLICY_PEER_SHARE_STICKY_TIME ps_POLICY_PEER_SHARE_MAX_PEERS ```"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "> I'd say you need to put PeerSharingAPi inside NodeKernel if it isn't there already Ah, ok"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "It seems I need to replace `(PeerSharingAmount -> m [addrNTN])` with `PeerSharingAPI addrNTN s0 m`"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "`NodeKernelArgs` already provides an `StdGen`"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "you should use those when initializing nodeKernel"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "Which type should I use for `s` in"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "You should use `StdGen`"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "damianag: you should pull changes from `master`, we modified this recently and there's not `computePeers` in `daApplicationinitiatorResponder` mode. Maybe we should publish a new version to CHaP."
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "If it's a newtype around a `Map`, how come we can: ``` Diffusion.daApplicationInitiatorResponderMode = \\computePeers -> ... whatever ```"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "which provides `newPeerSharingAPI` that can be used to get a PeerSharingAPI to plug into where you need"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "So I have to replace the `computePeers` by peer sharing API"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "But I'm confused about the type of `Versions`"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "I'm using the latest `master` :)"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "This is the PR that introduces the changes:"
      },
      {
        "userID": "1c6bd35dadebeff993d975173bcffc3efa63e9774b7ab734e5cde53e764d7d75",
        "message": "That's why I need to change the type :)"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I see 😁"
      }
    ]
  },
  {
    "date": "2024-03-13",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "When testing a blueprint generation functionality I used the following way of compiling plutus validator code: ``` validatorScript2 :: PlutusTx.CompiledCode (Datum2 -> Redeemer2 -> ScriptContext -> Bool) validatorScript2 = $$(PlutusTx.compile [||typedValidator2||]) `PlutusTx.unsafeApplyCode` PlutusTx.liftCodeDef (MkParams2 True False) ``` I also know that its possible to compile it after wrapping in the untyped wrapper: ``` {-# INLINEABLE typedValidator #-} typedValidator :: Validator typedValidator _params _datum _redeemer _context = False {-# INLINEABLE untypedValidator #-} untypedValidator :: Params -> BuiltinData -> BuiltinString -> BuiltinData -> () untypedValidator params datum redeemer ctx = PlutusTx.check $ typedValidator params acmeDatum acmeRedeemer scriptContext where acmeDatum :: Datum = PlutusTx.unsafeFromBuiltinData datum acmeRedeemer :: Redeemer = redeemer scriptContext :: ScriptContext = PlutusTx.unsafeFromBuiltinData ctx validatorScript :: PlutusTx.CompiledCode (BuiltinData -> BuiltinString -> BuiltinData -> ()) validatorScript = $$(PlutusTx.compile [||untypedValidator||]) `PlutusTx.unsafeApplyCode` PlutusTx.liftCode plcVersion110 MkParams { myUnit = () , myBool = True , myInteger = fromIntegral (maxBound @Int) + 1 , myBuiltinData = PlutusTx.toBuiltinData (3 :: Integer) , myBuiltinByteString = emptyByteString } ``` The difference is that resulting `CompiledCode` contains either proper domain types (Datum/Redeemer) or opaque `BuiltinData`. The question is: If the blueprint generation code relies on the proper domain types being visible in the resulting `CompiledCode (Datum -> Redeemer -> Bool)` then is it something that existing contract authors already do, or will it require them to compile existing code differently in order to enable blueprints ?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "users generally need a `CompiledCode (Data -> Data -> Data)`, it's not necessarily straightforward to convert the two"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Right, this is what I found in our documentation"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "hmm, that's a problem"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "image.png"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "Unless one is using `AsData`, they should be able to compile the typed validator and get `CompiledCode (Datum -> Redeemer -> ScriptContext -> Bool)`, and then convert it to `CompiledCode (BuiltinData -> BuiltinData -> BuiltinData -> ())`. It is not the approach taken in our doc, but it can be done. So it can be useful to provide an option to take `CompiledCode (Datum -> Redeemer -> ScriptContext -> Bool)`, and it should be easy to do"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "> <user_id_removed> what's the status of [this]() issue, was any consensus reached? The four items originally raised by Matthias have been resolved. But someone raised some additional feature requests in a comment, which won't be done in Conway but can be done in the next ledger era"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "It has just occurred to me that point 2 (Constructor wrapper around a newtype TxId) might be formulated more generally: do we want our IsData derivation machinery to always avoid generating a wrapping constructor for newtypes (not only TxId) ?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "if I was going to change it I would make it give an error and tell people to use newtype deriving"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "So this means that for a blueprint users are going to provide a) compiled code b) types. Separately."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I considered that but it has historically done that and I didn't want to change it"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "by the time the code is compiled the info about types is gone."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes I guess so"
      }
    ]
  },
  {
    "date": "2024-03-14",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Christian Taylor: can you invite Kevin to this room?"
      }
    ]
  },
  {
    "date": "2024-03-14",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "If you think about `Maybe` the computation and `[]` the computation I think there is a difference: - you might have a computation which either fails or returns a non-empty collection of things, `Maybe (NonEmpty a)` makes this pretty clear to me - `[]` suggests to me a non-deterministic computation which you can branch on In practice I think it's better to use instead of the list monad though."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "often semantically we want a list when we think of the set of elements uniformly. Sometimes it's more the case that the \"nothing\" case is different somehow, in which case I think it can be nicer to think of it as inside a maybe"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "for example, `parse :: String -> Maybe (NonEmpty Int)` or something: here the Maybe _means_ something different"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Tiny survey: Can you think of a reason/case when `:: Maybe (NonEmpty a)` is better than `:: []` ?"
      }
    ]
  },
  {
    "date": "2024-03-15",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Sorry to all, with the confusion on timezone and daylights savings causing push back on calendar time, I have redone the invite to be the sametime as usaul, enxt week 🙂"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Christian Taylor: are we really having an open-source meeting on Saturday's 5:30 in the morning my local time? 😁"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I could copy the link to the room but I can't invite people, which is weird"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "weird that you need permissions to invite people to rooms 🤔 this isn't a private room I thought?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "that's weird, need to do soem discovery on that, cause \"it's public\""
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I fixed the invite pay no attention to the redundant one 😅"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Nick Clarke Sandip Pandey Adam Dean the-coot here is a straw draft of a potential policy that could I think address most of the issues"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "> <user_id_removed> Christian Taylor: can you invite Kevin to this room? invited him"
      }
    ]
  },
  {
    "date": "2024-03-15",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "> Non-breaking change. Otherwise, if only new bindings, types, classes, non-orphan instances or modules (but see below) were added to the interface, then A.B MAY remain the same but the new C MUST be greater than the old C. Note that modifying imports or depending on a newer version of another package may cause extra non-orphan instances to be exported and thus force a minor version change."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "yeah, I'll probably make a revision to node to constrain the o-n-api version"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I'd say it's they fault not ours."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "habemus release!!"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "* I'd say it's their fault not ours."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "so minor version after all ? :)"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "From: /"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "well... apparently adding Generic and NFData instances is a breaking change to cardano-node :facepalm:"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "so ouroboros-network-api needs to be a major bump as well..."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "everything should fall into place now, I'll make a PR to fix it"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I think this case is a bit more subtle"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "were they orphaned in `cardano-node`?"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "CI caught it 🙂: machiens vs humas: 1:0 😉"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "mystery solved :D"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "yes"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": ""
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I'd either have to bump major version for o-n-f or make a revision to make the constraints be >= 0.11.1 && < 0.11.2"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I fixed all the errors reported by QuickCheck in the tx-submission branch; now I can move forward 🙂."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "and me not understanding cabal constraint syntax well enough to spot it right away"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Yes, minor changes shouldn't break things. Was it the newish `^>=` operator?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "it was ouroboros-network-framework dependency bound allowing the minor version bump"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "so perhaps someone (me ?) didn't update the changelog correctly :("
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "^ marcin.wojtowicz you're aware of it too?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "but minor version shouldn't break things"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "good god"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "if it's trying to build `o-n-0.12.0.0` and it fails now, maybe the problem is that `0.12.0.0` are not restrictive enough, e.g. it could pull too new version of `o-n-f`."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "The question is why is it pulling `ouroboros-newtork-0.12.0.0`?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "and it is failing to build ouroboros-network of all things, which is truly odd"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "This is a curated list of packages defiened somewhere in `*.nix` files."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I bumped foliage flake lets see"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "it seems more complicated :("
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "CI job `build new packages` is pulling 0.13"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I don't know what smoke test packages are"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "yes"
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "but it wouldn't build anyway because the tests don't compile yet - I can include a small temporary commit that disables the test module that I still have to fix so at least you can build it locally if you want"
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "I read this thread, but everything built fine on my side (after I disabled the tests that don't compile :)) so I wasn't sure what the issue is"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "This is in `CHaP` (cardano-haskell-packages). I was just asking if you are aware of `^>=` (we use it quite extensively)."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "there's no issue on the repo, the only issue is to understand if o-n-f should be a major or minor release"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Our release script has no chance to verify that; Maybe we actually can retire our release script."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "it will build fine on our repo, but CHaP CI will test old version with different dependency versions"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I think it was me that made a change and marked it as non-breaking"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "If we haven't yet published `o-n-f` then a major version will be better."
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "Well my branch is rebased so it's probably affected"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "it could be caused by some other dependency. After all either `o-n-0.12` has been broken (unlikely) or `o-n-0.12` broke by updating dependencies."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I mean version bounds in 0.12.0.0 are not restrictive enough; or maybe `o-n-f` should be a major bump rather than a minor."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I'll just try to debug on the repo instead of the CHaP repo"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "however I don't see any reason for it to be a major bump"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I can't wrap my head around this :("
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "that makes a lot of sense"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "found irt"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "* found it"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "ahhh"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "user_id_removed: once you're done with the releases it would be good if you could address this issue: ; Don't forget to add it to current sprint when you start working on it."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "It's trying to build `ouroboros-network-0.12` but you bumped it to `0.13`. I guess somewhere constraints are not right."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "The release is giving more fight than I was expecting 😅 But yeah I'll tackle that afterwards!"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I mean things built in network repo, if I had gotten the bounds wrong it wouldn't have built, right?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "CHaP build is failing and I don't know why. Maybe you can spot it"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Yeah, tnat's how it usually goes, too many unknowns upfront."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Yes, I think so."
      }
    ]
  },
  {
    "date": "2024-03-18",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "some kind of GHC issue, I'm not sure this is even really to do with us per se 🤔"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "We have this new bug report: This sounds like some GHC/OS bug, right?"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I think that's a blst problem. I left a comment."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I have no idea where that is coming from"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Thank you!"
      }
    ]
  },
  {
    "date": "2024-03-18",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "oh, somebody closed branch I wanted to push too 😄"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Can ask for a review:"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "One of the links was wrong."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "oh, I see. I messed it up."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "0.13 is for 8.9.1"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "sorry 🫠"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": ""
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": ""
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "here it is for reference: ``` #!/bin/bash # Function to format date to Unix timestamp if needed format_date() { local input_date=$1 if [[ \"$input_date\" =~ ^[0-9]+$ ]]; then # Input date is already a Unix timestamp echo $input_date else # Input date is in ISO 8601 format, convert to Unix timestamp date -d \"$input_date\" +%s fi } # Fetch the latest release PR details and convert closedAt to a timestamp latest_release_date=$(gh search prs repo:IntersectMBO/ouroboros-network \"Release ouroboros-network 0.12.0.0\" in:title --json closedAt --jq '.[0].closedAt') latest_release_date_ts=$(format_date $latest_release_date) # Fetch all PRs in the project, extracting necessary details in one go to minimize calls prs_json=$(gh project item-list 5 --owner IntersectMBO -L 500 --format json --jq '.items[] | select(.content.type == \"PullRequest\") | {repo: .content.repository, number: .content.number}') merged_prs=() # Process each PR to check if it was merged after the latest release while IFS= read -r pr; do pr_repo=$(echo \"$pr\" | jq -r '.repo') pr_number=$(echo \"$pr\" | jq -r '.number') # Fetch PR merged date pr_merged_date=$(gh pr view -R $pr_repo $pr_number --json mergedAt --jq '.mergedAt') if [ ! -z $pr_merged_date ] && [ $pr_merged_date != \"null\" ]; then pr_merged_date_ts=$(format_date $pr_merged_date) if [ $pr_merged_date_ts -gt $latest_release_date_ts ]; then merged_prs+=(\"$pr_repo#$pr_number\") fi fi done < <(echo \"$prs_json\") # Print merged PRs after latest release echo \"Merged PRs after latest release:\" for pr in ${merged_prs[@]}; do echo \"PR $pr\" done ```"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "btw, when adding a new version it needs to be added on top (the default is to add it at the bottom) so the sorting of the groups is right. There's no other way to control the order in which things are presented."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "> <@the-coot:matrix.org> one can get this list with: > ``` > git log -1 ouroboros-newtork-0.12.0.0.. | grep \"Merge pull request\" > ``` That's a lot simpler 😝"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "yes, but with your approach we might be able to get all the necessary data to update the PRs."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Your script outputs things from other repos too, e.g. `cardano-{cli,api}`."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "but that's ok, it's easy to do manually."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I am not sure if this is possible with exposed API."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "that's unfortunate"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "yes, it outputs all project's PRs"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "During the weekend I worked out `cabal haddock-project` version which supports sublibraries. Once this is published we can use sublibraries in both `io-sim` and `ouroboros-network` to simplify our release process. I also discovered a regression in `haddock-9.8.2` (with respect to `haddock-9.6.4`:"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "user_id_removed: have you run your script to update the `ouroboros-newtork` release board?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "> <@the-coot:matrix.org> Note: bootstrap peers were released in `0.12.0.0` so they were probably included in the previous version of the node. they didn't 8.9.0 was the first time bootstrap peers were introduced"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Note: bootstrap peers were released in `0.12.0.0` so they were probably included in the previous version of the node."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "the-coot: first line of the update is a redundancy: \"We released cardano-node-8.9.0 was released.\""
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "Could I get a review: ? I have a branch for 8.9.1 and am working on CHaP releases now"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "There are PRs tagged with peer sharing in this release:"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Cardano Network Update:"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "yes"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Published update:"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "thanks"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "``` git slog ouroboros-network-0.12.0.0..origin/master |rg \"Merge pull request\" 838df5513f Merge pull request #4833 from IntersectMBO/bolt12/fix-o-n-f-release (tag: ouroboros-network-protocols-0.8.1.0, tag: ouroboros-network-framework-0.12.0 .0, tag: ouroboros-network-api-0.7.1.0, tag: ouroboros-network-0.13.0.0, tag: cardano-client-0.3.1.2, origin/master, origin/HEAD) 59fb450fbb Merge pull request #4831 from IntersectMBO/dependabot/github_actions/actions/cache-4 624085b7a8 Merge pull request #4830 from IntersectMBO/bolt12/cardano-client-release 14da7bb90a Merge pull request #4829 from IntersectMBO/bolt12/release-0.13.0.0 bdcb1c59ca Merge pull request #4828 from IntersectMBO/bolt12/release-network df224ad622 Merge pull request #4717 from IntersectMBO/bolt12/cbor-benchmarks 490a5e754c Merge pull request #4826 from IntersectMBO/karknu/peersharing_moar 83a7e31256 Merge pull request #4822 from IntersectMBO/bolt12/fix-light-peersharing (master) a1869d5037 Merge pull request #4825 from IntersectMBO/amesgen/n2nv12-unused 72c8f5d93a Merge pull request #4798 from IntersectMBO/bolt12/cbor-benchmarks-2 852db4f676 Merge pull request #4816 from IntersectMBO/bolt12/bsp-fix-trace 78fc889b83 Merge pull request #4823 from IntersectMBO/dependabot/github_actions/cachix/install-nix-action-26 cfb1c7e759 Merge pull request #4808 from IntersectMBO/logistics/network-conf 6a261504ef Merge pull request #4806 from IntersectMBO/bolt12/fix-any-cold-async-demotion 28aedfedae Merge pull request #4795 from IntersectMBO/bolt12/4782 a14b54d286 Merge pull request #4817 from IntersectMBO/coot/codeowners 68742e7b3a Merge pull request #4820 from IntersectMBO/bolt12/cardano-ping-release (tag: cardano-ping-0.2.0.13) 335c186c17 Merge pull request #4819 from IntersectMBO/karknu/ping_update ```"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Done: user_id_removed could you update the release notes so it mentions all the most important changes. You can also link to this board from the release notes."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Your list contains 18 prs; my simple grep too; so there's something missing or maybe you resolve it in some way."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Another level of sophistication: resolve PRs to issues if there's an association issue -> PR."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "which PRs are included in your list? I compare by merge date"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "it is easy to filter to only get the network ones though"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Less for `ouroboros-newtork`."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "That could be useful in `cardano-node` 🙂"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "that's what I thought :P"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "``` Merged PRs after latest release: PR IntersectMBO/ouroboros-network#4795 PR IntersectMBO/ouroboros-network#4798 PR IntersectMBO/ouroboros-network#4806 PR IntersectMBO/cardano-cli#615 PR IntersectMBO/cardano-api#459 PR IntersectMBO/ouroboros-network#4812 PR IntersectMBO/ouroboros-network#4814 PR IntersectMBO/ouroboros-network#4816 PR IntersectMBO/cardano-node#5691 PR IntersectMBO/ouroboros-network#4819 PR IntersectMBO/ouroboros-network#4820 PR IntersectMBO/ouroboros-network#4822 PR IntersectMBO/ouroboros-network#4823 PR IntersectMBO/ouroboros-network#4717 PR IntersectMBO/ouroboros-network#4828 PR IntersectMBO/ouroboros-network#4829 PR IntersectMBO/ouroboros-network#4830 PR IntersectMBO/ouroboros-network#4833 ```"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "one can get this list with: ``` git log -1 ouroboros-newtork-0.12.0.0.. | grep \"Merge pull request\" ```"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "It would be nice to script adding the label too. I'll do that manually."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "We should add it to the release steps described in `CONTRIBUTING.md` file."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "peer sharing improvements are coming on 8.9.1"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "Probably not, I always forget to do that"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Btw, have you pushed tags to `ouroboros-network`?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "Yes, I still need to improve it"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "done"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I suspect we haven't mentioned all changes in network section of the release: ; e.g. peer sharing improvements are not mentioned there."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "then we can filter those and pick the ones we want for 0.13"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "running it... It will give us all project's PRs that were merged after 0.12"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I'd like to include it in the cardano update."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "You probably will need to add a new value for the new version."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I'll do it"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Thanks 🙂"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I haven't"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "👍️"
      }
    ]
  },
  {
    "date": "2024-03-20",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Tip of the day: if you want to hide a message in Element.IO such that nobody ever finds it - make sure its marked as \"Unread\"."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I'm not sure how helpful this will be, but the `uplc` executable has a command called `print-builtin-signatures`. That has [code to process signatures]() that you might be able to adapt. You have to work your way along the `TypeScheme` until you get to the `TypeSchemeResult` at the end. I guess there's a question of what \"arity\" actually means. Things are complicated by the fact that in builtins you're allowed to interleave actual arguments with type instantiations (which mean that you have to apply `force`s in UPLC)."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "For a task I am working atm. I need to determine if a `UPLC.Term.Builtin` is fully applied or not deep inside the UPLC inliner. So this requires knowing a builtin arity. Such information needs to be passed down to inliner. My question is where to get it? The only thing I have found is `ToBuiltinMeaning =>` that is present in the Simplifier's context, in which an inliner is used."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* Tip of the day: if you want to hide a message in Element.IO such that nobody ever finds it - make sure its marked as \"Unread\". /sarcasm"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "I think you can get it the same way PIR's `termEvaluationInfo` gets it"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "image.png"
      }
    ]
  },
  {
    "date": "2024-03-20",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "As I understand they need to know if we are only connected to local roots, and in that case not do the transition `TooOld -> YoungEnough`; exposing all targets give them that information."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "right but the targets aren't enough information for that. If an SPO configured a lot of local root peers they will still be the first ones to fill the targets"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "> I don't see how exposing targets would work for consensus, since they have to know which peers are local and which peers are not, right?"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "these are effective targets, maybe they should be called differently."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "the number of local, public, ledger, etc.. peers that we are connected to?"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "_I need to go do groceries, I'll be back soon_"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "e.g. the number of hot local root peers"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "what do you mean with effective targets?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "so the counters, essentially"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "user_id_removed: I realised that we could address the 4815 a bit differently, making it much easier for consensus; see"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "> <user_id_removed> You could open an issue for that, I think with a warning we could enable that. Or with PeerSharingEnabled I will sleep on it. It would be useful right now for the CF node in Singapore that I've asked people to add to their topologyfile to get started with peersharing. However I'm not sure it would be needed in the long run"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "It's also quite simple to implement, it's something we need for `churn`, and it makes things simpler on consensus side. Things in the `ExpandedInitiatorContext` are good to modify of behaviour of a particular client, using it to summarise all connections is abstracting the problem at the wrong level."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "> <user_id_removed> if it was possible to specify a localRoot with a warm valency of 1 and a hot valency of 0 one could add localroots just for peersharing with You could open an issue for that, I think with a warning we could enable that. Or with PeerSharingEnabled"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I see, that could be helpful indeed but is it worth it though? Is this feature something useful for the future? Adding `eicIsLocalRootPeer` was simple enough Anyway I asked consensus opinion they might have a preference"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "if it was possible to specify a localRoot with a warm valency of 1 and a hot valency of 0 one could add localroots just for peersharing with"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "in order to avoid not managed concurrency, exhibited by implicit `threadDelay`s"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "release 0.13.1.0 for 8.9.1:"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "why do we need it for churn?"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Yes"
      }
    ]
  },
  {
    "date": "2024-03-21",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "remind me why we have `mkNil` instead of just using list constants? I know it's about getting the type tag from somewhere, but we have e.g. `mkNilPairData` where we should be able to know the type tag statically and make a constant? effectfully do you remember?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "also, any reason why we shouldn't in fact do ? Seems like free performance for a sensible change. I guess the alternative is a specialized term for evaluation or the bytecode thing"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "does it not have a note saying that? hmph"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "even there it might be wrong, but at least if we fix that it'll get passed through correctly"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "So I reckon that we don't want to use it anywhere, only at the top level?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "again, make it as similar to the PIR version as possible, IMO"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Actually, `Default` class seems so risky, stuff just appears out of nowere."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it is not information the compiler knows a priori"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I used `def` for a semantics variant. Magic."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "and then good old argument passing"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that is definitely wrong"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "So in PIR the `BuiltinsInfo` is passed top down: `instance Default (BuiltinsInfo uni fun)` -> `CompilatinCtx` -> `simplifierIteration` -> `inlinePassSC` -> `InlinePass` -> `inline` -> `termEvaluationOrder`"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "So PIR inliner operates in the `InlineM` that differs from UPLC inliner in the `InlineInfo` it contains in the reader's context."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "and if you look at `BuiltinsInfo` you will see it has functions to compute the arity of a builtin"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes - it's information that has to come from outside the compiler"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "in particular, UPLC inliner lacks `_iiBuiltinsInfo`"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "image.png"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "image.png"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "PIR is on the left"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yup"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I have found `calcBuiltinArity` function in the UPLC CSE module. It calculates builtin arities in a different way -> simply counts how many arguments are applied."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "The question is: should I also re-implement it using builtin semantics variant (I'll have to add it as an argument anyway) ?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes, the CSE version is known to be wrong but Ziyang didn't want to do all the piping to match teh PIR stuff"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "* yes, the CSE version is known to be wrong but Ziyang didn't want to do all the piping to match the PIR stuff"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "^ this would be the alternative (more reliable?) way of getting fun arity"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so fixing the CSE one would also be good"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "image.png"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yup"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "image.png"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Looks like with this set of additional constraints `( ToBuiltinMeaning uni fun , ExMemoryUsage (Term name uni fun ()) , Typeable name )` I am able to extract builtin arity from a BuiltinMeaning."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I'd need to get access to the `BuiltingMeaning` though, this requires a whole lot of additional constraints, like `HasBuiltinMeaning` etc."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* I'd need to get access to the `BuiltingMeaning` though, this requires a whole lot of additional constraints, like `ToBuiltinMeaning uni fun` etc."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Corrrection: `( ToBuiltinMeaning uni fun, HasMeaningIn uni (Term name uni fun ()))` is enough"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "So my plan is to do the same in UPLC"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I see that PIR extracts arity from the `BuiltinMeaning`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "you need the semantics variant too"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "which you have to pass in"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "image.png"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "especially for the inliner, which is complex, we should try and keep it as close as possible to the PIR one"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "do you mean `termEvaluationOrder` maybe? In UPLC it doesn't have this info. In PIR it does."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that has a solution to this problem"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "check what we do in PIR"
      }
    ]
  },
  {
    "date": "2024-03-21",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "I will add a commit on top of what's already there to show what I mean, because it requires a slight change to the type of the TMVar that I use for this communication channel"
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "In my og-genesis branch, there is essentially a communications channel between the churn and peer selection governor, so we might not need these delays in the churn governor."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Maybe, you're right; it would be good to double check. Demotions must be effective for big ledger peers."
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "The churn sets a flag, and can wait for peer selection to to its thing, and inform the churn that it can now continue"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Thanks for point this out; I was planning to look at your PR later today."
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "It's the todo thing I discussed with Neil at the hot topic meeting"
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "Just throwing it out here, I thought it was relevant on what I was reading here"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "_ 🤔 how one writes red messages_"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "* _🤔 how one writes red messages_"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "``` diff --git a/ouroboros-network/src/Ouroboros/Network/PeerSelection/Churn.hs b/ouroboros-network/src/Ouroboros/Network/PeerSelection/Churn.hs index 2b882bd42..b535d14c4 100644 --- a/ouroboros-network/src/Ouroboros/Network/PeerSelection/Churn.hs +++ b/ouroboros-network/src/Ouroboros/Network/PeerSelection/Churn.hs @@ -15,7 +15,6 @@ import Control.Tracer (Tracer (..), traceWith) import System.Random import Ouroboros.Network.BlockFetch (FetchMode (..)) -import Ouroboros.Network.Diffusion.Policies (closeConnectionTimeout) import Ouroboros.Network.PeerSelection.Bootstrap (UseBootstrapPeers (..)) import Ouroboros.Network.PeerSelection.Governor.Types hiding (targets) import Ouroboros.Network.PeerSelection.PeerMetric @@ -46,11 +45,12 @@ peerChurnGovernor :: forall m peeraddr. -> STM m FetchMode -> PeerSelectionTargets -> StrictTVar m PeerSelectionTargets + -> StrictTVar m PeerSelectionCounters -> STM m UseBootstrapPeers -> m Void peerChurnGovernor tracer deadlineChurnInterval bulkChurnInterval psOverallTimeout _metrics churnModeVar inRng getFetchMode base peerSelectionVar - getUseBootstrapPeers = do + countersVar getUseBootstrapPeers = do -- Wait a while so that not only the closest peers have had the time -- to become warm. startTs0 <- getMonotonicTime @@ -167,39 +167,83 @@ peerChurnGovernor tracer deadlineChurnInterval bulkChurnInterval psOverallTimeou <*> getUseBootstrapPeers) traceWith tracer $ TraceChurnMode churnMode - atomically $ do - -- Purge the worst active peer(s). + -- Purge the worst active peer(s). + targets1 <- atomically $ do decreaseActivePeers churnMode + -- Return current targets + readTVar peerSelectionVar - -- Short delay, we may have no active peers right now - threadDelay 1 + -- Only increase the targets after the governor notices the previous + -- change + targets2 <- atomically $ do + counters <- readTVar countersVar + + let targetActive = + targetNumberOfActivePeers targets1 + + targetNumberOfActiveBigLedgerPeers targets1 + + -- Wait for the counters to reach the new targets + check (hotPeers counters <= targetActive) - atomically $ do -- Pick new active peer(s). increaseActivePeers churnMode -- Purge the worst active big ledger peer(s). decreaseActiveBigLedgerPeers churnMode - -- Short delay, we may have no active big ledger peers right now - threadDelay 1 + -- Return current targets + readTVar peerSelectionVar - -- Pick new active peer(s). - atomically $ increaseActiveBigLedgerPeers churnMode + -- Only increase the targets after the governor notices the previous + -- change + targets3 <- atomically $ do + counters <- readTVar countersVar - -- Give the promotion process time to start - threadDelay 1 + let targetActive = + targetNumberOfActiveBigLedgerPeers targets2 - -- Forget the worst performing established peers. - atomically $ do + -- Wait for the counters to reach the new targets + check (hotBigLedgerPeers counters <= targetActive) + + -- Pick new active peer(s). + increaseActiveBigLedgerPeers churnMode + + -- Return current targets + readTVar peerSelectionVar + + -- Only decrease the targets after the governor notices the previous + -- change + targets4 <- atomically $ do + counters <- readTVar countersVar + + let targetActive = + targetNumberOfActiveBigLedgerPeers targets3 + + -- Wait for the counters to reach the new targets + check (hotBigLedgerPeers counters >= targetActive) + + -- Forget the worst performing established peers. decreaseEstablished churnMode ubp decreaseEstablishedBigLedgerPeers - -- Give the governor time to properly demote them. - threadDelay $ 1 + closeConnectionTimeout + -- Return current targets + readTVar peerSelectionVar + + -- Only forget about the worst performing known peers after the governor + -- has noticed the previous change + targets5 <- atomically $ do + counters <- readTVar countersVar + + let targetEstablished = + targetNumberOfEstablishedPeers targets4 - targetEstablishedBigLedger + targetEstablishedBigLedger = + targetNumberOfEstablishedBigLedgerPeers targets4 + + -- Wait for the counters to reach the new targets + check ( warmPeers counters <= targetEstablished + && warmBigLedgerPeers counters <= targetEstablishedBigLedger + ) - -- Forget the worst performing known peers - atomically $ modifyTVar peerSelectionVar (\\targets -> targets { targetNumberOfRootPeers = decrease (targetNumberOfRootPeers base - targetNumberOfEstablishedPeers base) @@ -213,21 +257,65 @@ peerChurnGovernor tracer deadlineChurnInterval bulkChurnInterval psOverallTimeou + targetNumberOfEstablishedBigLedgerPeers base }) - -- Forgetting cold peers should be quick - threadDelay 1 + readTVar peerSelectionVar + + -- Only pick new known peers after the governor has noticed the previous change + targets6 <- atomically $ do + counters <- readTVar countersVar + + let targetKnown = + targetNumberOfKnownPeers targets5 - targetNumberOfKnownBigLedgerPeers targets5 + targetKnownBigLedger = + targetNumberOfKnownBigLedgerPeers targets5 + + counterKnown = + coldPeers counters + + warmPeers counters + + hotPeers counters + + counterKnownBigLedger = + coldBigLedgerPeers counters + + warmBigLedgerPeers counters + + hotBigLedgerPeers counters + + -- Wait for the counters to reach the new targets + check ( counterKnown <= targetKnown + && counterKnownBigLedger <= targetKnownBigLedger + ) - -- Pick new known peers - atomically $ modifyTVar peerSelectionVar (\\targets -> targets { + modifyTVar peerSelectionVar (\\targets -> targets { targetNumberOfRootPeers = targetNumberOfRootPeers base , targetNumberOfKnownPeers = targetNumberOfKnownPeers base , targetNumberOfKnownBigLedgerPeers = targetNumberOfKnownBigLedgerPeers base }) - -- Give the governor time to find some new peers - threadDelay $ 1 + psOverallTimeout + readTVar peerSelectionVar - -- Pick new non-active peers + -- Only pick new non-active peers after the governor has noticed the + -- previous change atomically $ do + counters <- readTVar countersVar + + let targetKnown = + targetNumberOfKnownPeers targets6 - targetNumberOfKnownBigLedgerPeers targets6 + targetKnownBigLedger = + targetNumberOfKnownBigLedgerPeers targets6 + + counterKnown = + coldPeers counters + + warmPeers counters + + hotPeers counters + + counterKnownBigLedger = + coldBigLedgerPeers counters + + warmBigLedgerPeers counters + + hotBigLedgerPeers counters + + -- Wait for the counters to reach the new targets + check ( counterKnown >= targetKnown + && counterKnownBigLedger >= targetKnownBigLedger + ) + increaseEstablishedPeers churnMode ubp modifyTVar peerSelectionVar (\\targets -> targets { targetNumberOfEstablishedBigLedgerPeers = targetNumberOfEstablishedBigLedgerPeers base ``` How does this look?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "> <user_id_removed> the comment predates big ledger peers. > If a node was configured to only have one active peer it would be down to zero during the delay why do we need the delay in that case?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "We have to track the whole peer selection state, at that point it is better to just use a PeerSelectionState TVar instead"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "we need the delay in order for the governor to notice the changed target, demote the current active peer so we can pick another"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "You might use `FirstToFinish` to construct such an action."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "the issue is that the targets and the counters are different"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "perhaps it is easier if I push a temporary commit"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Yes, it's easier to review larger code chunks on GitHub."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "got it!"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "what about now: ? :)"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "It would also be nice to include a warning message when these timeouts fire. Or alternatively, include a warning in the protocol when it's termination takes longer than expected. I am not sure which one is right (I know which one is simpler, but it's not the same :grin:)"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "* It would also be nice to include a warning message when these timeouts fire. Or alternatively, include a warning in the protocol when it's termination takes longer than expected. I am not sure which one is right (I know which one is simpler, but it's not the same 😁)"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "I was thinking more of timeouts related to promotions. We may have a goal of 1000 known peers but we're not guaranteed to be able to gossip our way to day"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "* I was thinking more of timeouts related to promotions. We may have a goal of 1000 known peers but we're not guaranteed to be able to gossip our way to that"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "the-coot: Your timeouts are protocol errors which should already be handled"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "you need to have a timeout on all those checks"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "yeah timeouts are on the way :)"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "We need both."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": ""
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "quick question: The thread delays on the churn governor, eg: ``` atomically $ do -- Purge the worst active peer(s). decreaseActivePeers churnMode -- Short delay, we may have no active peers right now threadDelay 1 atomically $ do -- Pick new active peer(s). increaseActivePeers churnMode -- Purge the worst active big ledger peer(s). decreaseActiveBigLedgerPeers churnMode ``` why is that `threadDelay` there I find the comment confusing. Is it because we decrease the target and want to wait for it to take effect? Why does it talk about the possibility of not having active peers?"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "I think that churn should be updated to use the counters in the same PR. Then it will become clear if we have the right counters or not"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "> Why does it talk about the possibility of not having active peers? I am not entirely sure, but it could be to explain why the delay is short."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "We need to wait until the counters match with the new targets and put a timeout on it, which can be done in `stm` with `registerDelay`."
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "the comment predates big ledger peers. If a node was configured to only have one active peer it would be down to zero during the delay"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "> Is it because we decrease the target and want to wait for it to take effect? yes, that's right."
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "Yeah, I am unsure how to sync this thread delay here with the counters"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "the-coot: is this enough for the counters?"
      },
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "I was planning on doing that"
      }
    ]
  },
  {
    "date": "2024-03-22",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "HI Everyone, to Recap: We agreed on strategic pillars and proposed goals, homework it add thoughts to miro board here: =/ Bogdan and I will consolidate Monday , Tuesday and propose actions to this content, we will do detailed review in Wednesday WG for whoever can make the time and then have the OSC call this Thursday to ratify the content And if all goes well celebrate the long weekend and clsoing out the governing board mandate for the OSC"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "Great. I hope I can be of service."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Hey @here so suggestion to test items going to the board, my name change for OSPO will be subject to board approval and I wanted to make sure since most are in agreement if yall would be cool for me putting this as an OSC recommendation to the board? This will also formulate a pathway for future items that we might need the board to approve, drafting a doc now on this. Please let me know your thoughts, all the reasonings has been based on the talks I've had with most of you on the subject before."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "btw I can't make it today, sorry!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sounds fine to me"
      },
      {
        "userID": "57f0deee7aec3834d9847cbd52de6f0e73a387656df1e7a30cf75ab855ebadb0",
        "message": "> <user_id_removed> Hi Sebastian, > Not a problem, we can hold a vote to acknowledge the change, and if I have you can ping me Daniel's email, I will add him to necessary files. > Given the focus of today's call will be toward the strategy for the duration, i think conversation on this today may overshoot the limited time the OSC has to get the startegy content populated and formalized, > > Would you be ok if I was to host this conversation next week? > That will allow me to get someone from Intersect who can easily answers the questions and how this all relates from the governing documentation as well. Yeah no hurry on when the rotation happens. I just realize I don't have as much bandwidth as Daniel will have. He is also a core contributor to the Hydra project, so some Cardano relevance, but is even more involved with other open source communities around nix, haskell and gitlab (as far as I know). WDYT about the \"Relationship between committees, working groups and projects\" agenda item?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "> <user_id_removed> Christian Taylor: I would like to bring two topics to today's meeting > - Ask about rotating seats / yield my seat to Daniel Firth > - Relationship between committees, working groups and projects Hi Sebastian, Not a problem, we can hold a vote to acknowledge the change, and if I have you can ping me Daniel's email, I will add him to necessary files. Given the focus of today's call will be toward the strategy for the duration, i think conversation on this today may overshoot the limited time the OSC has to get the startegy content populated and formalized, Would you be ok if I was to host this conversation next week? That will allow me to get someone from Intersect who can easily answers the questions and how this all relates from the governing documentation as well."
      },
      {
        "userID": "cb7de63d3df45d0b606a1e0e8ed41075ae15bb139ecd072ba87f205dd8862585",
        "message": "> <user_id_removed> Hey @here so suggestion to test items going to the board, my name change for OSPO will be subject to board approval and I wanted to make sure since most are in agreement if yall would be cool for me putting this as an OSC recommendation to the board? This will also formulate a pathway for future items that we might need the board to approve, drafting a doc now on this. Please let me know your thoughts, all the reasonings has been based on the talks I've had with most of you on the subject before. > Looks good to me"
      },
      {
        "userID": "57f0deee7aec3834d9847cbd52de6f0e73a387656df1e7a30cf75ab855ebadb0",
        "message": "Christian Taylor: I would like to bring two topics to today's meeting - Ask about rotating seats / yield my seat to Daniel Firth - Relationship between committees, working groups and projects"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I wanted to add it next week agenda, as i'm also working out the TSC and OSC scope doc this week and want to bring an expert on intersect committee functions for the conversation"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "If we are to rotate you out, I personally wanted to thank you for all your contribution Sebastian, you have had really good points and insights and will be missed."
      },
      {
        "userID": "57f0deee7aec3834d9847cbd52de6f0e73a387656df1e7a30cf75ab855ebadb0",
        "message": "Daniel Firth: You have been nominated to be on the open source committee effective today to take my seat."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* no worries! I will keep you looped in on Modnay"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "now orries!"
      }
    ]
  },
  {
    "date": "2024-03-22",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "any comments? amesgen should I go ahead and provide the update closure from consensus? Any pointers on where I should add that?"
      },
      {
        "userID": "f9b4eac5a495226fe9858edec67509df31b6376011881e11ea5dbb26fdde968d",
        "message": "Maybe in `Ouroboros.Network.Diffusion.run`? We call that in `Ouroboros.Consensus.Node`, see `stdRunDataDiffusion`."
      }
    ]
  },
  {
    "date": "2024-03-24",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "I would like to push back very hard against the use of GitHub at all. I'm not sure anything else strikes me as more important to address."
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "What would be the alternative?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "as opposed to?"
      }
    ]
  },
  {
    "date": "2024-03-25",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "at the moment you need to trust - for the node source: either a) github and Intersect to not be trying to mess with you, or b) the keys used to sign the commit you get - CHaP downloads are signed, but you need to trust package releasers and github again"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Commercial (or other legal) contracts reduce the required level of trust - there are financial or other penalties for misbehaviour"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "There is a direct burden of trust on node contributors etc. We need to know that individual contributors can be trusted"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "But we already have processes there - no need to invent new ones (just adapt to the Intersect setting if we need to)"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "From a practical perspective, I'm worrying more about e.g. someone injecting an easter egg that goes unnoticed"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Github and Intersect are presumably sufficiently trustworthy (if not, the community will replace them)"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "(e.g. someone maliciously alters a library and this goes unnoticed)"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Yes. Protect the releases. Build from source"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "The only real issue would be third-party package releasers"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "OK, if I understand correctly then I think the point of interest in my concern is - When a protocol upgrade event is agreed, how do we establish what the source of truth is for the software supply chain that would provide the binary for the required compatibility there? Or, does it simply not matter?"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "(This is really background for the OSC - other committees will be handling software upgrades - Tech Steering Committee and Hard Fork Committee mainly)"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "**but for a HF to even be possible you already need all the SPOs to agree to install a new version of the node software (and the same one!).** Not true"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "(The OSC simply needs to set development policies that will assist with the agreed upgrades)"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Sufficient SPOs must upgrade to a version of the node that executes the new protocol version"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "In practice, we like ≥ 80% of SPOs to have upgraded, since otherwise significant stake will be left behind"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "so with all the above, its safe to conclude that moving anytime soon would be detrimental in many ways"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "And both SPO and DRep votes must exceed some threshold"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "But that is not an absolute requirement"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "> <user_id_removed> is GitLab instances cheaper to run then github, thats a pro from expense Pov Most of what we do is free on github, isn't it (because we're open source)? We're hosting our own runners, but we'd need to do that anyway on some other system (this is part of our CI)"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "> <user_id_removed> Most of what we do is free on github, isn't it (because we're open source)? We're hosting our own runners, but we'd need to do that anyway on some other system (this is part of our CI) there is a monthly usage bill for seats and teams"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "The only time an outage would be a major issue would be e.g. if we were preparing a critical release, but we can generally keep working in the background, use local/distributed copies etc - we usually have multiple redundant copies to let us do that"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "If a node doesn't follow the agreed protocol, its blocks will be rejected by the consensus algorithm, or it will be excluded from the stake that is participating in validation"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Nodes need to follow the same protocol. The maximum protocol version is advertised by the node"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "The hard fork combinator then enables the transition. Non-upgraded nodes fail at that point"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "I've used gitlab in the past, and it didn't work that well"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "There would be a very high productivity cost to moving"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "GitHub outages are rare in practice, and quickly resolved"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "Right, it is an improvement that respect in that it's self-hosted and we can choose who owns the access rights to the gitlab data, but it is still a \"third party\" from the perspective of the chain, it's off-chain data."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* I only mention gitlab as other mbo's have used that to remove the problem Daniel is describing and to not have their data \"owned\" by a third party"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "And reliance on whoever GitHub is hosted by. It does tend to go down when aws goes down."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "* so.... what's different from github that matters?"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "Well it cuts out Microsoft, it that matters."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so.... what's different from github that matters/"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "is that a major problem for us?#"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "* is that a major problem for us?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Daniel Firth: I still don't see how the choice of hosting platform is relevant. It is _absolutely_ important that the Intersect cardano repos are recognized as the canonical source for building the binaries that run on the cardano network, otherwise the whole thing is pointless. But I don't see how you avoid that ever"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "> <user_id_removed> the impact level would be the same as the orginal core node migration right? you are referring to the migration from iohk to intersect?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "well i think the discussion is something for the OSC to recommend, TSC to review, then go to baord for decision"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "with all the scope creep though probably be something after the hardfork I imagine possibly 🤔"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* is GitLab instances cheaper to run then github, thats a pro from expense Pov"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "One 8 core VM on community edition GitLab can support thousands of accounts."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "the impact level would be the same as the orginal core node migration right?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "i'll add it to the agenda, post strategy ratification for the OSC"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "sound good."
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "For example, how do any potential governing actors claim what are the official releases of say, the node, are without a trusted third party hosting that information on a website?"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "Well notionally anything that isn't centralized SaaS, but even that doesn't drive the nail in far enough - if we are serious about decentralised governance."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "why does being serious about decentralized governance say something about what tools we use to host our development work?"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "Because it's custodial SaaS"
      },
      {
        "userID": "cb7de63d3df45d0b606a1e0e8ed41075ae15bb139ecd072ba87f205dd8862585",
        "message": "My opinion: - The fact that most Intersect repos are Git-based and open source, I do not feel loosing control by using Github. In my experience, managing alternative infrastructure eg. Gitlab is not cheap, considering things like reliability, operational security, account and access management etc. CI/CD workflow on GitHub is pretty good and reliable as well. - While I recognize the theoretical risk of GitHub or Microsoft discontinuing Intersect account, the likelihood seems negligible. The advantages of staying far outweigh the minimal risks involved. So, I agree with Michael and Kevin."
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "Maybe this would clarify the point: I would delete my GitLabs if I could get away with it. The only reason I have them is I need to host a database somewhere and I need the access control that comes with the software. Were it the case that I could rely on an access control system encoded in plutus, I would do that instead, which would as well incidentally improve the supply chain provenance. So these problems are either related or not depending on how you look at it."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sure, but I think Daniel is worried about how to be sure that you're getting the (honestly developed) software that you expect when you build it from source. which is non-trivial"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "> <user_id_removed> To the extent that I would be renegotiating the Continuity contract... agreed, will keep it the same, not sense in messing up current ops"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "I feel like I already pointed out that this was a small improvement and not really what the point was."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "what _is_ the point then? it sounded like you thought this was very important"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "To the extent that I would be renegotiating the Continuity contract..."
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "This would be a major change"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "We already have trusted release processes that provide node instances for general use, but again we would recommend suppliers building from source (wallet providers, DApp developers, exchanges, etc)"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "The burden of proof is greater for binaries. The github sources provide the source of truth for the node"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "I think my question is the same whether source or binary, but yes."
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Yes, responsibility is delegated to the repository maintainers"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Collective agreement then needs to be reached when a release is cut"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I do think supply-chain security is a reasonable thing to think about"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "We don't recommend binary upgrades for SPOs"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "It's not an issue for the OSC"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "OK"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "(If you look carefully, you'll see there are some running nodes that don't respect the current protocol version - they are effectively defunct, since they cannot follow the current chain, and their stake is not contributing to the chain maintenance - users will be encouraged to switch pool, since they will otherwise lose rewards)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but, to be clear, you could run a different piece of node software that simply advertised itself as supporting the new protocol version, right? It just might not work"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "So there is no centralised control over when SPOs upgrade, just an agreement on when a protocol upgrade happens (which will be enforced by voting under CIP-1694)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "right, so if the majority is on a new protocol, then there is an incentive for people to follow suit. But if you're trying to get the majority to move... that's a social activity"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "So we already have several node versions running simultaneously. We're just very careful to make sure that they all agree on the protocol"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "The \"social\" coordination is handled by the Hard Fork Committee"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Yes, that's what I meant by it must follow the same protocol"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "The above from pooltool shows current node versions ()"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "image.png"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "just to add some rumination on the centralization aspect: there are various aspects of running Cardano that are somewhat necessarily centralized because they rely on everyone agreeing to do something. Most notably, that means updating the software and going for HFs. The community gets a veto on HFs with 1694, but for a HF to even be possible you already need all the SPOs to agree to install a new version of the node software (and the same one!). Arguably, a major function of intersect is to take the decentralized governance input from the community and mediate that into the more centralized bits of work that have to happen. That's why I keep banging on about Legitimacy: making sure everything is accountable to the TSC keeps us tethered to the decentralized governance because the TSC is accountable to that (how that works is not our problem, fortunately!)"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "> <user_id_removed> I'm not averse to gitlab I just think that the github stuff is one of the parts of our system that is actualyl working super well, and we shouldn't mess with it thats why i think it'll heavily be discussion for the TSC as well given the relative impacts to suppliers and ongoing delivery for such a scope change, OSC would need to lay out benficial reasosn in a recommendation to such an move"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "\"does the decentralized governance of the community approve of merging this PR?\" mu: we have set up a process that allows us to make these decisions while remaining broadly accountable, so we don't need to worry about it day-to-day"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "obviously if you do that it might not work properly and then if everyone else is using the proper software your node won't connect or whatever. So there's an incentive to not needlessly deviate from what \"everyone else\" is doing"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm not averse to gitlab I just think that the github stuff is one of the parts of our system that is actualyl working super well, and we shouldn't mess with it"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but e.g. when they want to do a HF I think they pretty much ring all the SPOs up and go \"hey, are you on the latest software? please update!\""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "afaik it's entirely social. There is nothing that stops SPOs from building their own binaries, or hacking them up"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "How is the same-version-of the-node software enforced actually?"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Yes, we really don't want to move from github"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "> <user_id_removed> being on gitlab makes no difference to the process of deciding \"where do I build my binaries from?\" I agree with this, that's why I said it doesn't solve the problem."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "> <user_id_removed> moving to gitlab would be enormously disruptive - everyone was already on github thats what my major concern is, it would have to a major consesnus to make a change currently"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "given the costs it would have to be enormously beneficial given all the other things we could be spending our limited energy on"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> <@locallycompact-github:matrix.org> I agree with this, that's why I said it doesn't solve the problem. so... why do you want it?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I only mention gitlab as other mbo's have used that to remove the problem Daniel is describing and to not have their data owned by a third party"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "being on gitlab makes no difference to the process of deciding \"where do I build my binaries from?\""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "moving to gitlab would be enormously disruptive - everyone was already on github"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "> <@locallycompact-github:matrix.org> you are referring to the migration from iohk to intersect? yes"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "this is why legitimancy is one of the key things we need to ensure"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "the scope altogether to another platform though would take some planning and be something that changes current release mgt, ie just a lot of overhead to manage, I'm indifferent as to what tools are utilized, but there just has to be a central decision made and then the governing board to adopt such a change"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "So I think GitLab has a number of advantages there in that it's self-hosted, etc. Much more flexible than GitHub - I would support a change in that direction, but still fundamentally then the \"canonical\" code and release information are still hosted \"on the web, by someone\"."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I see, I heard gitlab is what other foundations use and migration form github to gitlab is fairly straightforward although reversing back is not"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "yes, for one reason that gitlab supports arbitrary levels of namespcing urls and github only one: github.com/organisation/project"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "I can say that GitLab is very easy to maintain though, I maintain two instances."
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "Maybe I'm wrong but this just strikes me as incredibly important. 🤷‍♂️"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "would you suggest a tool like gitlab as the appropriate solve?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "is gotlabt instances chaeper to run then github, thats a pro from expense Pov"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "It doesn't solve the problem in that sense, but it is an improvement."
      }
    ]
  },
  {
    "date": "2024-03-25",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I have a weird problem with the read-the-docs site: ``` nix build --no-link .\\#read-the-docs-site warning: Git tree '/home/yura/projects/cardano/plutus' is dirty warning: Ignoring setting 'impure-env' because experimental feature 'configurable-impure-env' is not enabled error: builder for '/nix/store/xy1mf33j812akjcs58i2gzh7cpqwsa39-read-the-docs-site.drv' failed with exit code 2; last 10 log lines: > > Warning, treated as error: > /build/source/howtos/exporting-a-blueprint.rst:254:Include file '/build/source/howtos/blueprint.json' not found or reading it failed For full logs, run 'nix log /nix/store/xy1mf33j812akjcs58i2gzh7cpqwsa39-read-the-docs-site.drv'. ``` but if I build it with `build-rtd-site` command then no such error occurs. The file `blueprint.json` that nix build fails to find in included like this: ``` .. literalinclude:: blueprint.json ``` and it is found in the same folder as the .rst file that includes it (\"howtos\") Michael Peyton Jones any ideas why it fails under nix?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well, it's probably being filtered out by the nix derivation"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "annoyingly the code is now in iogx"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "this line needs to change to add \".json\":"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": ""
      }
    ]
  },
  {
    "date": "2024-03-25",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "1291877d7b732335726527106cf3d40ac76c7dc58887039c5f383b042f6c584b",
        "message": "Reviews please:"
      }
    ]
  },
  {
    "date": "2024-03-26",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "I'd expect some contributors to be motivated to do work that is not prioritised, simply because they are interested in a new feature, for example - that will then need to be incorporated somehow - and perhaps balanced against other work. This is common in open source projects"
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "It is an improvement over proprietary software, where no one except a few privileged individuals know the source code. There is also an incentive not to disclose vulnerabilities right away in the hopes it can be patched before other people notice"
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "> <user_id_removed> We do build the node with nix already :) but I don't think most of the SPOs use that route I personally find guix nicer to use compared to nix, partly because it is scheme based Why is it that most opt to download the binary as opposed to building with nix?"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "> <user_id_removed> We do build the node with nix already :) but I don't think most of the SPOs use that route Most SPOs honestly rely on the \"CNTools\" package which I believe just fetches the binaries at this point"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "Also, most of our SPOs don't know how to properly set up and run the build environment... we've learned that from the struggles w/ lib-sodium since the early days"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "but for a HF to even be possible you already need all the SPOs **that matter** to agree to install a new version of the node software. :)"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Work prioritisation will be a matter of constructive dialogue between users and implementors to identify what is wanted and what is feasible"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "Cause the build process can take forever and it takes like a minute or less to fetch a binary and get running"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "> <user_id_removed> This is fine but it misses out a huge amount; governance actions can let us move to a new protocol version, but in order to get to that point a huge amount has to have happened, and we're thinking about development work here. > > So the governance process I'm thinking about here is more like: > - Intersect looks at CIPs (or sponsors the writing of CIPs) > - This leads to contractual proposals to implement some things > - This leads to them getting implemented > - This leads to them getting released and deployed (providing the governance action gets approved) > > What ensures this process follows the will of the community? Something like: the membership of intersect is a proxy for the community, the TSC is accountable to the membership, and everything else is accountable to the TSC Yes, the governance actions simply give us high level consensus on specific on-chain actions"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> So the vision for Cardano is that community will be expressed through governance actions. This is fine but it misses out a huge amount; governance actions can let us move to a new protocol version, but in order to get to that point a huge amount has to have happened, and we're thinking about development work here. So the governance process I'm thinking about here is more like: - Intersect looks at CIPs (or sponsors the writing of CIPs) - This leads to contractual proposals to implement some things - This leads to them getting implemented - This leads to them getting released and deployed (providing the governance action gets approved) What ensures this process follows the will of the community? Something like: the membership of intersect is a proxy for the community, the TSC is accountable to the membership, and everything else is accountable to the TSC"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "Right. A question was raised in the governance tooling working group about insuring reliability of these tools, with expressed need to keep connection to the OSC. So I'll keep asking questions to understand your vision better, hopefully to relay and advice to the GovTool WG. Software that we publish is the result of the community will. It is implied that there needs to be a way to have the community`s will expressed in a measurable way, and that there needs to be a way to enforce it. One of the roles of govtools is to facilitate expression of the community's will. So the vision for Cardano is that community will be expressed through governance actions. Is my understanding correct? Thank you!"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "* Right. A question was raised in the governance tooling working group about insuring reliability of these tools, with expressed need to keep connection to the OSC. So I'll keep asking questions to understand your vision better, hopefully to relay and advice to the GovTool WG. Software that we publish is the result of the community will. It is implied that there needs to be a way to have the community`s will expressed in a measurable way, and that there needs to be a way to enforce it. One of the roles of govtools is to facilitate expression of the community's will. So the vision for Cardano is that community will be expressed through governance actions. Is my understanding correct? Thank you!"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "> <@locallycompact-github:matrix.org> sent an image. This is a matter of trusting the build system. That includes evaluating compilers, build mechanisms, libraries, operating systems, scripts, etc. Generally, we take widely used tools on trust (ghc, cabal, nix, Linux, Windows etc) - they may not be perfect, but they generally are not malicious (and it would be rare to target a specific application). As long as we are clear about the tool chain, and sufficiently diligent in terms of applying security updates, not using newly released systems etc, we should satisfy reasonable security concerns."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Gotcha. I think it's a little unclear whether supply chain security is in our remit but I think arguably it is (not sure who else is going to be thinking about it!). I'd definitely be in favour of us forming a WG to think about it"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Ultimately, the community as a whole can express approval or not via participation in the on-chain actions, but it has the opportunity to participate at earlier stages via direct engagement with Intersect"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "The TSC will be the route for focusing community priorities, engaging in dialogue, setting up contracts etc"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "Open source by itself doesn’t really improve security (it may be easier to identify or inject attacks)"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "> <user_id_removed> just to add some rumination on the centralization aspect: there are various aspects of running Cardano that are somewhat necessarily centralized because they rely on everyone agreeing to do something. Most notably, that means updating the software and going for HFs. The community gets a veto on HFs with 1694, but for a HF to even be possible you already need all the SPOs to agree to install a new version of the node software (and the same one!). > > Arguably, a major function of intersect is to take the decentralized governance input from the community and mediate that into the more centralized bits of work that have to happen. That's why I keep banging on about Legitimacy: making sure everything is accountable to the TSC keeps us tethered to the decentralized governance because the TSC is accountable to that (how that works is not our problem, fortunately!) Do I understand it right that by Legitimacy you mean the need to assure quality of software accessible via Intersect GitHub org page? thank you."
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "hello! i use a tool called guix and it may be useful for building cardano node from source. It builds packages in a reproducible way, and is free and open source software. It is based on Nix, and has found usage in building bitcoin node from source here is a video describing how it's used in bitcoin:"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "* As you said it's non-trivial - and my inclination here would be to simply discharge web2 from the software development process entirely, actually. Because, why not?"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "* Do I understand it right that by Legitimacy you mean the need to have mechanisms for assuring quality of software accessible via Intersect GitHub org page? thank you."
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "As you said it's non-trivial - and my intuition here would be to simply discharge web2 from the software development process entirely, actually. Because, why not?"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "Michael Peyton Jones: You extracted what I was actually concerned about in the other thread."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Not quality, but rather that the software that we publish is the result of following the community's will"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "This what I'm concerned about, the rest is just my being imprecise."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "We do build the node with nix already :) but I don't think most of the SPOs use that route"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "1000000776.jpg"
      }
    ]
  },
  {
    "date": "2024-03-26",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> I'm not sure how or whether doctest stuff works at all, since it relies on running ghc during tests * > I'm not sure how or whether doctest stuff works at all, since it relies on running ghc during tests it probably no longer does. We could just drop it if we don't want to worry about adopting the new thingy for doing that stuff, whatever name it had"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> I'm not sure how or whether doctest stuff works at all, since it relies on running ghc during tests it probably no longer does. We could just drop if we don't want to worry about adopting the new thingy for doing that stuff, whatever name it had"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "you have to worry about `semvar`s indeed, even though they can't really affect the arity. We've never worked on making `semvar`s a bit less omnipotent"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "I want to try `Array#`, I don't think we need full-scale `Vector`. Feel free to do it yourself though"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "`builtinArity` seems fine, although I'd perhaps just use `TypeScheme` directly"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "but maybe that'd be more painful for no addition gain"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* Lets consider the following term: `t = Apply (Apply (builtin_with_arity_3) a) b` the output of evaluation order is going to be: `[a (MaybeWork), b (MaybeWork), t (WorkFree)]` and lets assume `a` and `b` are _not_ work-free, should't the `isWorkFree t == True` (currently its `False` unless all eval terms are `WorkFree`)?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so the thing that would be wrong in that situation would be the evaluation order computation, not the `isWorkFree` function. since the evaluation order would claim that the arguments are evaluated (when they aren't)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "no. arguments to builtins still get evaluated when they are applied"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I thought that nothing is evaluated until saturation"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it's just the application that does no work"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "same as any other function"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "(addInteger (error)) is error"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "*before they are applied"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "ah ok"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Do I understand correctly that this function will have to be changed once we implement \"partially applied builtin terms are work-free\" ?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "``` Test suite prettyprinter-configurable-doctest: RUNNING... prettyprinter-configurable-doctest: <command line>: cannot satisfy -package-id microlens-0.4.13.1-EhmZ1KqBdww7HhR48VOsAL (use -v for more information) Test suite prettyprinter-configurable-doctest: FAIL Test suite logged to: /home/yura/projects/cardano/plutus/dist-newstyle/build/x86_64-linux/ghc-8.10.7/prettyprinter-configurable-1.23.0.0/test/prettyprinter-configurable-1.23.0.0-prettyprinter-configurable-doctest.log 0 of 1 test suites (0 of 1 test cases) passed. Error: cabal: Tests failed for prettyprinter-configurable-1.23.0.0. ```"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> <user_id_removed> I thought that nothing is evaluated until saturation the _builtin function_ is not evaluated until saturation, arguments are evaluated like normal"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "With GHC 9.x we skip this test: ``` 105 │ -- one test fails on 9.2, don't know why 106 │ if impl(ghc >=9.0) 107 │ buildable: False ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Currently this command fails on master (on my machine): ``` nix develop .#ghc810 -c cabal test prettyprinter-configurable-doctest ```"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "yes, completely accidental. Also you were a fan of that, because of uniformity: `mkCons` is a builtin, `mkNil` is one too"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm not sure how or whether doctest stuff works at all, since it relies on running ghc during tests"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "in fact it's not wrong though"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "hm"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "ugh doctest"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "My logic is this: If we have a partially applied builtin where at least one of its partial args in not work-free, then the whole term is still work-free, but this recursive function is too conservative and says that the whole partial application is work-full (because of an argument)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* Lets consider the following term: `t = Apply (Apply (builtin_with_arity_3) a) b` the output of evaluation order is going to be: `[a (MaybeWork), b (MaybeWork), t (WorkFree)]` and lets assume `a` and `b` are _not_ work-free, should't the `isWorkFree t == True` ?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* Lets consider the following term: `t = Apply (Apply (builtin_with_arity_3) a) b` the output of evaluation order is going to be: `[a, b, t]` and lets assume `a` and `b` are _not_ work-free, should't the `isWorkFree t == True` ?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* Lets consider the following term: `t = Apply (Apply (builtin_with_arity_3) a) b` the output of evaluation order is going to be: `[t, a, b]` and lets assume `a` and `b` are _not_ work-free, should't the `isWorkFree t == True` ?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Lets consider the following term: `t = Apply (Apply (builtin_with_arity_3) a) b` the output of evaluation order is going to be: `[b, a, t]` and lets assume `a` and `b` are *not* work-free, should't the `isWorkFree t == True` ?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it looks at the output of the evaluation order"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that function is fine"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I don't understand"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "_that's_ what will change"
      }
    ]
  },
  {
    "date": "2024-03-27",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "* **G1 - By \\[quarter/year\\], we’ll empower the health of Cardano projects by creating and implementing a Lifecycle Management Framework. That way we’ll have a clear view about the future of our initiatives, and monitor key aspects such as diversity, sustainability and funding.** **Metrics:** - x% of the projects will audited - y% of projects will have a diversified funding model **Actions:** **1. Conduct project audits** Develop and execute an audit plan for all Cardano (or not all, if not, to be specified) projects to assess their current stage, health, and needs. This includes (proposals) - reviewing project documentation - development progress - community engagement / maintainers / contributors - funding models - risks **2. Develop the Lifecycle Management Framework** This framework will include guidelines for project stages, key milestones, success metrics, risk indicators, intervention strategies, and post-mortem actions. Also a plan for continuously monitoring projects. **3. Adopt key open source policies for project guidance and sustainability** OSC will define and adopt a set of at least 5 essential open-source policies focused on guiding project development and sustainability."
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "* **G1 - By \\[quarter/year\\], we’ll empower the health of Cardano projects by creating and implementing a Lifecycle Management Framework. That way we’ll have a clear view about the future of our initiatives, and monitor key aspects such as diversity, sustainability and funding.** **Metrics:** - x% of the projects will audited - y% of projects will have a diversified funding model **Actions:** **1. Conduct project audits** Develop / execute an audit plan for all Cardano (or not all, if not, to be specified) projects to assess their current stage, health, and needs. This includes (proposals) - reviewing project documentation - development progress - community engagement / maintainers / contributors - funding models - risks **2. Develop the Lifecycle Management Framework** This framework will include guidelines for project stages, key milestones, success metrics, risk indicators, intervention strategies, and post-mortem actions. Also a plan for continuously monitoring projects. **3. Adopt key open source policies for project guidance & sustainability** OSC will define and adopt a set of at least 5 essential open-source policies focused on guiding project development and sustainability."
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "**G3 - By the end of 2024 (??) 80% of core Cardano projects will be supported by paid maintainers from at least two companies. We’ll prioritize contracted maintainers from other organizations to ensure project diversity and sustained contribution. We’ll utilize and promote existing tooling and internal resources to support their involvement.** **Actions:** **1. Engage past collaborators (+ identify maintainers)** Conduct a survey among core Cardano project teams to identify companies and professionals they've successfully collaborated with in the past. Compile a list of potential maintainers with proven track of records. **2. Engage TSC** Present a formal request to the TSC, emphasizing the strategic importance of diversifying project maintainers **3. Facilitate maintenance engagements** Initiate a matchmaking process between core Cardano projects and potential maintainers identified in action #1"
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "**G4 - By [quarter/year], establish a security framework for all OS Cardano projects that will include [...]. By [quarter/year] we’ll be ensuring at least x% of projects adhere to standardized security policies, with dedicated security officers appointed to core projects.** **Metrics:** % of Cardano projects implementing the standardized security policy. **Actions** **1. Develop and standardize security policies** Collaborate with security experts within / outside the Cardano ecosystem to create comprehensive security policies that cover aspects of open-source project development and maintenance **2. Security officers for core projects** Identify and appoint professionals as security officers for each core project, responsible for overseeing and enforcing security practice. **3. Implement a security issue reporting** Establish a process for the community to report security vulnerabilities, and outline steps for response / resolution by teams and security officers."
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "* **G4 - By \\[quarter/year\\], establish a security framework for all OS Cardano projects that will include \\[...\\]. By \\[quarter/year\\] we’ll be ensuring at least x% of projects adhere to standardized security policies, with dedicated security officers appointed to core projects.** **Metrics:** % of Cardano projects implementing the standardized security policy. **Actions** **1. Develop / standardize security policies** Collaborate with security experts within / outside the Cardano ecosystem to create comprehensive security policies that cover aspects of open-source project development and maintenance **2. Security officers for core projects** Identify and appoint professionals as security officers for each core project, responsible for overseeing and enforcing security practice. **3. Implement security issue reporting** Establish a process for the community to report security vulnerabilities, and outline steps for response / resolution by teams and security officers."
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "**G2 - By [quarter/year], aim for X% of governance decisions across both core and non-core Cardano projects to be made through transparent processes, documented in an open forum. For core projects, governance decisions will align closely with TSC’s recommendations and technical expertise.** **Actions:** 1. Stabilize the communication guidelines and tooling 2. Promote and disseminate the governance policy 3. Monitor and evaluate governance processes"
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "I'm not sure at all about how this one is formulated, and if it captures what Michael Peyton Jones was highlighting today... So, Michael, what do you say?"
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "Ah dang, that's a bummer Yeah, people do opt for the path of least resistance I imagine there will be some hardcore SPOs that compile everything from source, and its bootstrappable and reproducible Is there a way where the binaries they compile can safely be dsitrubted to other SPOs, in a decentralized way? Or maybe even distributed computing, for people that want to compile from source, but don't have strong enough hardware to pull it off"
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "_** G1 - By [quarter/year], we’ll empower the health of Cardano projects by creating and implementing a Lifecycle Management Framework. That way we’ll have a clear view about the future of our initiatives, and monitor key aspects such as diversity, sustainability and funding.**_ **Metrics:** - x% of the projects will audited - y% of projects will have a diversified funding model **Actions:** **1. Conduct project audits** Develop and execute an audit plan for all Cardano (or not all, if not, to be specified) projects to assess their current stage, health, and needs. This includes (proposals) - reviewing project documentation - development progress - community engagement / maintainers / contributors - funding models - risks **2. Develop the Lifecycle Management Framework** This framework will include guidelines for project stages, key milestones, success metrics, risk indicators, intervention strategies, and post-mortem actions. Also a plan for continuously monitoring projects. **Adopt key open source policies for project guidance and sustainability** OSC will define and adopt a set of at least 5 essential open-source policies focused on guiding project development and sustainability."
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "> <user_id_removed> Hello everyone!! > > First of all I want to send you a big thanks for the good feedback received today on the goals 🥰 > > For the Friday's meeting, when some decisions should be made, I'll put here the last version for each goal, in a separate message. > I tried to distil some actions, or action candidates to be more precise, according to my current level of knowledge and understanding... If something doesn't make sense, or should be reformulated, please come up with you proposal, or how would you see the goal/metric/action being reformulated. > > Thanks again, and I'll keep my fingers crossed :) Small caveat but Thursday's meeting :)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> I think the point would be that the messaging would be off, that being an open source, decentralized project whos infrastructure is primarily hosted on a proprietary, centralized service I personally don't see any contradiction here. Even if we believe in decentralization generally, that doesn't mean it's a good use of our energy to push for decentralization in all places. Our project is about decentralizing financial systems; not necessarily software development systems. A bit like the tendency for charities to gradually become \"generic charities\" - we should focus on our mission, and not spend energy on stuff that isn't significantly contributing to that."
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "Hello everyone!! First of all I want to send you a big thanks for the good feedback received today on the goals 🥰 For the Friday's meeting, when some decisions should be made, I'll put here the last version for each goal, in a separate message. I tried to distil some actions, or action candidates to be more precise, according to my current level of knowledge and understanding... If something doesn't make sense, or should be reformulated, please come up with you proposal, or how would you see the goal/metric/action being reformulated. Thanks again, and I'll keep my fingers crossed :)"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "> <user_id_removed> It is worthwhile then, I think, that even if we do choose github, we let others know the risks of centralized and proprietary services, and set the long term goal to move towards a truely free and open, decentralized alternative. That way it brings attention to the fact an alternative doesn't exist and hopefully encourages new devs to try and solve the problem Great idea."
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "You might have more options if you use on chain gadgets, like you can delegate trust to a token that advances the latest HEAD of the code, or recursively delegate trust, so it doesn't matter so much who signed the code and uploaded it, as long as your personal trust web says it's OK then it is"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "That would have been my assumption too, but this seems to be debatable in the security community. Vulnerabilities can be discovered or leaked before the open source is patched, and hacked versions can be more easily constructed by malicious actors"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sure, if you have some clever trick for getting trust in a signing key using the chain, fine"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "still gotta trust the sha, need signatures, trusted parties, etc."
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "It is worthwhile then, I think, that even if we do choose github, we let others know the risks of centralized and proprietary services, and set the long term goal to move towards a truely free and open, decentralized alternative. That way it brings attention to the fact an alternative doesn't exist and hopefully encourages new devs to try and solve the problem"
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "I think the point would be that the messaging would be off, that being an open source, decentralized project whos infrastructure is primarily hosted on a proprietary, centralized service though I believe people should be free to host wherever they choose, the medium is the message, and the message comes off as conflicted when open source software chooses proprietary services"
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "I agree that given the two options github is more accessible than gitlab. Personally, I would love to see a truely decentralized alternative come about, though I recognize Cardano needs options available now, and who knows when something like decentralized and open source github gets released."
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "Right, but it's not about proprietary services, it's about accessibility to a decentralized audience of consumers. Switching to GitLabs is great and all, but that ultimately just ends up in a different, less reliable centralized third-party hosting the repos"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "There is potential to do something like create a trusted network that will pin Cardano binaries on a known and trusted open source stack like IPFS and make the files available that way if we're really that worried about a compromise at GH"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "Problem of course being that Iagon themselves are not a fully-open source project although they are a \"Cardano\" native project and they've received some flak for patenting some of their tech stack"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "i.e. Iagon node operators pledge to offer X storage space for hosting signed binaries of core Cardano components that can be built and sha256'd against commits?"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "Would that be something we could reach out to a project like Iagon that is alleging to offer decentralized storage and compute from community members to provide?"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "So which is more accessible and open to the community, a permissioned GitLabs or GitHub?"
      }
    ]
  },
  {
    "date": "2024-03-27",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* Is there some documentation on the performance of Scott encoded types vs data encoded equivalents to help us reason about when the cost of conversion is worth it? I expected traversal of Scott encoded lists to be more efficient than Data encoded lists but in-practice the benchmarks I get for traversing a Scott encoded list are much worse. canonicalOrdering = pconstant [26, 21, 6, 12, 13, 15, 5, 10, 11, 8, 25, 14, 4, 2, 1, 3, 7, 9, 16, 17, 18, 19, 20, 22, 23, 24] cost of mapping those as indices in a scott encoded list is 1,100,838 mem cost of mapping them in a data encoded list is: 667,738 mem Not sure why this is the case; I was under the assumption the mapping over the Scott encoded list should be more efficient and that in practice the only reason to prefer builtin lists is when the initial cost of converting from builtin list to Scott encoded outweighs the increased efficiency from the usage."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* Is there some documentation on the performance of Scott encoded types vs data encoded equivalents to help us reason about when the cost of conversion is worth it? I expected traversal of Scott encoded lists to be more efficient than Data encoded lists but in-practice the benchmarks I get for traversing a Scott encoded list are much worse. canonicalOrdering = pconstant [26, 21, 6, 12, 13, 15, 5, 10, 11, 8, 25, 14, 4, 2, 1, 3, 7, 9, 16, 17, 18, 19, 20, 22, 23, 24] cost of mapping those as indices in a scott encoded list is 1,100,838 mem cost of mapping them in a data encoded list is: 667,738 mem Not sure why this is the case; I was under the assumption the mapping over the Scott encoded list should be more efficient."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "Is there some documentation on the performance of Scott encoded types vs data encoded equivalents to help us reason about when the cost of conversion is worth it? I expected traversal of Scott encoded lists to be more efficient than Data encoded lists but in-practice the benchmarks I get for traversing a Scott encoded list are much worse. ```hs canonicalOrdering = pconstant [26, 21, 6, 12, 13, 15, 5, 10, 11, 8, 25, 14, 4, 2, 1, 3, 7, 9, 16, 17, 18, 19, 20, 22, 23, 24] ``` cost of mapping those as indices in a scott encoded list is 1,100,838 mem cost of mapping them in a data encoded list is: 667,738 mem"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Was there a recent PR that improved evaluation times? I've got a [PR]() that shouldn't have much of an effect but I'm seeing 3-5% speedups on the `nofib` benchmarks. The faster results seem to be comparable with the [current behaviour]() on master, so I think I must have merged some change into my branch that sped things up. Any ideas what it might be?"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "maybe it's the specific `builddir` though. Let's see..."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "yyyyyup, it seems like it's `:` in the name that breaks something"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "I support using vectors."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "so yeah, sounds like a related problem"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "ew"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "``` ~/code/iohk/plutus/plutus-benchmark$ /nix/var/nix/profiles/default/bin/nix develop ../ --command cabal repl plutus-benchmark:bench:validation --builddir=dist-newstyle/dante/plutus-benchmark:bench:validation \"--ghc-options=-dynamic-too -dynosuf dyn_o -dynhisuf dyn_hi -j6 +RTS -A128m -n4m -RTS\" <...> ***** agda already run, skipping preprocessor hook Building library for plutus-metatheory-0.1.0.0.. <no location info>: error: [GHC-82272] module ‘MAlonzo.Code.Agda.Builtin.Float’ cannot be found locally <...> ``` What am I doing wrong?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we don't currently do \"error propagation\" as an optimization. I'm not really sure why. I think because it can generally only optimize parts of the program that are statically equivalent to error, and those should be rare"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> as if that pragma doesn't matter maybe GHC refuses to inline the operator for some reason. Maybe you need a `cabal clean` or `-fforce-recomp` or whatever."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm not sure why it's constr 1, maybe we sort the constructors, I forget"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the short-circuiting thing is intensely dodgy and I was TBH against adding it"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "does it work without all those GHC options?"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "trying to figure it out atm"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "as if that pragma doesn't matter"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "or the module has `-O0` set?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Failing test on master `cabal test plutus-ir-test --test-options '--quickcheck-replay=919098 -p caseOfCase'`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": ">:("
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": ""
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "We do have a recently added documentation page on this: . But it just says the same thing - scott/sum-of-products are faster than `Data` in general. Unless the cost you measure in your benchmarks includes converting the list to/from `Data`, the numbers would be surprising."
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "> I was under the assumption the mapping over the Scott encoded list should be more efficient That should indeed be the case in general. Can you share the benchmarks you are running?"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* I support uplc vectors (or array) definitely should do one of the two; very high impact."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "``` ~/code/iohk/plutus/plutus-benchmark$ /nix/var/nix/profiles/default/bin/nix develop ../ --command cabal repl plutus-benchmark:bench:validation --builddir=dist-newstyle/dante/plutus-benchmark:bench:validation ```"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "maybe something in the module autogeneration is not respecting the builddir properly??"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "yup, that gives me different errors, the right ones related to Haskell files"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "fresh build gives me the same errors with `builddir`"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "let me try to remove the `builddir` arg"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "same errors with"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "let's see if `cabal clean` fixes that"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "the fuck?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "hmmm"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> (can't DCE the error term because program behavior changes from error to boolean?) I think it's beta + inlining rather than DCE, but yeah, it would be wrong to \"optimize\" the term like that"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "then this is exactly the expected behavior. GHC doesn't inline the operator => no short-circuiting. We inline it, but our optimizer does not change the strict semantics"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "Maybe `PlutusTx.&&` just doesn't get inlined by GHC? And instead gets inlined by our optimizer, at which point it's too late to get short-circuiting."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> Q2: Do I understand correctly that in [strict] UPLC these terms evaluate to errors (despite lambda parameter not used)? Yes."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "> how come? Shouldn't False end up being constr 0 []? I'd expect it too, so this must be `True` then"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I have marked `PlutusTx.&&` as `NOINLINE` to reproduce the problem with not shor-circuiting."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "now as I return it back to INLINEABLE - I get same results, actually."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "I'm confused. You marked it before you got those results or after?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "before"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Several questions about this code: ``` shortCircuitAnd :: CompiledCode Bool shortCircuitAnd = $$(compile [|| False PlutusTx.&& PlutusTx.error () ||]) shortCircuitOr :: CompiledCode Bool shortCircuitOr = $$(compile [|| True PlutusTx.|| PlutusTx.error () ||]) ``` 🧵"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Do I understand correctly that in [strict] UPLC these terms evaluate to errors (despite lambda parameter not used)?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* Q2: Do I understand correctly that in \\[strict\\] UPLC these terms evaluate to errors (despite lambda parameter not used)?"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> `program 1.1.0 ((\\r -> constr 1 []) error)` how come? Shouldn't `False` end up being `constr 0 []`?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "and as such we can't DCE the `error` term because program behavior changes from `error` to boolean?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Compiles to (respectively) ``` program 1.1.0 ((\\r -> constr 1 []) error) ``` ``` program 1.1.0 ((\\r -> constr 0 []) error) ```"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> Q1: why not to program 1.1.0 (constr 1 []) or program 1.1.0 (constr 1 []) ? I'm also surprised by this."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* (can't DCE the `error` term because program behavior changes from `error` to boolean?)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Q1: why not to `program 1.1.0 (constr 1 [])` or `program 1.1.0 (constr 1 [])` ?"
      }
    ]
  },
  {
    "date": "2024-03-28",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "G4 - By Q4,2024, establish a security framework for all OS Cardano projects that will include [...]. By (Q4,2024) we’ll be ensuring at least 80% of projects adhere to standardized security policies, with dedicated security officers appointed to core projects. Metrics: 80% of Cardano projects implementing the standardized security policy. Actions 1. Develop / standardize security policies Collaborate with security experts within / outside the Cardano ecosystem to create comprehensive security policies that cover aspects of open-source project development and maintenance 2. Security officers for core projects Identify and appoint professionals as security officers for each core project, responsible for overseeing and enforcing security practice. 3. Implement security issue reporting Establish a process for the community to report security vulnerabilities, and outline steps for response / resolution by teams and security officers."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "G3 - By the end of 2024, 50% of core Cardano projects will be supported by paid maintainers from at least two companies. We’ll prioritize contracted maintainers from other organizations to ensure project diversity and sustained contribution. We’ll utilize and promote existing tooling and internal resources to support their involvement. Actions: 1. Engage past collaborators (+ identify maintainers) Conduct a survey among core Cardano project teams to identify companies and professionals they've successfully collaborated with in the past. Compile a list of potential maintainers with proven track of records. 2. Engage TSC Present a formal request to the TSC, emphasizing the strategic importance of diversifying project maintainers 3. Facilitate maintenance engagements Initiate a matchmaking process between core Cardano projects and potential maintainers identified in action"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "G1 - (By Q4,2024), all Cardano projects will have a clear path for their future, according to a general Lifecycle framework. Based on that there will be decisions about their progress, future sustainability, risk mitigations, and possible post-mortem actions. 1) Establish the project lifecycle framework 2) evaluate projects according lifecycle framework 3) implement project support items in association with framework and escalations for project health identified by assessment"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "G2 - By (Q4, 2024), aim for 70% of intersect projects across both core and non-core Cardano projects to be made through transparent processes, documented in an open forum. For core projects, governance decisions will align closely with TSC’s recommendations and technical expertise. Actions: Stabilize the governance policy Work with projects to help them implement the governance policy Monitor implementation progress"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "ok ill add it, G2 - By (Q4, 2024), aim for 70% of Intersect projects will be using open communications channels for discussion and meetings Actions: Stabilize the governance policy Work with projects to help them implement the governance policy Monitor implementation progress"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "\"By <time, 70% of Intersect projects will be using open communications channels for discussion and meetings.\"?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I don't know why we keep adding extra sentences beyond the one that states the goal :)"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I say we start here and if we hate it, revaluate in Q2 after pilot?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I say we start here and if we hate it, revaluate in Q2 after pilot?"
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "Michael Peyton Jones: my understanding was that we first need to assess the projects according to the lifecycle framework, that would empower this sustainability, and understanding how they evolve ... if everyone agrees, I'll rephrase according to Michael Peyton Jones 's proposal --> question: are the actions good as they are?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> The best option it seems is email lists, ala linux kernel FWIW this was my initial thought as well, but I surveyed people and nobody wanted to use them, so we shelved them for now"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "yes the project lifecycle is just a subcomponent of project incubation, see the Hyperledger example, it denotes not only healthy, dying, dead, but sandbox, mature, graduated"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "gues sts what you decide to call it but it cover both ends of spectrum and elaborates the starting pint and process for each stage of it"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "\"how do I know whether I trust this signing key\" is one of the oldest problems in cryptography :)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think you mean the other way around? incubation is a subcomponent of lifectyle?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "actions: 1. Write the framework 2. Talk to all the projects and work out the plans 3. That's it?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "also silona worte hyperledger's so we have the author to assist with this"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Just a remidner the OSc call is today at 8-9 am PST"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> For core projects, governance decisions will align closely with TSC’s recommendations and technical expertise. why is this sentence here? This is stating something about the content of the decisions, whereas this goal is about the transparency"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* I actually have a way to do this with partner Bitergia called a footprint analysis that shows all contributors and projects that have worked on, showing the footprint INtersect is connecting"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I actually have a way to do this with partner Bitergia called a footptrint analysis that shows all contributors and proejcts that have worked on, showing the fottprint INtersect is ocnnceting"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "we do have tyhe policy, but its also the effort of having proejct adoption, and we've only piloted with @marcin currently, so Q2 or Q3 i think makes sense"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I thought we agreed that the metric was going to be the number of projects which are following the communications part of the goverannce policy"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "for actions, how about: 1. Stabilize the governance policy 2. Work with projects to help them implement the governance policy 3. Monitor implementation progress"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I agree that this is ambitious. Maybe let's say 50%, and just be conscious that we're less likely to achieve this one"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "i think most of the definitions will come from the project incubation policy which is target complete by end of Q2"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I thought we agreed that \"X% of decisions\" was unmeasurable?"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "I feel like this naturally should be targeted to Q3 2024 so that it is ready and complete(-ish) by the time of the Annual Members Meeting (early October) and elections and potentially budget-setting during the members meeting and/or constitutional convention time period (early December). 1. Should there first be a framework for what counts as a \"core\" Cardano lib and then maybe 1..n \"halo\" or \"valence\" levels of auxiliary/complimentary projects? Maybe we should aim to have auditing of all \"core\" and L1 repositories by Q4 2024 w/ full auditing of all Intersect projects to be completed by Q1 25? 2. Is the framework described here a necessary precursor to be completed prior to work on #1 beginning? 3. This one seems arbitrary (why 5? which 5?) and is this really just a very tenuous extension of #2?"
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "Cardano is more than just a financial system! It is public infrastructure. Personally, I do not feel comfortable developing public infrastructure on top of someone else's private property, it's just asking for the rug to be pulled out from beneath us. Cute analogies aside, the focus ought to be open standards, interoperability, decentralization, and freedom (artistic, financial, etc.). I just think it would take only a little effort to include a section stating that Github is proprietary, it is centralized, it could potentially rug pull all the intersect repos, and we should really consider exploring alternatives, preferably ones that are free and open source and decentralized"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Agenda for today will: 1) Solidify updated goals form the Strategy TWG yesterday 2) Agree to high level action items to deliver these goals 3) High level review of the foundation framework form past conversations in March 4) vote to ratify this initial strategy reminder: that we will be testing this strategy implantation first two months of Q2 and tracking progress, then revise this initial draft accordingly to new demands or lessons learned It is important we get something to start with today and then use the testing as the point of correction."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Thank you to all involved in today's call and overall effort! Appreciate the laboring effort to get this first iterative strategy over the line!"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "PLease join inntoday if you can need simple majority for vote"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I say we start here and if we hate it, revaluate in Q2 after pilot?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I say we start here and if we hate it, revaluate in Q2 after pilot?"
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "\"By [quarter/year], all Cardano projects will have a clear path for their future, according to a general Lifecycle framework. Based on that there will be decisions about their progress, future sustainability, risk mitigations, and possible post-mortem actions.\" what do you say Michael Peyton Jones ?"
      },
      {
        "userID": "ebc428e8be6fde2568eb381653d783c689959bb4b9b291f854864a1ab3420d7d",
        "message": "> <user_id_removed> why is this sentence here? This is stating something about the content of the decisions, whereas this goal is about the transparency the sentence is there because it was proposed in one of our discussions in Miro"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the lifecycle framework is a means to an end, the end here is having some kind of sustainability plan. so yes, I think it should be part of the actions, see my comment above"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Why the extra stuff? :) \"By <time>, all Cardano projects should have a plan for their sustainable development and maintenance.\"?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "im fine with this and we include the incubation under the lifecycle framework"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "at elast 80% adoption then 20% outliers to wrangle later"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but does it make sense to you? :)"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "I agree with number of proejcts"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "lets go woth 50 then"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "this goal seems quite different to what we were discussing in the meeting? I thought we agreed that we were specifically looking at _sustainability_. So I was thinking something like \"By <time> all Intersect projects will either have a Sustainability Plan laying out how the project expects to sustain its development, or will be explicitly noted as 'in danger' in the project lifecycle framework\""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> However, I think that adherence to these security policies would be a \"mandate\" if you will for all Intersect-maintained repositories and so the measurement should always be 100%? But realistically, we might not be able to get there, or not to 100% adherence"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> We’ll prioritize contracted maintainers from other organizations to ensure project diversity and sustained contribution. We’ll utilize and promote existing tooling and internal resources to support their involvement. I'm not sure these sentences add anything"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think they can be similar to our other policy goal: 1. Write it/stabilize it 2. Help people implement it 3. Monitor progress"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> with dedicated security officers appointed to core projects. delete, this is just jumping ahead to what the policy will be"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "yes but more, it also elaborates a proejct support path for healthy proejcts"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Christian Taylor: to be clear, \"project incubation policy\" is really \"project lifecycle policy\", right?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the actions are jumping ahead to what the policy will be"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "do we want to limit this to Cardano projects? unsure"
      },
      {
        "userID": "b5fd67d9b1d1f1953921b12ef3efcc891d9ef897352676ee65b29f852a38a3a2",
        "message": "> <user_id_removed> I don't know that we can set such an ambitious timeline for this goal (end of 2024) because a large part of finding and organizing primary maintainers let alone \"backup\" or secondary maintainers will largely depend on the amount of budget that Intersect is going to be given to execute on this goal. > > Is it enough to lay the groundwork to identify potentially viable individuals? What does the maintainer \"grant\" or \"contract\" application/RFP and subsequent hiring process look like at this point? Yes, any maintainer needs to have demonstrated their ability by an extended period of successful contributions, and be willing to engage on an essentially unlimited basis. That limits the pool a lot."
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "The best option it seems is email lists, ala linux kernel that is a lot to ask of people nowadays which is why github and gitlab become popular we ought to stick to Cardano, and point people in the right direction. We all benefit when others do good, and people do good without needing to be told they are free to do that! But yes, keep the scope in check Intersect is the long term future of Cardano the freedom interoperability decentralization thing is nice, but gotta make do with whats available now even stinky microsoft and their swanky product github"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "I don't know that we can set such an ambitious timeline for this goal (end of 2024) because a large part of finding and organizing primary maintainers let alone \"backup\" or secondary maintainers will largely depend on the amount of budget that Intersect is going to be given to execute on this goal. Is it enough to lay the groundwork to identify potentially viable individuals? What does the maintainer \"grant\" or \"contract\" application/RFP and subsequent hiring process look like at this point?"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "I feel like most of this is already covered by the introductory policy that Michael Peyton Jones has already started working on and publishing via the GitBook. I also wrote at least a draft project/committee governance procedure that has only received feedback from Michael Peyton Jones up to this point. However, I think with the work that's already been done on this to this point through the other efforts of this committee we could target Q2 2024 for this one"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "heh yeah, but even with email lists, the vast majority of people will end up subscribing to it with their Google or Apple email account so... where does that get us really? The lesser of two weevils? I don't think it's a bad goal, just out of scope for this particular group :)"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "I think these actions are good and align well with what the security policy working group has been developing. However, I think that adherence to these security policies would be a \"mandate\" if you will for all Intersect-maintained repositories and so the measurement should always be 100%?"
      },
      {
        "userID": "fdadbf14ee18e3f00f4642c998e91bb2454c2208c79668bed2458915e95fd885",
        "message": "> <user_id_removed> still gotta trust the sha, need signatures, trusted parties, etc. hello! please share details on the trusting trust issues you mentioned how do you get trust in a signing key? would newer hashing algorithms suffice?"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "Decentralizing GitHub is not our mission or remit and seems way beyond the scope"
      },
      {
        "userID": "95833101eccb50ca3aa4a03fa6fd0257575bfb997cf527df7fdfa51c700ad475",
        "message": "Which options are those that exist today?"
      }
    ]
  },
  {
    "date": "2024-03-28",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "In this case, even when accounting for the cost of conversion it is slower. The source code is: ``` TIO.writeFile \"dataBench.txt\" $ renderStrict $ layoutPretty defaultLayoutOptions $ prettyTerm def ( Plutarch.List.pmap # plam (\\idx -> pelemAtFast # idx # plotsOfHashes) # canonicalOrdering ) print \"two\" TIO.writeFile \"scottBench.txt\" $ renderStrict $ layoutPretty defaultLayoutOptions $ prettyTerm def ( plet (pconvertLists # plotsOfHashes) $ \\(scottHashes :: Term _ (PList PValidatorHash)) -> Plutarch.List.pmap # plam (\\idx -> pelemAtFast @PList # idx # scottHashes) # canonicalOrdering ) TIO.writeFile \"scottConvertBench.txt\" $ renderStrict $ layoutPretty defaultLayoutOptions $ prettyTerm def ( let scottHashes :: Term _ (PList PValidatorHash) scottHashes = (pconvertLists # plotsOfHashes) in scottHashes ) ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "When using the `dump-(pir|plc)` plugin option the compiler dumps info in `flat` files, e.g.: ``` !!! dumping initial PIR program to \"./ShortCircuit.Spec.pir-initial1565238-0.flat\" !!! dumping simplified PIR program to \"./ShortCircuit.Spec.pir-simplified1565238-1.flat\" !!! dumping initial PIR program to \"./ShortCircuit.Spec.pir-initial1565238-2.flat\" !!! dumping simplified PIR program to \"./ShortCircuit.Spec.pir-simplified1565238-3.flat\" !!! dumping initial PIR program to \"./ShortCircuit.Spec.pir-initial1565238-4.flat\" !!! dumping simplified PIR program to \"./ShortCircuit.Spec.pir-simplified1565238-5.flat\" !!! dumping initial PIR program to \"./ShortCircuit.Spec.pir-initial1565238-6.flat\" !!! dumping simplified PIR program to \"./ShortCircuit.Spec.pir-simplified1565238-7.flat\" ``` How do you then open/read such files? Is there something like a \"flat\" viewer? Anything like cbor.me ?"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "I almost never bother to use the dump flag. When debugging I usually just insert traces in the code that prints exactly what I want. The dump flag only dumps the final PIR and nothing else, whereas you may want to see the initial GHC Core, or some intermediate PIR, values assigned to variables etc."
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "Philip DiSarro: it's hard to read the UPLC programs even though they are prettified, but I'm especially confused about `dataBench.txt`, since I didn't find any usage of builtins on `Data` - `unListData`, `chooseData` etc. So I don't understand how it is related to Data-encode lists. Am I missing something?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "``` cabal run pir -- print -i plutus-tx-plugin/ShortCircuit.Spec.pir-initial1586650-0.flat pir: plutus-tx-plugin/ShortCircuit.Spec.pir-initial1586650-0.flat: hGetContents: invalid argument (cannot decode byte sequence starting from 166) ``` 🤔"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "@Yura If you really need to look at flat files see `pir convert --help`. You probably need to tell it what format the input's in, something like ``` cabal run pir convert -- --if flat-named -i <filename> ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Got it, thanks. I'll be using `dump-compilation-trace` suggested by you, to achieve the same goal (troubleshooting)."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the `pir` command has some tools to help here"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's annoying"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "My problem is that a red dot appears next to the icon at the bottom of my screen when there's a new message, but then I read the message and the dot doesn't go away. I'll try removing the icon and just remember to look at the Element window now and again."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "if you just loop over a list once and do some operation, then converting it first just adds overhead, since it has to traverse the list itself!"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Wait, I can turn off the icon in my notificaiton area where the red dot appears. That's better."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "Yeah, but then I just don't read it. Maybe that's the right answer."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I can't get Element's red dot to go away. It's incredibly annoying."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but yeah, it unfortunately very much depends how you use the value"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "this isn't to do with that, Philip"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "there are notification settings you can tweak btw"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "I have to keep quitting and restarting."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* In this case, even when accounting for the cost of conversion it is slower. The source code is: ``` plotsOfHashes :: Term s (PBuiltinList PValidatorHash) plotsOfHashes = pconstant [scred1, scred2, scred3, scred4, scred5, scred6, scred7, scred1, scred2, scred3, scred4, scred5, scred6, scred7, scred1, scred2, scred3, scred4, scred5, scred6, scred7, scred1, scred2, scred3, scred4, scred5, scred6, scred7, scred1, scred2, scred3, scred4, scred5, scred6, scred7, scred1, scred2, scred3, scred4, scred5, scred6, scred7] canonicalOrdering :: Term s (PBuiltinList PInteger) canonicalOrdering = pconstant [26, 21, 6, 12, 13, 15, 5, 10, 11, 8, 25, 14, 4, 2, 1, 3, 7, 9, 16, 17, 18, 19, 20, 22, 23, 24] TIO.writeFile \"dataBench.txt\" $ renderStrict $ layoutPretty defaultLayoutOptions $ prettyTerm def ( Plutarch.List.pmap # plam (\\idx -> pelemAtFast # idx # plotsOfHashes) # canonicalOrdering ) print \"two\" TIO.writeFile \"scottBench.txt\" $ renderStrict $ layoutPretty defaultLayoutOptions $ prettyTerm def ( plet (pconvertLists # plotsOfHashes) $ \\(scottHashes :: Term _ (PList PValidatorHash)) -> Plutarch.List.pmap # plam (\\idx -> pelemAtFast @PList # idx # scottHashes) # canonicalOrdering ) TIO.writeFile \"scottConvertBench.txt\" $ renderStrict $ layoutPretty defaultLayoutOptions $ prettyTerm def ( let scottHashes :: Term _ (PList PValidatorHash) scottHashes = (pconvertLists # plotsOfHashes) in scottHashes ) ```"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "The list that is data encoded in the first version and scott encoded in the second version is `plotsOfHashes`. The test is designed such that we traverse that list ALOT. For every integer in `canonicalOrdering` we do `elemAt # idx # plotsOfHashes` where `plotsOfHashes` is data encoded in dataBench and scott encoded in scott bench."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "From what I see in the scott encoded version the tail becomes: ``` cs9iR = \\w4 -> w4 (\\blM6d67 vModHwqYB -> vModHwqYB) ~ERROR ``` This does not strike me as a very efficient looking implementation of tail."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "Ziyang Liu We don't use unListData or chooseData because the list is defined as a constant with type: `BuiltinList PValidatorHash`"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "Ah, that's unfortunate. Did not have time to look over the PR but the name got me super excited."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "dataBench includes the pretty printed UPLC for mapping the indices to the data encoded list scottbench includes the pretty printed UPLC for converting the data encoded list to scott and then mapping the indices over the scott encoded list"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "our benchmarks fairly consistently show that data-encoded lists are about 3x slower to work with"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Philip DiSarro: some benchmarks here:"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "The cost of conversion is only `149,264` mem"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "scottBench.txt"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "dataBench.txt"
      }
    ]
  },
  {
    "date": "2024-03-29",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "52f3ae2d075167da1dce7321ab7c5b0edeea20dcfe6ca5c33b510e1e39c2f6d5",
        "message": "I spoke with the gitlab team previously when I was at IEEE SA OPEN about adding a balloting feature to the process and they were very interested in discussing it."
      },
      {
        "userID": "52f3ae2d075167da1dce7321ab7c5b0edeea20dcfe6ca5c33b510e1e39c2f6d5",
        "message": "but then several here now of my gitlab bias. Of course, we run our own gitlab install via the open source edition so no one is harvesting our data."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "> <user_id_removed> I would not use the term Ratified as that means the board approved it. changed it to by approved by OSC in all dialogues"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* Here is strategy approved by the OSC as of yesterday:"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* Here is strategy approved by the OSC as of yesterday:"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* Here is strategy approved by the OSC as of yesterday:"
      },
      {
        "userID": "52f3ae2d075167da1dce7321ab7c5b0edeea20dcfe6ca5c33b510e1e39c2f6d5",
        "message": "> <user_id_removed> still gotta trust the sha, need signatures, trusted parties, etc. yes and github is still sha1"
      },
      {
        "userID": "52f3ae2d075167da1dce7321ab7c5b0edeea20dcfe6ca5c33b510e1e39c2f6d5",
        "message": "I would not use the term Ratified as that means the board approved it."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Here is strategy ratified as of yesterday:"
      },
      {
        "userID": "52f3ae2d075167da1dce7321ab7c5b0edeea20dcfe6ca5c33b510e1e39c2f6d5",
        "message": "also /"
      }
    ]
  },
  {
    "date": "2024-03-29",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* Also, this function (mapping indices over a list) would be great to add to the Plutus List benchmarks that Michael Peyton Jones linked; since, it takes up a significant portion of the budget in most of the major DApps right now. Do you guys accept contributions to those (if I made a PR introducing it)?"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* I just assumed that indexing of a list defined with scott encoding would be faster since it avoids the requirement to use the head, tail and chooseList builtins (which each require some number of `force` applications); it instead just uses normal function applications."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "Also, this function (mapping indices over a list) would be great to add to the Plutus List benchmarks that Michael Peyton Jones linked. Do you guys accept contributions to those (if I made a PR introducing it)?"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "I just assumed that indexing of a list defined with scott encoding would be faster since it avoids the requirement to use the head, tail and chooseList builtins (which each require some number of `force` applications)"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "So this is more of a question about which list has faster indexing, `BuiltinList` or scott list? `BuiltinList` can indeed be faster for indexing, since indexing is basically a composition of builtin head/tail calls, `head . tail . tail ...` Normally Data-encoded things are slower but List can be an exception, since `Data` has a `List` constructor, so getting a List from Data is trivial (indeed, your benchmark code has nothing to do with `Data` at all). It also helps if the list elements are of simple types (Integer/ByteString), or if you aren't doing anything to the elements."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* I am doing a lot of benchmarking for scott vs data encoding scenarios to write a thorough guideline for indicators on when the cost of conversion is worth it."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "I am doing a lot of benchmarking for scott vs data encoding scenarios to write a thorough guideline for when to convert."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "Thanks! That's really helpful info. I will try to document it somewhere for the community."
      }
    ]
  },
  {
    "date": "2024-04-01",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "On my branch I'm getting a lot of errors similar to: ``` +An error has occurred: User error: +The machine terminated because of an error, either from a built-in function or from an explicit use of 'error'. +Caused by: (unConstrData + (Map + [ ( Constr 0 [Constr 1 [B #], Constr 0 [B #, B #]] + , I 30000000 ) ])) ``` The only `unConstrData` function I could find is , which seems weird because its argument type is `SomeSEXP` but from the error message the argument looks like a `Data`. The two types don't seem at all compatible but maybe I'm missing something. I'm thinking that this error may be coming from somewhere else. Does anyone know if `unConstrData` is generated at compile time somewhere? Or does anyone have any idea what's going on?"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "> I need to figure out why it's expecting a Constr... Because that's what `unConstrData` does. If the input `Data` is not a `Constr`, it crashes. If you have a `Map`, then `unMapData` should be used. To pattern match on `Data`, consider using the helper functions in `PlutusTx.Builtins`: `matchData` and `matchData'`."
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Ok so unfortunately that function's name is overloaded and the `unConstrData` is actually part of the language as a builtin function. After following the call chain I guess is what's failing. It's expecting a `Data` `Constr` but it receives a `Map` `Data`. I need to figure out why it's expecting a `Constr`..."
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "That would help us understand why indexing on `BuiltinList` is faster. I can see it go either way. `head . tail . tail ...` doesn't seem too bad. Hard to tell without looking a bit closer into it."
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "Yes, PRs always welcome."
      }
    ]
  },
  {
    "date": "2024-04-02",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "good stepping stone to get things rolling, the team structure in GitHub we can map to reflect their proposals then too, because we have 9 repos altogetehr all coretech have wrote access to as well"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "every repo needs to have an maintainers though, and I rather not list all maintainers for Cardano node to be all of CoreTech, fine to list them as contributors, repeat the above for"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the governance policy suggests that you can refer to the teams as a way of listing contributors/maintainers"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes, cardano-node would also need teams"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm not sure I'm getting you"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "image.png"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "Michael Peyton Jones: I don't want to assume, but I would imagine you have read the above OSO Strategy document. By end of Q4 we should complete various tests/audits for each project, this will involve ensuring each project aligns with governance, and that should be inclusive resolving the concern with cardano-node"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we need to talk to the teams, get them to agree that they're a project and what we're going to publish, and then we can maybe make PRs for them writing that up"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Michael Peyton Jones: I agree we need to finalie the strcuture, I will sync with Ryan Williams, we was taking a stab at that for me in MArch"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Yes, what I am saying is compatible with that. I'm arguing that it's causing problems so we should get on with at least some of it"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* Michael Peyton Jones: I agree we need to finalize the structure, I will sync with Ryan Williams, he was taking a stab at that for me in March"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "If this is repetitive I apologize, but at least it is some additional clarity for the moment, even if only for me"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "Understood, I will reach back when I have a clearer understanding for next steps"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "\"by end of Q4\" doesn't mean \"do it in q4\" 😁"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well, I think this is a collaborative thing"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "cardano-node should have the same committers as each of the repos that it is said to integrate, but if there is not a need for integration and the underlying repos have a larger project purpose, then node should be removed/re-org'd under a different repo"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "If there is a project where those fall, then the project should be defined as cardano-node and then the continuous drop to each respective repo"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "So under the tems of Governance cardano-node should have the same maintainers/committers as ledger."
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "Per the readme, cardano-node is the integration of the above including networking and node-shell"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "`cardano-node` is weird because it doesn't clearly have a team of maintainers at the moment"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "Are ledger and consensus etc under their own projects?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "`cardano-ledger` etc. is a separate project, yes"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "in the terminology of the governance policy"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "\"Cardano\" is a meta-project"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "Project incubation is a Q2 deliverable, So unless I am missing something already provisioned, this will be a topic of discussion as we push forward this Q"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think we need to do some work on getting at least the basic project structure suggested in the governance policy agreed on and written down"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "see e.g. discussion in #cardano-node:matrix.org , it's not even totally clear at the moment whether it is a project, etc."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "also, if this doesn't match up with reality that can of course mean that the proposed ontology in the governance policy is bad and we should change it!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "`cardano-ledger`, `ouroboros-network` etc. are all separate projects with separate mainainers (and hence separate governance)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the set of contributors is certainly not co-extensive with the set of contributors to ledger or network!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think it is just another project, that happens to be poorly organized at the moment"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "they share some common cause, this is the idea of the \"meta-project\""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but the problem is: what to say about `cardano-node`"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "Unless I have something incorrect"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "ok"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "no"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "I was just stating that in order to have a productive incubation/lifecycle in place, it will require that we begin with a clear project definition. Therefore ensuring the the project aligns with what should/shouldn't be considered a project."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well, basic conformance to the governance policy in terms of the information that is written in the project documentation would be a start. That would force us to then answer a bunch of questions like \"is this a project? is it part of another project? or what?\""
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "I was trying to say that if there is not already a process/guideline in place that defines a project, that becomes the roadblock before we can move forward"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "this is about the definition of what project is, and applying it to what we already have"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "Michael Peyton Jones: Can you expand on what you are asking for in terms of structure?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I don't think this is about incubation"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "or lifecycle"
      },
      {
        "userID": "23850a1cef7b0d7eac59614a527573b19d80bf43b0f3d41e5452aed3b759181a",
        "message": "I am aware"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "[there is]()"
      }
    ]
  },
  {
    "date": "2024-04-02",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "As I was changing PlutusTx code to verify a few hypothesises I found it quite frustrating that results often didn't match my expectations. Its only today that I realized the GHC/cabal compilation caching comes in a way! I did `cabal clean` then ran tests again and results are exactly what I expect them. I guess that you guys already knew about this gotacha. What is your go-to way for a cache-avoiding recompilation? `cabal clean` is too slow to make fast iterations. Do you manually modify source files to trigger a recompilation or do you use `--ghc-opts '-fforce-recomp'` ? I'd like to gather all the best practices. Thanks!"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Looks like this approach ``` cabal test plutus-tx-plugin-tests --ghc-options=\"-fforce-recomp\" --test-options '-p ShortCircuiting' ``` isn't helpful at all as it forces recompilation of tests themselves, not the recompilation of a code under test."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so you could e.g. do it by hand, represent `DataMap` as `Data`, write a pattern synonym for viewing the first key/value pair in the inner builtin list, and then I guess define stuff from there"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Data.Map contains a builtin list of builtin pairs, _that's_ what you need to work with"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think this will end up pretty similar to the thing Ziyang tried, though?"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Yes, but I also defined a new type for data-backed lists and pairs"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I am still somewhat mystified as to why this happens"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm not sure that helps?"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "🤔"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so when we run the tests we will load from a file the datum which will be a `Data.Map`, and then your new code will attempt to interpret that as a `Data.Constr`, which will fail"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but what this indicates is that your `DataMap` is not a drop-in replacement for an `AssocMap`, because it is encoded differently in Data"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the new one for `DataMap` rely on the instances created by `AsData`. Those always use `Constr` nodes"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the marlowe tests consist of a bunch of pre-prepared evaluation scenarios for the marlowe validator"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "you actually _can't_ make something that has the same representation as today using `AsData`"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Right, those are all derived now. What do you mean by pre-serialized state values?"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Hmm, so do we want `DataMap` to be a drop-in replacement? What is the goal here?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "(you can also just try out a few examples in GHCi if it helps to see)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "including serialized datums etc."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> I am doing a lot of benchmarking for scott vs data encoding scenarios to write a thorough guideline for indicators on when the cost of conversion is worth it. If we can have actual public benchmarks on this, that's even better! then you can point people to some evidence :)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "you're fiddling with `Map`, right? I think the current instances for `Map` encode it using the `Data.Map` constructor, not the `Data.Constr` constructors. So maybe you've changed that and now the existing stuff in benchmarks is failing to decode?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "> This does not strike me as a very efficient looking implementation of tail. sure, but it doesn't incur the costs of the builtin or the builtin machinery. in practice it's pretty fast!"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Yeah what I actually meant to say is why does it appear applied to a Map. This is all generated code."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "I don't remember seeing or doing anything that could be relevant"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "e.g. all the `validation` benchmarks can't change"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Oh, so I need to regenerate the scripts?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "since they're supposed to represent \"existing\" scripts"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "you can't do that"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "also, I use a hacked version of `cabal clean` that can clean just a single package by deleting the relevant bits of `dist-newstyle`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yeah, that's weird. I really think GHC should recompile properly if the plugin package changes, but maybe it doesn't"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "if you can definitely reproduce we could open a GHC or cabal issue, not sure which it is"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "` touch plutus-tx-plugin/src/PlutusTx/Compiler/Expr.hs` this didn't lead to a recompilation :("
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "since we _should_ get recompilation triggered properly"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Doc describing recompilation avoidance"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "also here's the issue for better clean:"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "much faster"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "So the Marlowe code has some `asData` types defined, which contain regular SOP types as fields. My understanding was that we wanted to replace those SOP types with some `asData` types to avoid the current conversion costs."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "for most of the types that's fine, since they use generated instances that use the same scheme"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we want to replace them with types _which are represented using Data_"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm not sure, what are you trying to do?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but the representation needs to be the same"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but AssocMap has special instances...."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Ah, got it"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yup"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "I'm not sure what you mean by encoded/decoded? Is it related to cbor or something else? is the definition of `DataMap`, with the following generated code: ``` -- newtype Map_aely k_aelA v_aelB -- = Map_6989586621679064944_aelC BuiltinData -- deriving newtype (P.ToData, P.FromData, P.UnsafeFromData) -- {-# COMPLETE Map_aelz #-} -- pattern Map_aelz :: -- forall k_aelA v_aelB. (P.ToData k_aelA, -- P.UnsafeFromData k_aelA, -- P.ToData v_aelB, -- P.UnsafeFromData v_aelB) => -- List (Pair k_aelA v_aelB) -> Map_aely k_aelA v_aelB -- pattern Map_aelz arg0_aelD <- Map_6989586621679064944_aelC (PlutusTx.Builtins.Internal.unsafeDataAsConstr -> PlutusTx.Builtins.pairToPair -> ((==) -- (0 :: -- Integer) -> True, -- PlutusTx.Builtins.Internal.head -> P.unsafeFromBuiltinData -> arg0_aelD)) where -- Map_aelz arg0_6989586621679064949_aelE -- = Map_6989586621679064944_aelC -- (PlutusTx.Builtins.Internal.mkConstr -- (0 :: Integer) -- (PlutusTx.Builtins.Internal.mkCons -- (P.toBuiltinData arg0_6989586621679064949_aelE) -- (PlutusTx.Builtins.Internal.mkNilData -- PlutusTx.Builtins.Internal.unitval))) ``` > the marlowe benchmarks I think also have pre-serialized state values that they decode, so if you change the representation there then that won't work Can you point out where the decoding happens?"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "So what I'm doing is using an `asData` representation of every type in the Marlowe `State`. I'm not changing anything related to `Data` (or specifically its `Map` constructor). So I guess somehow this change introduced an `unsafeDataAsConstr` applied to a `Data.Map` and I have no idea where and why"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the marlowe benchmarks I think also have pre-serialized state values that they decode, so if you change the representation there then that won't work"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "generally, changing the representation of `Map` would change the representation of `ScriptContext` which would break literally every script on-chain"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the old ones for AssocMap turn it into a `Data.Map`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "i.e. what do the to/from data instances do?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yeah, that's going to be it"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "\"encoded\" as Data"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "how is `DataMap` encoded?"
      }
    ]
  },
  {
    "date": "2024-04-03",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "im saying these repos basically have everyone as maintainers except for cardano node, which has a dedicated team structure, osmething to think if we need to add them to specific team rather then wholesale coretech"
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "This looks awkward as hell."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "what does?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think what you're saying is \"we have a whole bunch of repositories where it's not clear who owns them or what project they're part of\"?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "in a snene yes,we know who is accounatble just not responsible"
      }
    ]
  },
  {
    "date": "2024-04-03",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "What version of `integerToByteString` are you using? The version that's currently in the main `plutus` branch has a boolean argument that selects the endianness of the conversion, and so does `byteStringToInteger`. See [here]() for details: the names there are different from the ones that we use in Plutus Core, but the semantics should be correct that should allow you to do what you want. However, we don't yet have any shift operations. We're hoping that the conversions will be released in the next hard fork, but the other proposed bitwise operations won't be available for a while."
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "Hi. I'm wondering how `shiftByteString` can be used to implement efficient division by 2. `integerToByteString` uses big endian form. If I do directly: ``` testShift1 :: Integer testShift1 = byteStringToInteger (shiftByteString (integerToByteString 2306) 1) -- result 4612 as expected testShift2 :: Integer testShift2 = byteStringToInteger (shiftByteString (integerToByteString 2306) (-1)) -- result 1025 NOT as expected ``` I get incorrect answer for division. Of course I can do it by reversing byte string first, then doing bit shifting and reversing result again but that defies the purpose of efficient division by bit shifting."
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "* Hi. I'm wondering how `shiftByteString` can be used to implement efficient division by 2. `integerToByteString` uses big endian form. If I do directly: ``` testShift1 :: Integer testShift1 = byteStringToInteger (shiftByteString (integerToByteString 2306) 1) -- result 4612 as expected testShift2 :: Integer testShift2 = byteStringToInteger (shiftByteString (integerToByteString 2306) (-1)) -- result 1025 NOT as expected ``` I get incorrect answer for division. Of course I can get correct answer by reversing byte string first, then doing bit shifting and reversing result again but that defies the purpose of efficient division by bit shifting."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "> <user_id_removed> so what you're telling me is that GHC is not tracking dependencies from `addCorePlugin` correctly? Yes, this is what my experiments show."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so what you're telling me is that GHC is not tracking dependencies from `addCorePlugin` correctly?"
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "Is there a way to divide by two with bit shifts without reversing the bytestring?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sounds like a bug"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "you should make a GHC issue"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "um"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "* However, I suspect that just using `divideInteger` will be faster an cheaper than doing a conversion, a shift, and another conversion."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "However, I sspect that just using ``divideInteger` will be faster than doing a convesrion, a shift, and another conversion."
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "I haven't realized that I was using custom plutus version that is not internally accepted by IOG. That's the version:"
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "* However, I suspect that just using `divideInteger` will be faster than doing a conversion, a shift, and another conversion."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "* However, I suspect that just using `divideInteger` will be faster and cheaper than doing a conversion, a shift, and another conversion."
      },
      {
        "userID": "ec9ecf802cfd68c7cec6df68c2bee35e0df95faf5693dcd3f7ef19db827c991a",
        "message": "* However, I suspect that just using \\`\\`divideInteger\\` will be faster than doing a convesrion, a shift, and another conversion."
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "* I've been trying to speed up the finite field arithmetic with bitwise primops for in a IOG project"
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "I've been trying to speed up finite field arithmetic with bitwise primops for in a IOG project"
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "* I've been trying to speed up the finite field arithmetic with bitwise primops in an IOG project"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Iooked closer at this \"Not triggering recompilation upon plugin change\" problem today and here is what I have found: 1. By reading [this paragraph]() I learned that changes in TH splices as well as changes in Plugins are supposed to trigger recompilation because of the change in the fingerprint of an object file. 2. This made me think \"If GHC knows a module depends on a Plugin then it knows to recompile\". How would GHC know that a module M depends on the Plugin? 3. I looked at the [test] module that wasn't recompiled upon a plugin change despite my expectation and there was nothing in it about the plugin, other than `$(PlutusTx.compile)`! 4. It turns out that we do a quite tricky trick: 5. Eureka! The problem is that plugin is added \"dynamically\" via the TH. That's why such a dependency isn't tracked by the GHCs recompilation checker. 6. Fix: I added `{-# OPTIONS_GHC -fplugin=PlutusTx.Plugin #-}` to my spec module and voila! Recompilation started working as expected."
      }
    ]
  },
  {
    "date": "2024-04-04",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm not sure that the OSC has much to offer on the question of \"what should intersect prioritise for funding?\" 🤷 What I _would_ suggest is that as much as possible you do this in the open: make github issues or whatever for all the things you are considering, have discussion on them. That also will give you at least a a bit of a barometer for community sentiment."
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "Fair enough, my framing is too broad. And thank you for the good piece of advice to clarify the case more with the community and providing transparency in the process."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "charles having rather different opinions to us"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well, to me, I guess 😂"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "y'all need to watch this:"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "* Hi! Happy holidays and congratulations on achieving the goal for Q1! Meanwhile I have an async question. In the GovTools working group we come to the discussion of prioritisation: some members of the group would provide feature suggestions to populate backlog, while others will need to decide what needs to be done first. On the whim of fates I find myself in the position of a chair of this second group, whose goal is to prioritise the work packages and issues provided by the first group. The issue at hand is that if discussing the items directly the complexity of discussion will presumably in the future stall the development: it is something that is described in detail in Alternative Dispute Resolution and treaties on ontology of conflict (conflict of interest between involved parties). The proposed solution is to agree on objective criteria for ranking options before viewing options themselves. But here I am facing a blocker and need advice and help with, and I hope OSC is the right body to bring up such a discussion; forgive me if its not. One way to prioritise (and this has been actually proposed in the meeting) is by amount of work: do simple things first, more difficult things later. This would work in this particular case, but since we are thinking about robust governance mechanisms we must also think ahead and think about situations where a flood of minute tasks prevents us from delivering some more critical changes. In this case a solution would be to use software quality attributes as our measuring stick, and agree that e.g. we prefer security over UX, so vulnerabilities must be addressed first even if it's a lot of work, while UI fixes are deferred. We could use ISO 5055 standard, which has a decent number of attributes, with the claim that they are actually measurable. However it's not open source, and needs to be bought like any other ISO standard. I hoped that this work was cut out for us by the OSC, but trying to frame the problem using OSC strategy I find myself stuck because the values are somewhat general and I don't understand how to apply them in this context. What source of ground truth should be used for prioritising tasks for project development under the umbrella of Intersect? Can you suggest a short list (3 to 7) of attributes which we could use for backlog prioritisation? Maybe you can recommend an open source alternative to ISO which I could study to find a documentation of such kind? Thank you!"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "Hi! Happy holidays and congratulations on achieving the goal for Q1! Meanwhile I have an async question. In the GovTools working group we come to the discussion of prioritisation: some members of the group would provide feature suggestions to populate backlog, while others will need to decide what needs to be done first. On the whim of fates I find myself in the position of a chair of this second group, whose goal is to prioritise the work packages and issues provided by the first group. The issue at hand is that if discussing the items directly the complexity of discussion will presumably in the future stall the development: it is something that is described in detail in Alternative Dispute Resolution and treaties on ontology of conflict (conflict of interest between involved parties). The proposed solution is to agree on objective criteria for ranking options before viewing options themselves. But here I am facing a blocker and need advice and help with. One way to prioritise (and this has been actually proposed in the meeting) is by amount of work: do simple things first, more difficult things later. This would work in this particular case, but since we are thinking about robust governance mechanisms we must also think ahead and think about situations where a flood of minute tasks prevents us from delivering some more critical changes. In this case a solution would be to use software quality attributes as our measuring stick, and agree that e.g. we prefer security over UX, so vulnerabilities must be addressed first even if it's a lot of work, while UI fixes are deferred. We could use ISO 5055 standard, which has a decent number of attributes, with the claim that they are actually measurable. However it's not open source, and needs to be bought like any other ISO standard. I hoped that this work was cut out for us by the OSC, but trying to frame the problem using OSC strategy I find myself stuck because the values are somewhat general and I don't understand how to apply them in this context. What source of ground truth should be used for prioritising tasks for project development under the umbrella of Intersect? Can you suggest a short list (3 to 7) of attributes which we could use for backlog prioritisation? Maybe you can recommend an open source alternative to ISO which I could study to find a documentation of such kind? Thank you!"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Wanted to see if yall wanted to cancel this week's call and meet again next week? This will allow me to progress on some our deliverables for OSC.+ and provide a break after our 8 sessions on startegy in March 😅"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "Just an update, we are cancelling this week's call to allow everyone to recuperate from an intense Q1, we will resume same time next week."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "not sure we have too much to discuss?"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "ya, i think we need a week to have items to discuss"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sure"
      }
    ]
  },
  {
    "date": "2024-04-04",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "Roman's ideas provide a half-way house: if builtins can return a non-value term, they can return an un-evaluated application, which allows us to avoid the reverse dependency, so things don't become crazily complicated"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "> why would you assume that? Because without such assumption I can't think of a way to estimate complexity :)"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> Can someone remind me why HOF on builtins is not a good idea? it is 😛"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we of course need to handle `mapList (mapList (+1)) [[2]]`"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "challenge: tell me how to cost `mapList :: (a -> b) -> list a -> list b` :)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "assuming `a -> b` has a constant cost? :)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "also frankly the costing would be insane"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "costing ruins everything, sorry"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "why would you assume that?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "if you like, you could dump the marlowe PIR before and after and diff them to try and work out what happened"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "My current understanding that we're rewriting applications of the `&&` (as a special case)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "also there is one occurrence of && in the RHS diff, which seems like it should never happen?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Is such difference between cpu/mem benchmarks negledgible or significant?"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Can someone remind me why HOF on builtins is not a good idea?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "(we don't have it as a golden test because it's colossal)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "LHS: GHC inlines `&&` and `||` RHS: Plutus comipler inlines them."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "less than 1%, so not a big deal"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I am trying to wrap my head around it"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> challenge: tell me how to cost mapList :: (a -> b) -> list a -> list b :) I continue to be puzzled by what exactly is hard here (but maybe you'd already convinced me at some point and I just forgot). With the half-way house you simply create an AST of applications that you return from the builtins machinery, i.e. the `a -> b` thing does very much have a constant cost. You aren't gonna evaluate that within the builtin! You'll return it applied back to the CEK machine and it'll chop it up as per the normal rules."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> To do higher-order builtins, we need 2 to depend on 1, which is both complicated to implement and makes the structure much more conceptually complicated we used to have exactly that by the way, then people complained about complexity and I removed it. It was fairly complex indeed"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "Anyways, some form of HO builtins is discussed in [this]() issue and is implemented in [this]() PR sans costing. There's more to HO builtins, but I apparently never wrote it down, which I should have. I'll return to that issue at some point."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "if you're annoyed about the never disappearing notifications, set Notification options to Mentions & keywords"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "But why do the numbers go up? How is our special-cased inliner worse than what GHC does?"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "Screenshot from 2024-04-04 22-46-29.png"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "consider the two components: 1) the PLC evaluator, 2) the builtin evaluator. At the moment 1 depends on 2, but 2 is entirely standalone and can have its behaviour explained, benchmarked, etc. in isolation. To do higher-order builtins, we need 2 to depend on 1, which is both complicated to implement and makes the structure much more conceptually complicated"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "> <user_id_removed> Does this explanation sound plausible ? its probably because of benchmarking, as in"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* but we're not removing (DCE) the original binding (which is unused after all the rewrites?)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "but we're not removing the original binding (which is unused?)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Anyhow, I also want to know the right answer :)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* Does this explanation sound plausible ?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Does this sound plausible explanation?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "its much harder to estimate costs with HOFs ?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's a reason"
      }
    ]
  },
  {
    "date": "2024-04-05",
    "roomId": "!tMDCkksEaERFKOWQqp:matrix.org",
    "messages": [
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "Right. So watching it through with 3/4 also feel ambivalent: on one side I really like how it tries to avoid HR process which is broken (at least for me) but I recall the book about hacking that I am almost finished reading and I see how this process gives people incentives to hack the concepts of impact and merit to get to the status of a Core Dev. And then it also has strong measurability bias; From Sreckovic and Windsperger, “Decentralized Autonomous Organizations and Network Design in AEC.” it follows that this could potentially be a way to lose the most valuable people."
      },
      {
        "userID": "52f3ae2d075167da1dce7321ab7c5b0edeea20dcfe6ca5c33b510e1e39c2f6d5",
        "message": "Oh I was very earlier on the CI/CD space probably because i had created similar structures back when I worked creating backend structures for MMOs. and github was a PTA (I still argue it is at least 5 yrs behind GL). I tried to get paypal to use gitlab instead for that reason but they didn't have a self hosting option yet. So instead we just copied the gitlab interface for our internal CI/CD that we had to write for the Orchestration tooling I was in charge of refactoring."
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "you also have situations to try and avoid from risk perspective, one good example is the latest xz attack where a maintainer purposely included malware into the code and caused some havoc, i thinkthe solution is an inbetween, where the is a psth that guide the best way to become one but doenst guarantee it per say, becuase the interaction with the core teams already doing the work is quite a criucail factor to weigh in"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "* you also have situations to try and avoid from risk perspective, one good example is the latest xz attack where a maintainer purposely included malware into the code and caused some havoc, i think the solution is an in-between, where the is a path that guide the best way to become one but doesn't guarantee it per say, because the interaction with the core teams already doing the work is quite a crucial factor to weigh in"
      },
      {
        "userID": "79ae24bf63b7f29dd3ed12327be36b0999486a9b14bc64170db7e6c0ce277a62",
        "message": "This definitely TSC territory to clarify as we also are defining further maintainer roles as well"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "Screenshot from 2024-04-05 16-46-38.png"
      },
      {
        "userID": "74c435739cf2b5ac73dcdf226ccae22213d6d8a313057397703fe62c9dbbfe55",
        "message": "> <user_id_removed> charles having rather different opinions to us I am watching the video and its helpful, at least in part; I shared it with the GovTool subgroup 2; which is \"the decentralized project manager\" subgroup. Could you point out where your opinions differ? Sociocracy 3.0 recommends identifying tensions as one of the core components of success in building decentralized orgs, and when two leaders have different opinions its is a tension. Thank you."
      },
      {
        "userID": "1fe47cfa0e291130fa0b953c7424579833683476a2e45c6fb5b381e71dd04f1e",
        "message": "> <user_id_removed> but then several here now of my gitlab bias. Of course, we run our own gitlab install via the open source edition so no one is harvesting our data. I would like to hear about your Gitlab bias. :)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well, it makes a bunch of assertions about what kinds of contributor there are and how you get to be one, which are fairly directly incompatible with our governance policy 🤷"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "and I have always been wildly against the idea that there is some kind of certification process that you go through which results in you getting commit rights"
      }
    ]
  },
  {
    "date": "2024-04-05",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* Somehow: ```builtinLovelaceValueOf builtinLovelaceValueOf b_v = BI.unsafeDataAsI $ BI.snd $ BI.head $ BI.unsafeDataAsMap $ BI.snd $ BI.head (BI.unsafeDataAsMap b_v) ``` is 5\\_000\\_000 mem less efficient than: ``` {-# INLINE builtinValueOf' #-} builtinValueOf' :: BuiltinCurrencySymbol -> TokenName -> BuiltinValue -> Integer builtinValueOf' b_cs (TokenName tn_b) b = outer_go $ BI.unsafeDataAsMap b where outer_go :: BI.BuiltinList (BI.BuiltinPair BI.BuiltinData BI.BuiltinData) -> Integer outer_go l = matchList l 0 (\\h t -> if BI.fst h == b_cs then lookupToken' tn_b $ BI.unsafeDataAsMap $ BI.snd h else outer_go t ) ``` when used like so: ``` builtinValueOf' CC.builtinAdaSymbol' adaToken r_v ``` This makes no sense to me. Also is there some config we can pass the plutustx compiler to make everything strict and allow us to insert delays / forces ourselves. Also is there an equivalent of seq for plutustx."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* Somehow: ```builtinLovelaceValueOf builtinLovelaceValueOf b_v = BI.unsafeDataAsI $ BI.snd $ BI.head $ BI.unsafeDataAsMap $ BI.snd $ BI.head (BI.unsafeDataAsMap b_v) ``` is 5\\_000\\_000 mem less efficient than: ``` {-# INLINE builtinValueOf' #-} builtinValueOf' :: BuiltinCurrencySymbol -> TokenName -> BuiltinValue -> Integer builtinValueOf' b_cs (TokenName tn_b) b = outer_go $ BI.unsafeDataAsMap b where outer_go :: BI.BuiltinList (BI.BuiltinPair BI.BuiltinData BI.BuiltinData) -> Integer outer_go l = matchList l 0 (\\h t -> if BI.fst h == b_cs then lookupToken' tn_b $ BI.unsafeDataAsMap $ BI.snd h else outer_go t ) ``` when used like so: ``` builtinValueOf' CC.builtinAdaSymbol' adaToken r_v ``` This makes no sense to me."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "``` {-# INLINE lookupToken' #-} lookupToken' :: BuiltinByteString -> BI.BuiltinList (BI.BuiltinPair BI.BuiltinData BI.BuiltinData) -> Integer lookupToken' tn_b l = matchList l 0 (\\h t -> if BI.unsafeDataAsB (BI.fst h) == tn_b then -- return token value BI.unsafeDataAsI $ BI.snd h else lookupToken' tn_b t ) ````"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "are you sure it's less efficient? I find it extremely hard to believe that. Not sure what `lookupToken'` is though"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "* I'm certain benchmarked it many times. Maybe it has something to do with strictness."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "* it would help a lot if you provided us with a minimal reproducible example"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "it would help a lot if you provided us with an minimal reproducible example"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "are you sure it returns the same result?"
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "I'm certain benchmarked it many times."
      },
      {
        "userID": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
        "message": "Somehow: ```builtinLovelaceValueOf :: BuiltinValue -> Integer builtinLovelaceValueOf b_v = BI.unsafeDataAsI $ BI.snd $ BI.head $ BI.unsafeDataAsMap $ BI.snd $ BI.head (BI.unsafeDataAsMap b_v) ``` is 5_000_000 mem less efficient than: ``` {-# INLINE builtinValueOf' #-} builtinValueOf' :: BuiltinCurrencySymbol -> TokenName -> BuiltinValue -> Integer builtinValueOf' b_cs (TokenName tn_b) b = outer_go $ BI.unsafeDataAsMap b where outer_go :: BI.BuiltinList (BI.BuiltinPair BI.BuiltinData BI.BuiltinData) -> Integer outer_go l = matchList l 0 (\\h t -> if BI.fst h == b_cs then lookupToken' tn_b $ BI.unsafeDataAsMap $ BI.snd h else outer_go t ) ``` when used like so: ``` builtinValueOf' CC.builtinAdaSymbol' adaToken r_v ```"
      },
      {
        "userID": "1770569b1a38d39c1c44e35e9d49e1d5f226525f7ee52d69d82dbe5f6e3b6818",
        "message": "Okey, everything is clear now - please forgive my outdated/invalid report. I used older version of PlutusTx and the issue is not present in the newer version any more. @Kenneth MacKenzie confirmed what you suggested Michael Peyton Jones that these builtins will be available in PV3."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I did remove the unused code PT4, but didn't dare to reuse it, as I am not sure about the impact on users."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think you can assume that if the policy isn't written down then there isn't one"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "For starters this (remove but don't recycle) looks like an adequate policy, wdyt?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's what I'd expect from such codes generally"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so what do you think we should do?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": ""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sorry, I think we're agreeing, just in circles :) I agree that your approach lets us do some HO builtins, possibly including stuff like the Map example > is it really different from just implementing maps in Plutus Tx? well, we can say the same about pattern-matching builtins, no? a bunch of the work happens in the main evaluator after the builtin is finished. So wherre is the improvement? It has to be that the bit where we \"decide what evaluation to do\" is faster. the same could be true of something like `mapList`: you don't have to do N builtin calls to get all the elements of the list in order to know that you need to map each element and cons them all together; that part gets done in Haskell"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> I think I'm unsure that we can do all higher-order builtins that way. we can't do _all_ builtins for any kind of builtins. So I think the worst part is that even if we could have HO builtins without any limitations, how useful could we even make them? You have a `Map`: what are you going to expose as builtins? The whole API of `Data.Map`? The most useful functions? The most general ones, even though their instantiations aren't going to be as fast as they're in the API of `Data.Map`? Etc, it's all relative and we can't get _all_ of anything. Bottom line is that HO builtins in some form are possible and have some utility."
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> well, we can't implement it today with our current builtins, right? because a builtin that takes an ordering function as an argument is a HO builtin, no? Sure, but there's a PR making that possible... Oh yeah, stupid me, those functions aren't gonna be evaluated within the definition of the builtin, we'd pass them back to the CEK machine instead and at that point is it really different from just implementing maps in Plutus Tx?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I think the issue with `Map` is more that we need HO builtins to even make them _possible_, because we need to pass in the ordering function. Sure, we'd then have a question of what API to expose, but at the moment I think we simply can't do a generic map at all"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "> because we need to pass in the ordering function what's the problem with that? It's all functions in GHC Core as well and we can wrap it up in a class in Plutus Tx making the whole thing indistinguishable from what GHC does"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well, we can't implement it today with our current builtins, right? because a builtin that takes an ordering function as an argument is a HO builtin, no?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we can indeed compile dictionary-passing in Haskell to simple function-passing in PLC and for builtins... but we can't currently pass those functions!"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Can we refer to source files not located under the `doc/read-the-docs-site` from it?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "If not, I'm sure we can figure out a way to make it work"
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "> However, I suspect that just using divideInteger will be faster and cheaper than doing a conversion, a shift, and another conversion. * > However, I suspect that just using divideInteger will be faster and cheaper than doing a conversion, a shift, and another conversion. Kenneth MacKenzie Bitwise operations can be performed on byte strings only in CIP-0058. On the other hand the aritmetic operations can be performed on integers only. In cryptographic algorithms arithmetic and bitwise operations interleave frequently. As a consequence one has to switch between integers and bytestrings via `integerToByteString`/`byteStringToInteger` frequently. That conversion may have significant cost and diminish the advantage of using bitwise operations after all. Moreover `integerToByteString` does not work for negative numbers which requires special handling in cryptographic algorithms, a.k.a. costs you dearly. I have doubts if bitwise operations on byte strings is an optimal choice for cryptographic applications. Perhpas it's worth revising the design choice by allowing bitwise operations on Plutus integers directly. libgmp which is used as runtime for haskell and Plutus integers has direct support for bitwise operations on integers."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "another question (related): ``` [ (\"PT1\", \"TH Generation of Indexed Data Error\") , (\"PT2\", \"Void is not supported\") , (\"PT3\", \"Ratio number can't have a zero denominator\") , (\"PT4\", \"'round' got an incorrect input\") , (\"PT5\", \"'check' input is 'False'\") , (\"PT6\", \"PlutusTx.List.!!: negative index\") , (\"PT7\", \"PlutusTx.List.!!: index too large\") , (\"PT8\", \"PlutusTx.List.head: empty list\") , (\"PT9\", \"PlutusTx.List.tail: empty list\") , (\"PT10\", \"PlutusTx.Enum.().succ: bad argument\") , (\"PT11\", \"PlutusTx.Enum.().pred: bad argument\") , (\"PT12\", \"PlutusTx.Enum.().toEnum: bad argument\") , (\"PT13\", \"PlutusTx.Enum.Bool.succ: bad argument\") , (\"PT14\", \"PlutusTx.Enum.Bool.pred: bad argument\") , (\"PT15\", \"PlutusTx.Enum.Bool.toEnum: bad argument\") , (\"PT16\", \"PlutusTx.Enum.Ordering.succ: bad argument\") , (\"PT17\", \"PlutusTx.Enum.Ordering.pred: bad argument\") , (\"PT18\", \"PlutusTx.Enum.Ordering.toEnum: bad argument\") , (\"PT19\", \"PlutusTx.List.last: empty list\") , (\"PT20\", \"PlutusTx.Ratio.recip: reciprocal of zero\") ] ``` the table started with the \"PTXX <-> Error explanation\" pattern and then quickly changed to the \"PTXX <-> Module: error explanation\""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I reckon that addition of module makes sense in context where stack trace is not revealing the module otherwise."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "If we care about bytes, should we remote the Module.function qualifier assuming its in the stacktrace already?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "(Whatever reasoning we follow, I expect it to be applied consistently)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so `TH_GEN_INDEXED_DATA` is >6 the size of at three character code"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's the only reason they exist"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the second bit isn't in the script"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "so be it. I'll add the note."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yes, your version is fine for costing. I think I'm unsure that we can do _all_ higher-order builtins that way. In particular, it requires us to be able to represent a computation that fully constructs the result as a PLC term, which needn't be possible. e.g. for `mapList` you can return a spine of `cons` applications. But suppose we had not exposed `cons` for some reason (perhaps the data structure has invariants and we don't want to expose the raw constructors). Then we might not be able to produce a term that evaluates to the right thing."
      },
      {
        "userID": "1770569b1a38d39c1c44e35e9d49e1d5f226525f7ee52d69d82dbe5f6e3b6818",
        "message": "* Hello, I've a question regarding Plutus versioning and the set of available builtin functions. I have a specific scenario at hand - I would like to use new crypto primitives (`blake2b_224` and `keccak_256`). Introduction of these primitives was publicly announced as part of Plutus V3. I checked and I'm able to use `blake2b_224` using `Plutus V2` on the `preprod` so I'm happy but also a bit confused now :-) How can I determine if I can use a given `builtin` on a given network?"
      },
      {
        "userID": "1770569b1a38d39c1c44e35e9d49e1d5f226525f7ee52d69d82dbe5f6e3b6818",
        "message": "Hello, I've a question regarding Plutus versioning and the set of available builtin functions. I have a specific scenario at hand - I would like to use new crypto primitives (`blake2b_224` and `keccak_256`). Introduction of these primitives was publicly announced as part of Plutus V3. I checked and I'm able to use `blake2b_224` using `Plutus V2` on the `preprod` so I'm happy but also a bit confused now :-) How can I determine if I can a given `builtin` on a given network?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "in this case I think digging in is optional but virtuous. Sometimes we learn about optimization opportunities by doing stuff like thsi!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the \"Plutus Core on Cardano\" section of the spec should say what is available when:"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* > But why do the numbers go up? I'll dive deeper to find an answer to this question today."
      },
      {
        "userID": "1770569b1a38d39c1c44e35e9d49e1d5f226525f7ee52d69d82dbe5f6e3b6818",
        "message": "Thanks for quick response! Let me recheck - maybe it is a bug on my side :-)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "um, that sounds like a bug, potentially? Kenneth MacKenzie ?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "In the `PlutusTx.ErrorCodes` module we have this table: 🧵"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "ideally via an issue in"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "probably something like that indeed, with maps the spine of the result depends on the result of the passed function and so there isn't much that we can actually optimize by having a builtin unless we do our old cek->builtins->cek->builtins->... thing where we could directly call the CEK machine from within a builtin"
      },
      {
        "userID": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
        "message": "not in many cases? If you do `insert`/`delete`/`lookup`, you don't want to flatten the whole map and return it as an iterated application, because none of this operations is supposed to process the whole map, it's kinda the whole point of having a map"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "interesting to think about what kinds of functions we can do this way: is it something like \"applicative\" functions, i.e. ones where we don't need to know the result of running a function in order to work out the structure of the computation?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well, it's still a lot of saved work to do the decision about what the output looks like in Haskell: you call one builtin, instead of N to deconstruct the value and decide in PLC. Same complexity, probably"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* this error code isn't used anywhere **in the plutus repository**. Should I remove it and if \"yes\" then next question is \"Is it ok to reassign newly released code PT4 then?\""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* this error code isn't used anywhere **in our codebase**. Should I remove it and if \"yes\" then next question is \"Is it ok to reassign newly released code PT4 then?\""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "this error code isn't used anywhere. Should I remove it and if \"yes\" then next question is \"Is it ok to reassign newly released code PT4 then?\""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Are these error codes reserved for internal use?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "good question though"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Sorry, concerns come up faster than I address them 😆. Next concern is that we duplicate this error information in our [troubleshooting doc](), and its already outdated: PT19 is missing and maybe other changes too."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "> <user_id_removed> the second bit isn't in the script Ok, so there is no urge to optimise it. However, should we have them consistent anyway? (For the sake of a good UX)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Joseph Fajen: FYI^ The instance of a classical more general problem of keeping docs up-to-date. What's our solution going forward?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "read the mapping from a file, read that file into the docs to make the table?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "single source of truth is usually the answer"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's the point"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so you can put whatever you want there"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "sure"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "will do."
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "* > However, I suspect that just using divideInteger will be faster and cheaper than doing a conversion, a shift, and another conversion. Kenneth MacKenzie Bitwise operations can be performed on byte strings only in CIP-0058. On the other hand the aritmetic operations can be performed on integers only. In cryptographic algorithms arithmetic and bitwise operations interleave frequently. As a consequence one has to switch between integers and bytestrings via `integerToByteString`/`byteStringToInteger` frequently. That conversion may have significant cost and diminish the advantage of using bitwise operations after all. Moreover `integerToByteString` does not work for negative numbers which requires special handling in cryptographic algorithms, a.k.a. costs you dearly. I have doubts if bitwise operations on byte strings is an optimal choice for cryptographic applications. Perhpas it's worth revising the design choice by allowing bitwise operations on Plutus integers directly. libgmp which is used as runtime for haskell and Plutus integers has direct support for bitwise operations on integers directly."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Looks like the choice is between \"Keep having a ~slightly~ confusing ordered table\" and \"Confuse users ~a lot~ once, but then keep the less confusing table\" :)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "also bear in mind that the whole point of them was to be short, since strings take up lots of space"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we can change it whenever we want, the only cost is confusing people"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "that's the deal with error codes: new stuff has to go at the end"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "This is a good point, I didn't think of costing aspect..."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Is it too late to change the approach?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Either way there is a confusion"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "🤷"
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": ">However, I suspect that just using divideInteger will be faster and cheaper than doing a conversion, a shift, and another conversion. Bitwise operations can be performed on byte strings only in CIP-0058. On the other hand the aritmetic operations can be performed on integers only. In cryptographic algorithms arithmetic and bitwise operations interleave frequently. As a consequence one has to switch between integers and bytestrings via `integerToByteString`/`byteStringToInteger` frequently. That conversion may have significant cost and diminish the advantage of using bitwise operations after all. Moreover `integerToByteString` does not work for negative numbers which requires special handling in cryptographic algorithms, a.k.a. costs you dearly. I have doubts if bitwise operations on byte strings is an optimal choice for cryptographic applications. Perhpas it's worth revising the design choice by allowing bitwise operations on Plutus integers directly. libgmp which is used as runtime for haskell and Plutus integers has direct support for bitwise operations on integers directly."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* OTOH, if I mutate the table such that I insert PT4 and shift all the other codes... how terrible is that? Is re-assigning error codes a no-go?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "the downside is that errors are not ordered by the module anymore, e.g. PlutusTx.Ratio -related errors are going to be spread across the table."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Now I want to add a new error code \"The reciprocal of zero\", which related to the `PlutusTx.Ratio` and is only going to be used there."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* Now I want to add a new error code \"The reciprocal of zero\", which is related to the `PlutusTx.Ratio` and is only going to be used there."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I wonder why did we go for orderable codes [PT1 ..] and not something like semantic codes e.g. `TH_GEN_INDEXED_DATA`"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "OTOH, if I mutate the table such that I insert PT4 and shift all the other codes... how terrible is that?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "The simplest (but arguable not the rightest) thing to do is to append \"PT20\", \"PlutusTx.Ratio.recip: ....\""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "image.png"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Could it be that costs are higher when our inliner is used because the definitions of `&&` and `||` aren't removed despite being unused?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* > But why do the numbers go up? I'll dive deeper to find an answer to this question today."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I'll dive deeper to find an answer to this question today."
      }
    ]
  },
  {
    "date": "2024-04-05",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "The [#4836 PR]() will need much more work: * I found that there's a bug (which I fleshed how to fix in a PR review) * but there's also another issue. Our counters are in terms of `hot` / `warm` and `cold` ; but the outbound governor works in terms of `known`, `established` and `active` sets. I think we should switch counters to use the same notions as the governor and since in various places we compute the number of `known` / `established` / `active` / ... we could have one API to do that which is shared between different places (outbound governor actions & computation of the counters). This would make sure that we don't have any silly bug introduced there. The second point is rather invasive, but the only way I can think of to make sure we don't introduce a bug (now or in the future). karknu marcin.wojtowicz do you think it's better to expose `hot` / `warm` / `cold` in EKG & tracing as we do now; or `known` / `established` / `active`; if it's the former, we can do the subtractions just when presenting them to the users."
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "In terms of monitoring, I would argue that a breakdown into distinct groups of hot/warm/cold is simpler to understand for users. The only other thing (if it's not there already) is just a total sum, ie known."
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "``` git diff diff --git a/cabal.project b/cabal.project index ec1e30866d..d41953317d 100644 --- a/cabal.project +++ b/cabal.project @@ -31,6 +31,7 @@ packages: trace-dispatcher trace-resources trace-forward + ../ouroboros-network/ouroboros-network program-options ghc-options: -Werror ```"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "> <user_id_removed> If you specify a local path you could just specify the packet directory directly I didn't know that, with a different `type`, right?"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "Your personal relay still doesn't provide any peers, but I assume you haven't upgraded it yet"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "This one is not sharable because it contains a file path from my HD, and the tag might be wrong as well."
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "If you specify a local path you could just specify the packet directory directly"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "I've upgraded one of my relays and it appears to work."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "The tag is fine, just the `location` needs to be changed."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I think so too, we can do the simple math on the node side, and keep things simpler for us in `ouroboros-network` - kind of controler / view separation. I am actually quite happy how the refactoring turned out. karknu as a bonus I added shared peers counters."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Right I have the `s-r-p` in `cabal.project.local`: ``` source-repository-package type: git location: /home/coot/clients/iog/ouroboros-consensus tag: 43c0c3ce67d12aaeb501ecdea4bc05d1c5486fde subdir: ouroboros-consensus-diffusion ```"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "karknu: if pushed `coot/PeerSharingAPI-fix-8.9` to `cardano-node`. Once I'll have a consensus in CHaP, I'll remove the `s-r-p` but it shouldn't be any different from the current branch."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I haven't done that, yet. I'll do that once I'll have everything in `CHaP`."
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "Perhaps you forgot to commit that cabal.project file"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "but it doesn't contain the nix hash."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Maybe you need `cabal update`?"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "You need some chap crap or specify a repo"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "That doesn't work"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "Thanks, building"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "karknu: any other ideas how we could make peer sharing more traceable:"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "I'll add something later. Don't want to ctx switch right now"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Can I get a review of"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "Thanks"
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "Done"
      }
    ]
  },
  {
    "date": "2024-04-08",
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messages": [
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "although it might all shake out if we remove the traces that keep those strings alive 🤔"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "IIUC the Haskell implementation is the default one and it works off-chain, but if there is a plugin in action then it somehow overtakes that control and uses plutus implementation?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "the plugin has a big list of names and implementations for builtins. If it sees you compiling one of those, it sticks in its definitions instead"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "of course, if you run it as normal Haskell code, you just get whatever the definition in the Haskell file is"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but there is nothing that stops us from implmenting the `ifThenElse` builtin as... if then else"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "in general, the builtins have Haskell implementations... because we have Haskell implementations that we use at runtime!"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "is there a reason not to implement such a default haskell behavior for the `error` builtin?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "so then you _can_ run things as normal Haskell code"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "well, in the case of `error` throwing an error is accurate ;)"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "basically"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "What would a \"budget\" mean for such a term? In my understanding (please correct if I am wrong) a \"budged\" is \"how much cpu/mem a CEK machine would need to spend in order to evaluate this term\""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* What would a \"budget\" mean for such a term? In my understanding (please correct if I am wrong) a \"budget\" is \"how much cpu/mem a CEK machine would need to spend in order to evaluate this term\""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Looks like I have just answered my own question: the term to evaluate is different and we can't see it in golden files, but the evaluation result is the same."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "such that resulting UPLC term does **not** change."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "`(constr 0)` -> is it a term that's going to be evaluated?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Screenshot_20240408_101137.png"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "but the corresponding budged does!"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Then I change _something_ in the plugin."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "or is it an evaluation result?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "As for the error message itself, here is my attempt to improve it: ``` ghci> PlutusTx.List.head [] *** Exception: The \"error\" placeholder must have been replaced by the core-to-plc plugin during compilation. The most likely reason the replacement didn't happen is that a PlutusTx function was evaluated by off-chain code. CallStack (from HasCallStack): error, called at src/PlutusTx/Utils.hs:8:3 in plutus-tx-1.25.0.0-inplace:PlutusTx.Utils ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "``` <no location info>: error: GHC Core to PLC plugin: Error: Unsupported feature: Kind: GHC.Types.Symbol Context: Compiling kind: GHC.Types.Symbol Context: Compiling kind: GHC.Types.Symbol -> * -> GHC.Types.Constraint Context: Compiling type: GHC.Stack.Types.HasCallStack Context: Compiling type: GHC.Stack.Types.HasCallStack => PlutusTx.Builtins.Internal.BuiltinUnit -> a Context: Compiling type: forall a. GHC.Stack.Types.HasCallStack => PlutusTx.Builtins.Internal.BuiltinUnit -> a ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* So, intermediate status: I don't know if its possible to have a proper stack trace for both off/on-chain evaluation, but at least I can think of a more precise error message."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "So, intermediate status: I don't know if its possible to have a proper stack trace, but at least I can think of a more precise error message."
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I doubt we want the stack trace on-chain: strings are _really_ big, so adding stack trace strings would likely be quite bad"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "ah, even earlier, `HasCallStack` relies on type-level strings!"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "which wasn't obvious"
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": "Ok, the ticket is:"
      },
      {
        "userID": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
        "message": ""
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "okay, for fun, here's what I think will happen: we will compile the (constrained) `error` to the builtin error, which doesn't take the typeclass dictionary as a parametter. But at all the call sites GHC will have inserted a typeclass dictionary and try to pass it to the function. so we'll get type errors"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "This is how uses see it now ``` This must be replaced by the core-to-plc plugin during compilation: error CallStack (from HasCallStack): error, called at src/PlutusTx/Utils.hs:4:26 in plutus-tx-0.1.0.0-6EwthIoMENA5GRJ8xORyCp:PlutusTx.Utils ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "I wonder if the solution is as simple as adding `HasCallStack =>` to the `mustBeReplaced` ?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "they want stacktrace to point to the code which called `error`, not the `Utils` module"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "the problem is that both message and trace misleads users"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I suspect that will not play nicely with the plugin"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'd be interested to see what happens, though!"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "but it could use the right string or whatever"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Ok, I'll experiment and let you know"
      },
      {
        "userID": "961ab6321e63b341dc6460399006f8be35d4d0a728915562a82b2085829b1e84",
        "message": "Is returning a useful message as simple as just changing the error there? (I'm genuinely asking, as far as I recall this was tricky but I don't remember why)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "* > things could be given actual Haskell implementations in case you try to run your on-chain code off-chain how would this work? Do you have an example?"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "> things could be given actual Haskell implementations in case you try to run your on-chain code off-chain how would this work? Do you have an example?"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "also tbh a lot of those things could be given actual Haskell implementations in case you try to run your on-chain code off-chain"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it used to be that all the builtins blew up if you ran them off-chain, but now lot of them have Haskell implementations so 🤷"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "we're quite inconsistent in how we do this"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "yeah, that's pretty primitive at the moment"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "I'm not sure we have a clear polciy"
      },
      {
        "userID": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
        "message": "it's the result of evaluation"
      },
      {
        "userID": "2882a1ddfdcff587a0260d941389e8430e7892da90b81c4d0896665977579c9a",
        "message": "> I have doubts if bitwise operations on byte strings is an optimal choice for cryptographic applications. Perhpas it's worth revising the design choice by allowing bitwise operations on Plutus integers directly. Marcin Bugaj That's a good point, and should be discussed further. It will be helpful if you open an issue in the CIP repository, especially since the author of CIP-0058 isn't yet in this channel."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "My take: how about changing the error message to something like more explanatory: ``` -- | Aborts evaluation with an error. error :: () -> a error = mustBeReplaced \"The PlutusTx.error function was called off-chain while it's meant to be used by the on-chain code only. Please make sure you are not accidentally evaluating an on-chain only function off-chain\" ``` something along these lines (but with a better wording than mine)"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "We have this test: ``` testCheckScEquality :: TestTree testCheckScEquality = testGroup \"checkScriptContextEquality\" [ testGroupGhc [ ... , Tx.goldenBudget \"checkScriptContextEqualityTerm-20\" $ mkScriptContextEqualityTermCode (mkScriptContext 20) , Tx.goldenEvalCekCatch \"checkScriptContextEqualityTerm-20\" $ [mkScriptContextEqualityTermCode (mkScriptContext 20)] .... ] ```"
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "TLDR: when accidentally calling an on-chain code off-chain, there is an error that is very hard for developers to reason about. People are googlin' it and finding a long-standing open issue in our repo."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "My logic is the following: if we can't fix it (its hard to find a common denominator to satisfy off-chain and on-chain requirements at the same time) we should at least emit a most useful error message possible."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "Developers are tripping over this error message since ... long time. There is an [open issue ](). Lets discuss what to do with the problem."
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "\"This must be replaced by the core-to-plc plugin during compilation\""
      },
      {
        "userID": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
        "message": "How is this possible: (🧵)?"
      }
    ]
  },
  {
    "date": "2024-04-08",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I added `peerChurnGovernor` to `PeerSelection` tests, and it has a different problem, demotions are not effective: ``` Table 'trace events' had only 0.35% TraceChurnAction DecreasedActiveBigLedgerPeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnAction DecreasedKnownBigLedgerPeers, but expected 1.00% Table 'trace events' had only 0.04% TraceChurnAction IncreasedActiveBigLedgerPeers, but expected 1.00% Table 'trace events' had only 0.35% TraceChurnAction IncreasedActivePeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnAction IncreasedEstablishedBigLedgerPeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnAction IncreasedEstablishedPeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnAction IncreasedKnownBigLedgerPeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnAction IncreasedKnownPeers, but expected 1.00% Table 'trace events' had only 0.31% TraceChurnTimeout DecreasedActivePeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnTimeout DecreasedEstablishedBigLedgerPeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnTimeout DecreasedEstablishedPeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnTimeout DecreasedKnownBigLedgerPeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnTimeout DecreasedKnownPeers, but expected 1.00% Table 'trace events' had only 0.00% TraceChurnTimeout IncreasedKnownBigLedgerPeers, but expected 1.00% ```"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "The peer selection tests are not running churn, and the testnet has too few peers. Here is coverage from the latter. ``` 0.004% TraceChurnAction DecreasedActivePeers 0.004% TraceChurnAction DecreasedEstablishedBigLedgerPeers 0.004% TraceChurnAction DecreasedEstablishedPeers 0.004% TraceChurnMode ChurnModeNormal 0.004% TraceChurnTimeout DecreasedActiveBigLedgerPeers 0.004% TraceChurnTimeout IncreasedActiveBigLedgerPeers 0.004% TraceChurnTimeout IncreasedActivePeers 0.004% TraceChurnTimeout IncreasedEstablishedBigLedgerPeers 0.004% TraceChurnTimeout IncreasedEstablishedPeers 0.004% TraceChurnTimeout IncreasedKnownPeers ``` It might be that we get timeouts on all the increase actions because there are just fewer peers than the targets we set."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I found a bug 🙂. I used a condition: ``` numberOfRootPeers <= targetNumberOfRootPeers && numberOfKnownPeers <= targetNumberOfKnownPeers && numberOfKnownBigLedgerPeers <= targetNumberOfKnownBigLedgerPeers ``` to check that we dropped known peers, but the `targetNumberOfRootPeers` is a one-sided target, decreasing it will not always lead to smaller number of root peers."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "For the netsim test: if we don't see `TraceChurnTimeout` and we don't violate the progress properties - then it's the best evidence what we can get now that churn is not broken."
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "Look at the generated targets, I recall seeing traces where targets where in the 500 - 1000 range"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "marcin.wojtowicz: you can rebase your [PR #4832]() on top of the above. There will be some conflicts..."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "karknu: marcin.wojtowicz is ready for review."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I think I'll stick with it for now."
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "yes, I am using it."
      },
      {
        "userID": "53b3b443306b5df791baa03d91e62284631964aa550a1cc72ba09eb11ec87e21",
        "message": "I'm not sure what would be best to expose. hot / warm and cold are easy for us to get. However the end user configures known / established and active. If I was an SPO I would like to be able to check that my node reaches the targets I configured"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "> <@the-coot:matrix.org> I am trying as a matrix client on the web. oh, it doesn't have threads; might be fun for those who like IRC experience 😁"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "No threads is no go for me. There's also a native gnome client called `fractal`, but it doesn't seem to have threads either."
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "Do you know how it compares to element.io? That's what I use and it does the job"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "I am trying as a matrix client on the web."
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "fyi element has threads, if you haven't already tried it"
      },
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "That is a good point"
      },
      {
        "userID": "7fd19f4a850c4bfcf5df399341cf5aedaf2deaf963c8213ceaf413e70c2921b3",
        "message": "- no threads as well"
      }
    ]
  },
  {
    "date": "2024-04-09",
    "roomId": "!FyoHGPCEstNxESeqxL:matrix.org",
    "messages": [
      {
        "userID": "c4a378a6aef5cbbbbd722597ba557ef04199182ddae865bd24f4726d4093b306",
        "message": "> <@the-coot:matrix.org> karknu: marcin.wojtowicz is ready for review. I've made some comments re changes to churn"
      }
    ]
  }
]