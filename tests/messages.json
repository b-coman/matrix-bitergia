[
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$4XvSRrylVXmA9tRp344GpL5gzbFLtfVhAHH-FIOgXJ4",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "ideally via an issue in",
    "timestamp": "2024-04-05T20:36:50.752Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$ecPpwnb-TojyAz99ahDvWTWGeLTgTW5TvpMRbXq4CDA",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "* it would help a lot if you provided us with a minimal reproducible example",
    "timestamp": "2024-04-05T20:36:29.700Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$60-odYLe-CfPJMPyA8pYSd0pVLEMoaX7zj5MC9yPXTg",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "it would help a lot if you provided us with an minimal reproducible example",
    "timestamp": "2024-04-05T20:36:24.875Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$fNQw-t9XM_bLMfhMkaUR6EsPeOhqNwn2OUor2zl4Ny8",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "are you sure it returns the same result?",
    "timestamp": "2024-04-05T20:35:12.474Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$BHA7wbN5QjJlk_D700lbJTMXkNZU9gyLe4F_oplqVXQ",
    "anonymizedUserId": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
    "messageBody": "``` {-# INLINE lookupToken' #-} lookupToken' :: BuiltinByteString -> BI.BuiltinList (BI.BuiltinPair BI.BuiltinData BI.BuiltinData) -> Integer lookupToken' tn_b l = matchList l 0 (\\h t -> if BI.unsafeDataAsB (BI.fst h) == tn_b then -- return token value BI.unsafeDataAsI $ BI.snd h else lookupToken' tn_b t ) ````",
    "timestamp": "2024-04-05T20:34:15.317Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$OJwS-fh3iedCFaHi5zs-zJyPqOVZOPVaapRQbCxAJc0",
    "anonymizedUserId": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
    "messageBody": "* I'm certain benchmarked it many times. Maybe it has something to do with strictness.",
    "timestamp": "2024-04-05T20:33:57.110Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$PVR2wQE8d53-TkTQkkKE--9HjwS8FRHqikPl0uYSVYo",
    "anonymizedUserId": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
    "messageBody": "I'm certain benchmarked it many times.",
    "timestamp": "2024-04-05T20:33:34.179Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$32zpmoWaEZbjQ4c9MeExVC6f90I3jjPop6JZlq6O1n0",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "are you sure it's less efficient? I find it extremely hard to believe that. Not sure what `lookupToken'` is though",
    "timestamp": "2024-04-05T20:08:52.710Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$29-fZkusKWxtyzaCyVKysGQ_wtap6Bw1_zTtMou98vg",
    "anonymizedUserId": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
    "messageBody": "* Somehow: ```builtinLovelaceValueOf builtinLovelaceValueOf b_v = BI.unsafeDataAsI $ BI.snd $ BI.head $ BI.unsafeDataAsMap $ BI.snd $ BI.head (BI.unsafeDataAsMap b_v) ``` is 5\\_000\\_000 mem less efficient than: ``` {-# INLINE builtinValueOf' #-} builtinValueOf' :: BuiltinCurrencySymbol -> TokenName -> BuiltinValue -> Integer builtinValueOf' b_cs (TokenName tn_b) b = outer_go $ BI.unsafeDataAsMap b where outer_go :: BI.BuiltinList (BI.BuiltinPair BI.BuiltinData BI.BuiltinData) -> Integer outer_go l = matchList l 0 (\\h t -> if BI.fst h == b_cs then lookupToken' tn_b $ BI.unsafeDataAsMap $ BI.snd h else outer_go t ) ``` when used like so: ``` builtinValueOf' CC.builtinAdaSymbol' adaToken r_v ``` This makes no sense to me. Also is there some config we can pass the plutustx compiler to make everything strict and allow us to insert delays / forces ourselves. Also is there an equivalent of seq for plutustx.",
    "timestamp": "2024-04-05T18:58:39.804Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$DOPVz8ltFMDZdZZXBxOVWmRtSubwoFZqTNAsPfBRnX4",
    "anonymizedUserId": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
    "messageBody": "* Somehow: ```builtinLovelaceValueOf builtinLovelaceValueOf b_v = BI.unsafeDataAsI $ BI.snd $ BI.head $ BI.unsafeDataAsMap $ BI.snd $ BI.head (BI.unsafeDataAsMap b_v) ``` is 5\\_000\\_000 mem less efficient than: ``` {-# INLINE builtinValueOf' #-} builtinValueOf' :: BuiltinCurrencySymbol -> TokenName -> BuiltinValue -> Integer builtinValueOf' b_cs (TokenName tn_b) b = outer_go $ BI.unsafeDataAsMap b where outer_go :: BI.BuiltinList (BI.BuiltinPair BI.BuiltinData BI.BuiltinData) -> Integer outer_go l = matchList l 0 (\\h t -> if BI.fst h == b_cs then lookupToken' tn_b $ BI.unsafeDataAsMap $ BI.snd h else outer_go t ) ``` when used like so: ``` builtinValueOf' CC.builtinAdaSymbol' adaToken r_v ``` This makes no sense to me.",
    "timestamp": "2024-04-05T18:13:29.660Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$eEyIhw3PtOWQckkMwHUSfWEF-P-GvwFilr2aAhzLzN8",
    "anonymizedUserId": "eeed3bab9011780cca25cab718642afdc15f41804bcf005396df04d4e31bd976",
    "messageBody": "Somehow: ```builtinLovelaceValueOf :: BuiltinValue -> Integer builtinLovelaceValueOf b_v = BI.unsafeDataAsI $ BI.snd $ BI.head $ BI.unsafeDataAsMap $ BI.snd $ BI.head (BI.unsafeDataAsMap b_v) ``` is 5_000_000 mem less efficient than: ``` {-# INLINE builtinValueOf' #-} builtinValueOf' :: BuiltinCurrencySymbol -> TokenName -> BuiltinValue -> Integer builtinValueOf' b_cs (TokenName tn_b) b = outer_go $ BI.unsafeDataAsMap b where outer_go :: BI.BuiltinList (BI.BuiltinPair BI.BuiltinData BI.BuiltinData) -> Integer outer_go l = matchList l 0 (\\h t -> if BI.fst h == b_cs then lookupToken' tn_b $ BI.unsafeDataAsMap $ BI.snd h else outer_go t ) ``` when used like so: ``` builtinValueOf' CC.builtinAdaSymbol' adaToken r_v ```",
    "timestamp": "2024-04-05T18:13:18.352Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$1IEm_E28WlNgvHL2EDZJdPb-uNjfx3_dpWcscrIv9Ak",
    "anonymizedUserId": "1770569b1a38d39c1c44e35e9d49e1d5f226525f7ee52d69d82dbe5f6e3b6818",
    "messageBody": "Okey, everything is clear now - please forgive my outdated/invalid report. I used older version of PlutusTx and the issue is not present in the newer version any more. @Kenneth MacKenzie confirmed what you suggested Michael Peyton Jones that these builtins will be available in PV3.",
    "timestamp": "2024-04-05T15:53:22.935Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$ye2_o3ndKvWNekd9YWWiauE5wqxyJBOULsDSYvxrVHw",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "that's what I'd expect from such codes generally",
    "timestamp": "2024-04-05T14:37:23.360Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$ieJ0tY7L-iE4fo7LJI3c_YkVWjP_SsCj7YzQKdf1DDo",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "yes",
    "timestamp": "2024-04-05T14:37:15.511Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$iex6OKpEpVbG290BFBvit8RE3snqfSpAuxFEgSwKB_U",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "For starters this (remove but don't recycle) looks like an adequate policy, wdyt?",
    "timestamp": "2024-04-05T14:37:09.923Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$S62pwss-kl0URE4dNMwEu0TtvIy2efB1AAuEvD8vzYg",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "I did remove the unused code PT4, but didn't dare to reuse it, as I am not sure about the impact on users.",
    "timestamp": "2024-04-05T14:36:22.624Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$GNpTJNTJx4N1Qm1V0Yn7JjsNq488XllzeiAzG_QSLeE",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "",
    "timestamp": "2024-04-05T14:34:38.608Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$c49pqyxu28dcEXGnOw0aAlQDILnwsvBrzjvz_FWlIRQ",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "so what do you think we should do?",
    "timestamp": "2024-04-05T13:08:42.847Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$kAa5vvB5toAfHv031oxpSGZY7WugltZ9kMPD6pYliI8",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "I think you can assume that if the policy isn't written down then there isn't one",
    "timestamp": "2024-04-05T13:08:37.438Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$RRq0BmPg6Lj2QHCczzoXE4dLGDF_xAXNDotj5oGC1JU",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "not in many cases? If you do `insert`/`delete`/`lookup`, you don't want to flatten the whole map and return it as an iterated application, because none of this operations is supposed to process the whole map, it's kinda the whole point of having a map",
    "timestamp": "2024-04-05T12:20:58.074Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$pa19ewz_qwVmER_DNlUsJ5nvBEZjutF0a6SJJvB91Is",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "* this error code isn't used anywhere **in the plutus repository**. Should I remove it and if \"yes\" then next question is \"Is it ok to reassign newly released code PT4 then?\"",
    "timestamp": "2024-04-05T12:05:23.239Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$rVyS5j8oriEyn14NzarJmxMtGp9O5EkBXs5-42np14E",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "* this error code isn't used anywhere **in our codebase**. Should I remove it and if \"yes\" then next question is \"Is it ok to reassign newly released code PT4 then?\"",
    "timestamp": "2024-04-05T12:05:02.405Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$H6WlpK7HPcwt37hfxWoRUwuKMXacpq3yq1Pvaf7igf8",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "Are these error codes reserved for internal use?",
    "timestamp": "2024-04-05T12:04:46.693Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$lP9QPPwWzf4VjqWiiubnm3aAKA8AaLv2n_V-0_YuwRI",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "this error code isn't used anywhere. Should I remove it and if \"yes\" then next question is \"Is it ok to reassign newly released code PT4 then?\"",
    "timestamp": "2024-04-05T12:03:44.900Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$3An9jRuq7PHA0FqMcX8mvKDGNACQgEtkL25DNo5AiPM",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "well, it's still a lot of saved work to do the decision about what the output looks like in Haskell: you call one builtin, instead of N to deconstruct the value and decide in PLC. Same complexity, probably",
    "timestamp": "2024-04-05T11:24:54.758Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$iZw5tiHuDhs6xjzrKI28wKQYRLmQAZoUEAr9sHAkVe0",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "probably something like that indeed, with maps the spine of the result depends on the result of the passed function and so there isn't much that we can actually optimize by having a builtin unless we do our old cek->builtins->cek->builtins->... thing where we could directly call the CEK machine from within a builtin",
    "timestamp": "2024-04-05T11:20:02.593Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$lG-nkKoh37UnncF8v_hevy_ubmGAp60gXhNN3DXhsO4",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "interesting to think about what kinds of functions we can do this way: is it something like \"applicative\" functions, i.e. ones where we don't need to know the result of running a function in order to work out the structure of the computation?",
    "timestamp": "2024-04-05T11:17:20.858Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$ROBVQQpK7t8QkC01DLnzm34O043q388at4RFLybVRrM",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "good question though",
    "timestamp": "2024-04-05T11:16:24.162Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$j0jcl1zztnmrDLnc62kVkSm3Os70bk6H3hQzHKOxnik",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "sorry, I think we're agreeing, just in circles :) I agree that your approach lets us do some HO builtins, possibly including stuff like the Map example > is it really different from just implementing maps in Plutus Tx? well, we can say the same about pattern-matching builtins, no? a bunch of the work happens in the main evaluator after the builtin is finished. So wherre is the improvement? It has to be that the bit where we \"decide what evaluation to do\" is faster. the same could be true of something like `mapList`: you don't have to do N builtin calls to get all the elements of the list in order to know that you need to map each element and cons them all together; that part gets done in Haskell",
    "timestamp": "2024-04-05T11:16:21.253Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$Uf2CkGp4IadDk0dTYcm2E0dncz_kGxLuCjMZvoXix5A",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "> well, we can't implement it today with our current builtins, right? because a builtin that takes an ordering function as an argument is a HO builtin, no? Sure, but there's a PR making that possible... Oh yeah, stupid me, those functions aren't gonna be evaluated within the definition of the builtin, we'd pass them back to the CEK machine instead and at that point is it really different from just implementing maps in Plutus Tx?",
    "timestamp": "2024-04-05T11:10:35.150Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$mxfUZMARjv9kUVbl6SvXimxwa3Z5MA7QzmhH_FPUYSY",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "we can indeed compile dictionary-passing in Haskell to simple function-passing in PLC and for builtins... but we can't currently pass those functions!",
    "timestamp": "2024-04-05T10:58:47.240Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$XIAprpn8LmuTwYh_x20KIZPOjY0gY1AIpq3c8s4HgiY",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "well, we can't implement it today with our current builtins, right? because a builtin that takes an ordering function as an argument is a HO builtin, no?",
    "timestamp": "2024-04-05T10:58:10.593Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$wc7oHzXq23GZdUn8HQqjgEXQX-TLwAtYRWPipbtwhcs",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "> because we need to pass in the ordering function what's the problem with that? It's all functions in GHC Core as well and we can wrap it up in a class in Plutus Tx making the whole thing indistinguishable from what GHC does",
    "timestamp": "2024-04-05T10:57:26.277Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$wXzbemTJSJ4WYnd9jvOqfn9kzkwxmhrVP2YfK4iJAcY",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "I think the issue with `Map` is more that we need HO builtins to even make them _possible_, because we need to pass in the ordering function. Sure, we'd then have a question of what API to expose, but at the moment I think we simply can't do a generic map at all",
    "timestamp": "2024-04-05T10:55:13.218Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$545tVVJ2KJPPPDd8C1QLHkGQJd0_bfxwR_y8upyED7o",
    "anonymizedUserId": "0e965b252adbbce5cd4713c5d8576e7bd9bbd68058c7e90cd61be6ab2026d88e",
    "messageBody": "> I think I'm unsure that we can do all higher-order builtins that way. we can't do _all_ builtins for any kind of builtins. So I think the worst part is that even if we could have HO builtins without any limitations, how useful could we even make them? You have a `Map`: what are you going to expose as builtins? The whole API of `Data.Map`? The most useful functions? The most general ones, even though their instantiations aren't going to be as fast as they're in the API of `Data.Map`? Etc, it's all relative and we can't get _all_ of anything. Bottom line is that HO builtins in some form are possible and have some utility.",
    "timestamp": "2024-04-05T10:52:02.192Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$v1W0esiLhL5hS-1KCQG5fM5gp5KnynWZTsUr-4ur1y0",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "If not, I'm sure we can figure out a way to make it work",
    "timestamp": "2024-04-05T10:40:47.348Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$cdPvyBhuzxOAWQgcuEcdIEcIXGGShkSvtfBQ3zLbWLI",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "Can we refer to source files not located under the `doc/read-the-docs-site` from it?",
    "timestamp": "2024-04-05T10:25:11.150Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$cQQkFKWqBKIQaq9JNdPm_7v75u8r3eU6Wy_magxdayM",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "single source of truth is usually the answer",
    "timestamp": "2024-04-05T10:23:40.436Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$X2dd_m5UCtTChaMyLfN2wbsPEP7klGBy7_4yzuQDW-0",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "read the mapping from a file, read that file into the docs to make the table?",
    "timestamp": "2024-04-05T10:23:31.726Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$HPLaSetuc-_J69ql_ba5tsk2jiCspT6HzBPCZj1PBxs",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "Joseph Fajen: FYI^ The instance of a classical more general problem of keeping docs up-to-date. What's our solution going forward?",
    "timestamp": "2024-04-05T10:21:39.439Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$cotGCFhjK0ORapkZZzebevfMVZpHXGpSd_tv-HhxOr8",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "Sorry, concerns come up faster than I address them 😆. Next concern is that we duplicate this error information in our [troubleshooting doc](), and its already outdated: PT19 is missing and maybe other changes too.",
    "timestamp": "2024-04-05T10:18:35.275Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$hTXLvNsW6DbfX0LSl5e2axCO46j4Tmt-gR4lorPTEsY",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "will do.",
    "timestamp": "2024-04-05T10:10:09.222Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$EpN8BnNnOU36_UK_WksAK0MOrZnwOsjeFIA7wkyGn7A",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "sure",
    "timestamp": "2024-04-05T10:09:54.315Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$7ktMzurmsK1RWIGGA5IlFuKM7GCWJACwnRxplGsGRzE",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "> <user_id_removed> the second bit isn't in the script Ok, so there is no urge to optimise it. However, should we have them consistent anyway? (For the sake of a good UX)",
    "timestamp": "2024-04-05T10:09:48.393Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$A74QErzZPR06dYwt0z1LQNiJUOvaFuDp-95a9i-ZMbA",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "so you can put whatever you want there",
    "timestamp": "2024-04-05T10:08:05.029Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$erYLC9dKQoWtnBp44bSLQj1ukG34dM2unjGX4GXKTTo",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "that's the point",
    "timestamp": "2024-04-05T10:08:01.947Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$VGvZShgs10kFtmALMTkdIKtUZZqnb1kMoRBs2IM-9Ms",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "the second bit isn't in the script",
    "timestamp": "2024-04-05T10:07:59.395Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$3wJ3W8FXhBJZJbq6cxdVEOUQ89l9wowkLMthCfZeFeU",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "(Whatever reasoning we follow, I expect it to be applied consistently)",
    "timestamp": "2024-04-05T10:07:54.677Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$dliGreNUxN1bmb1XxXVfGgG2N8ZUG7NNTU-TtHZhtwI",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "If we care about bytes, should we remote the Module.function qualifier assuming its in the stacktrace already?",
    "timestamp": "2024-04-05T10:07:21.808Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$4pt6FWtgOu1w68PqP6mC0p6tfRUQozC65FTzTyjiuDU",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "I reckon that addition of module makes sense in context where stack trace is not revealing the module otherwise.",
    "timestamp": "2024-04-05T10:06:18.386Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$lUqHRTqZ9wIorwuIA83I52O3JZcOfbEkk83OTFv0ueE",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "another question (related): ``` [ (\"PT1\", \"TH Generation of Indexed Data Error\") , (\"PT2\", \"Void is not supported\") , (\"PT3\", \"Ratio number can't have a zero denominator\") , (\"PT4\", \"'round' got an incorrect input\") , (\"PT5\", \"'check' input is 'False'\") , (\"PT6\", \"PlutusTx.List.!!: negative index\") , (\"PT7\", \"PlutusTx.List.!!: index too large\") , (\"PT8\", \"PlutusTx.List.head: empty list\") , (\"PT9\", \"PlutusTx.List.tail: empty list\") , (\"PT10\", \"PlutusTx.Enum.().succ: bad argument\") , (\"PT11\", \"PlutusTx.Enum.().pred: bad argument\") , (\"PT12\", \"PlutusTx.Enum.().toEnum: bad argument\") , (\"PT13\", \"PlutusTx.Enum.Bool.succ: bad argument\") , (\"PT14\", \"PlutusTx.Enum.Bool.pred: bad argument\") , (\"PT15\", \"PlutusTx.Enum.Bool.toEnum: bad argument\") , (\"PT16\", \"PlutusTx.Enum.Ordering.succ: bad argument\") , (\"PT17\", \"PlutusTx.Enum.Ordering.pred: bad argument\") , (\"PT18\", \"PlutusTx.Enum.Ordering.toEnum: bad argument\") , (\"PT19\", \"PlutusTx.List.last: empty list\") , (\"PT20\", \"PlutusTx.Ratio.recip: reciprocal of zero\") ] ``` the table started with the \"PTXX <-> Error explanation\" pattern and then quickly changed to the \"PTXX <-> Module: error explanation\"",
    "timestamp": "2024-04-05T10:05:38.838Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$Eaj5aUw_C16sYV_s5sqsp7FvrlGBIILlBvzbiIm2aQs",
    "anonymizedUserId": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
    "messageBody": "> However, I suspect that just using divideInteger will be faster and cheaper than doing a conversion, a shift, and another conversion. * > However, I suspect that just using divideInteger will be faster and cheaper than doing a conversion, a shift, and another conversion. Kenneth MacKenzie Bitwise operations can be performed on byte strings only in CIP-0058. On the other hand the aritmetic operations can be performed on integers only. In cryptographic algorithms arithmetic and bitwise operations interleave frequently. As a consequence one has to switch between integers and bytestrings via `integerToByteString`/`byteStringToInteger` frequently. That conversion may have significant cost and diminish the advantage of using bitwise operations after all. Moreover `integerToByteString` does not work for negative numbers which requires special handling in cryptographic algorithms, a.k.a. costs you dearly. I have doubts if bitwise operations on byte strings is an optimal choice for cryptographic applications. Perhpas it's worth revising the design choice by allowing bitwise operations on Plutus integers directly. libgmp which is used as runtime for haskell and Plutus integers has direct support for bitwise operations on integers.",
    "timestamp": "2024-04-05T10:02:07.359Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$XNScvHCTVIrWm_KLgFtUq5vvpaROTnmKexpwa-Q__5M",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "so be it. I'll add the note.",
    "timestamp": "2024-04-05T10:01:06.861Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$dcothPZElJXnEH4OWeEYiFfTxO213I2XB-o1rQATSTw",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "that's the only reason they exist",
    "timestamp": "2024-04-05T10:00:54.271Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$tyKmiO-gH_cFxYP8THFPfWoOqv3WSY0RbMJtP5De04E",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "so `TH_GEN_INDEXED_DATA` is >6 the size of at three character code",
    "timestamp": "2024-04-05T10:00:50.569Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$s4vsaCymWDnbdiENsLV1eQ47nQlRE5A_rSXbhklxcN8",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "This is a good point, I didn't think of costing aspect...",
    "timestamp": "2024-04-05T10:00:47.083Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$i6sdyJeAMbw71I4QxlP531QdPgzHftfuMbwimzHRGfE",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "also bear in mind that the whole point of them was to be short, since strings take up lots of space",
    "timestamp": "2024-04-05T10:00:26.675Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$6_2-oUTrdBbBOMjoaAPsHdTf2h8bhdwb1lIGmpfmFDA",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "Either way there is a confusion",
    "timestamp": "2024-04-05T09:59:31.630Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$Ucssux1uQWU3fwSf1V-5wPJziDGr6n5rTuADd_aQYpA",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "Looks like the choice is between \"Keep having a ~slightly~ confusing ordered table\" and \"Confuse users ~a lot~ once, but then keep the less confusing table\" :)",
    "timestamp": "2024-04-05T09:59:08.801Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$4OxeWPSjhdMt2SGkpjA925YSKlkMsWp7pPc4tA8x3Yo",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "we can change it whenever we want, the only cost is confusing people",
    "timestamp": "2024-04-05T09:57:46.897Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$E0QkYuD7E6WHBLkvvu4PQGYjmVmn_a-1Uqn8jVJD5hM",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "Is it too late to change the approach?",
    "timestamp": "2024-04-05T09:57:10.168Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$1mihwNcDhIH2F2fvLemA-PEHICXHroLBbf1PcbfznpQ",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "🤷",
    "timestamp": "2024-04-05T09:56:17.316Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$ZKbgGNytYkGx0hZBks0vlGWEcHgEFnp5rWUO4irbpXw",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "that's the deal with error codes: new stuff has to go at the end",
    "timestamp": "2024-04-05T09:56:11.107Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$1H0ed1ooEvmeeewPmofAtXRq_MN3D3Ywviaf-CzNCHY",
    "anonymizedUserId": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
    "messageBody": "* > However, I suspect that just using divideInteger will be faster and cheaper than doing a conversion, a shift, and another conversion. Kenneth MacKenzie Bitwise operations can be performed on byte strings only in CIP-0058. On the other hand the aritmetic operations can be performed on integers only. In cryptographic algorithms arithmetic and bitwise operations interleave frequently. As a consequence one has to switch between integers and bytestrings via `integerToByteString`/`byteStringToInteger` frequently. That conversion may have significant cost and diminish the advantage of using bitwise operations after all. Moreover `integerToByteString` does not work for negative numbers which requires special handling in cryptographic algorithms, a.k.a. costs you dearly. I have doubts if bitwise operations on byte strings is an optimal choice for cryptographic applications. Perhpas it's worth revising the design choice by allowing bitwise operations on Plutus integers directly. libgmp which is used as runtime for haskell and Plutus integers has direct support for bitwise operations on integers directly.",
    "timestamp": "2024-04-05T09:53:30.533Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$q5VcmvWPE4ZMvG95H57rk266Jh0_Zg-RiqP86YjTp7U",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "* Now I want to add a new error code \"The reciprocal of zero\", which is related to the `PlutusTx.Ratio` and is only going to be used there.",
    "timestamp": "2024-04-05T09:46:08.909Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$aUBL02N8oIprQefnN42FMBaf05wSWuro3X8guTQklX4",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "I wonder why did we go for orderable codes [PT1 ..] and not something like semantic codes e.g. `TH_GEN_INDEXED_DATA`",
    "timestamp": "2024-04-05T09:45:33.699Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$s_tUheAv98ctSECDaQqqWsoLxiyxmB8T-fBNK59nzeM",
    "anonymizedUserId": "7266966582d171065f7987b9ad357e21e44bd49f265d353b9a71f64e03f860ed",
    "messageBody": ">However, I suspect that just using divideInteger will be faster and cheaper than doing a conversion, a shift, and another conversion. Bitwise operations can be performed on byte strings only in CIP-0058. On the other hand the aritmetic operations can be performed on integers only. In cryptographic algorithms arithmetic and bitwise operations interleave frequently. As a consequence one has to switch between integers and bytestrings via `integerToByteString`/`byteStringToInteger` frequently. That conversion may have significant cost and diminish the advantage of using bitwise operations after all. Moreover `integerToByteString` does not work for negative numbers which requires special handling in cryptographic algorithms, a.k.a. costs you dearly. I have doubts if bitwise operations on byte strings is an optimal choice for cryptographic applications. Perhpas it's worth revising the design choice by allowing bitwise operations on Plutus integers directly. libgmp which is used as runtime for haskell and Plutus integers has direct support for bitwise operations on integers directly.",
    "timestamp": "2024-04-05T09:45:22.027Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$dPktVpOnV2toJjKK3WbxKrkRl1f0_oTR_cqnQgvr9qU",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "* OTOH, if I mutate the table such that I insert PT4 and shift all the other codes... how terrible is that? Is re-assigning error codes a no-go?",
    "timestamp": "2024-04-05T09:44:25.320Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$91ybG8xp3SMByfTm1DLzsR1mOZyA5Hca8E6IfR8qYE0",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "OTOH, if I mutate the table such that I insert PT4 and shift all the other codes... how terrible is that?",
    "timestamp": "2024-04-05T09:44:00.302Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$GWcekG9AdY2uNkhzZZ5wPBzHfKRYatOIDEgiKQK0V58",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "the downside is that errors are not ordered by the module anymore, e.g. PlutusTx.Ratio -related errors are going to be spread across the table.",
    "timestamp": "2024-04-05T09:42:58.206Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$QxcbyKRMoZYdpUwfglNR3koQBFWB_Ggsd9OMM2HtwJM",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "The simplest (but arguable not the rightest) thing to do is to append \"PT20\", \"PlutusTx.Ratio.recip: ....\"",
    "timestamp": "2024-04-05T09:42:05.825Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$zTMDobZsKJZWtW0OrcizOL0AjXFBDN14Xqnv4bu7FJw",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "Now I want to add a new error code \"The reciprocal of zero\", which related to the `PlutusTx.Ratio` and is only going to be used there.",
    "timestamp": "2024-04-05T09:41:00.137Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$0cZIAKuvh5xBrmCjwripQSZlv8ELKaFkgB2Qtv7dSuo",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "image.png",
    "timestamp": "2024-04-05T09:39:46.092Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$dzI4nqATVoS3CwO8Z-OLg2LvRdCQplbX6tbJ5gji4s4",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "In the `PlutusTx.ErrorCodes` module we have this table: 🧵",
    "timestamp": "2024-04-05T09:39:37.694Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$b0OWq_n8lsxFoDf-1l7srui3tCTsOsmbjxWj02jJZAM",
    "anonymizedUserId": "1770569b1a38d39c1c44e35e9d49e1d5f226525f7ee52d69d82dbe5f6e3b6818",
    "messageBody": "Thanks for quick response! Let me recheck - maybe it is a bug on my side :-)",
    "timestamp": "2024-04-05T09:19:25.644Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$k8hUw0qwh0Dk0qndKulOxSiE8jaZu88jKVL2krj0lmU",
    "anonymizedUserId": "1770569b1a38d39c1c44e35e9d49e1d5f226525f7ee52d69d82dbe5f6e3b6818",
    "messageBody": "* Hello, I've a question regarding Plutus versioning and the set of available builtin functions. I have a specific scenario at hand - I would like to use new crypto primitives (`blake2b_224` and `keccak_256`). Introduction of these primitives was publicly announced as part of Plutus V3. I checked and I'm able to use `blake2b_224` using `Plutus V2` on the `preprod` so I'm happy but also a bit confused now :-) How can I determine if I can use a given `builtin` on a given network?",
    "timestamp": "2024-04-05T09:15:33.492Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$CXv27_B1Czv7j9B80k2chiaeNUIYDvqnnsLufxEep8U",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "the \"Plutus Core on Cardano\" section of the spec should say what is available when:",
    "timestamp": "2024-04-05T09:14:53.255Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$mrNMD5Ge0rUYhNk_Qf0xnsNztEgdhXsVOa2ERhIBaDU",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "um, that sounds like a bug, potentially? Kenneth MacKenzie ?",
    "timestamp": "2024-04-05T09:14:39.778Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$BwTrCY86tfmDP9fH-qYNdaydRVEf-nV3uvnBy-Nb5FA",
    "anonymizedUserId": "1770569b1a38d39c1c44e35e9d49e1d5f226525f7ee52d69d82dbe5f6e3b6818",
    "messageBody": "Hello, I've a question regarding Plutus versioning and the set of available builtin functions. I have a specific scenario at hand - I would like to use new crypto primitives (`blake2b_224` and `keccak_256`). Introduction of these primitives was publicly announced as part of Plutus V3. I checked and I'm able to use `blake2b_224` using `Plutus V2` on the `preprod` so I'm happy but also a bit confused now :-) How can I determine if I can a given `builtin` on a given network?",
    "timestamp": "2024-04-05T09:08:35.249Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$xiHr6yBE9LMpQRBRzgA0COm9Gpc1B_z-ODkAStUuPSA",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "yes, your version is fine for costing. I think I'm unsure that we can do _all_ higher-order builtins that way. In particular, it requires us to be able to represent a computation that fully constructs the result as a PLC term, which needn't be possible. e.g. for `mapList` you can return a spine of `cons` applications. But suppose we had not exposed `cons` for some reason (perhaps the data structure has invariants and we don't want to expose the raw constructors). Then we might not be able to produce a term that evaluates to the right thing.",
    "timestamp": "2024-04-05T08:43:02.423Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$KAC6VzY_rKnN7MGbcYnHIwOAaE-CDXW3PmRhrlpm4Fs",
    "anonymizedUserId": "86af087c864a9f8f0302d0215931b8b4bff3460d3ad418d69259dc3360967d51",
    "messageBody": "in this case I think digging in is optional but virtuous. Sometimes we learn about optimization opportunities by doing stuff like thsi!",
    "timestamp": "2024-04-05T08:40:16.517Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$jtj_38YuTkaEMZBAest80ZIYbwV60VRkD-JJeE6qYV0",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "* > But why do the numbers go up? I'll dive deeper to find an answer to this question today.",
    "timestamp": "2024-04-05T08:17:04.954Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$vIVJN1us84jLJPjjCmxwCFQOIipzIuFUfT_3_2tjbBQ",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "* > But why do the numbers go up? I'll dive deeper to find an answer to this question today.",
    "timestamp": "2024-04-05T08:16:55.378Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$VxcqV-RoXr553lOaepEvlQP3oHcUQR__9a8HXY1S89s",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "I'll dive deeper to find an answer to this question today.",
    "timestamp": "2024-04-05T08:16:34.626Z"
  },
  {
    "roomId": "!WcwNDMHEuRTiBZZkxf:matrix.org",
    "messageId": "$odMPHmkCDV7yAlvA6ppkXOtcEzrb7JM-5SalhwZA1Ug",
    "anonymizedUserId": "010cb272c06fa92fdcfb7699bac7ce3e12a4cc11db9f274b6104e2aaa9aaca29",
    "messageBody": "Could it be that costs are higher when our inliner is used because the definitions of `&&` and `||` aren't removed despite being unused?",
    "timestamp": "2024-04-05T08:16:04.465Z"
  }
]